(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function(strings) {
  if (typeof strings === 'string') strings = [strings]
  var exprs = [].slice.call(arguments,1)
  var parts = []
  for (var i = 0; i < strings.length-1; i++) {
    parts.push(strings[i], exprs[i] || '')
  }
  parts.push(strings[i])
  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (global){
/*!
 * VERSION: 1.19.0
 * DATE: 2016-07-14
 * UPDATES AND DOCS AT: http://greensock.com
 * 
 * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
 *
 * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {

	"use strict";

	_gsScope._gsDefine("TweenMax", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

		var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++]));
				return b;
			},
			_applyCycle = function(vars, targets, i) {
				var alt = vars.cycle,
					p, val;
				for (p in alt) {
					val = alt[p];
					vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
				}
				delete vars.cycle;
			},
			TweenMax = function(target, duration, vars) {
				TweenLite.call(this, target, duration, vars);
				this._cycle = 0;
				this._yoyo = (this.vars.yoyo === true);
				this._repeat = this.vars.repeat || 0;
				this._repeatDelay = this.vars.repeatDelay || 0;
				this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
				this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_isSelector = TweenLiteInternals.isSelector,
			_isArray = TweenLiteInternals.isArray,
			p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
			_blankArray = [];

		TweenMax.version = "1.19.0";
		p.constructor = TweenMax;
		p.kill()._gc = false;
		TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
		TweenMax.getTweensOf = TweenLite.getTweensOf;
		TweenMax.lagSmoothing = TweenLite.lagSmoothing;
		TweenMax.ticker = TweenLite.ticker;
		TweenMax.render = TweenLite.render;

		p.invalidate = function() {
			this._yoyo = (this.vars.yoyo === true);
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._uncache(true);
			return TweenLite.prototype.invalidate.call(this);
		};
		
		p.updateTo = function(vars, resetDuration) {
			var curRatio = this.ratio,
				immediate = this.vars.immediateRender || vars.immediateRender,
				p;
			if (resetDuration && this._startTime < this._timeline._time) {
				this._startTime = this._timeline._time;
				this._uncache(false);
				if (this._gc) {
					this._enabled(true, false);
				} else {
					this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			for (p in vars) {
				this.vars[p] = vars[p];
			}
			if (this._initted || immediate) {
				if (resetDuration) {
					this._initted = false;
					if (immediate) {
						this.render(0, true, true);
					}
				} else {
					if (this._gc) {
						this._enabled(true, false);
					}
					if (this._notifyPluginsOfEnabled && this._firstPT) {
						TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
					}
					if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
						var prevTime = this._totalTime;
						this.render(0, true, false);
						this._initted = false;
						this.render(prevTime, true, false);
					} else {
						this._initted = false;
						this._init();
						if (this._time > 0 || immediate) {
							var inv = 1 / (1 - curRatio),
								pt = this._firstPT, endValue;
							while (pt) {
								endValue = pt.s + pt.c;
								pt.c *= inv;
								pt.s = endValue - pt.c;
								pt = pt._next;
							}
						}
					}
				}
			}
			return this;
		};
				
		p.render = function(time, suppressEvents, force) {
			if (!this._initted) if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
				this.invalidate();
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				prevTime = this._time,
				prevTotalTime = this._totalTime, 
				prevCycle = this._cycle,
				duration = this._duration,
				prevRawPrevTime = this._rawPrevTime,
				isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = totalDur;
				this._cycle = this._repeat;
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = 0;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				} else {
					this._time = duration;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				}
				if (!this._reversed) {
					isComplete = true;
					callback = "onComplete";
					force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}
				
			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = this._cycle = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;
				if (this._repeat !== 0) {
					cycleDuration = duration + this._repeatDelay;
					this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
					if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
						this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
					}
					this._time = this._totalTime - (this._cycle * cycleDuration);
					if (this._yoyo) if ((this._cycle & 1) !== 0) {
						this._time = duration - this._time;
					}
					if (this._time > duration) {
						this._time = duration;
					} else if (this._time < 0) {
						this._time = 0;
					}
				}

				if (this._easeType) {
					r = this._time / duration;
					type = this._easeType;
					pow = this._easePower;
					if (type === 1 || (type === 3 && r >= 0.5)) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (this._time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - (r / 2);
					}

				} else {
					this.ratio = this._ease.getRatio(this._time / duration);
				}
				
			}
				
			if (prevTime === this._time && !force && prevCycle === this._cycle) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
					this._time = prevTime;
					this._totalTime = prevTotalTime;
					this._rawPrevTime = prevRawPrevTime;
					this._cycle = prevCycle;
					TweenLiteInternals.lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd) {
					this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
				}
			}
			if (this._lazy !== false) {
				this._lazy = false;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTotalTime === 0) {
				if (this._initted === 2 && time > 0) {
					//this.invalidate();
					this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
				}
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}
			
			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}
			
			if (this._onUpdate) {
				if (time < 0) if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._totalTime !== prevTotalTime || callback) {
					this._callback("onUpdate");
				}
			}
			if (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {
				this._callback("onRepeat");
			}
			if (callback) if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};
		
//---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------
		
		TweenMax.to = function(target, duration, vars) {
			return new TweenMax(target, duration, vars);
		};
		
		TweenMax.from = function(target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return new TweenMax(target, duration, vars);
		};
		
		TweenMax.fromTo = function(target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return new TweenMax(target, duration, toVars);
		};
		
		TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			stagger = stagger || 0;
			var delay = 0,
				a = [],
				finalComplete = function() {
					if (vars.onComplete) {
						vars.onComplete.apply(vars.onCompleteScope || this, arguments);
					}
					onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
				},
				cycle = vars.cycle,
				fromCycle = (vars.startAt && vars.startAt.cycle),
				l, copy, i, p;
			if (!_isArray(targets)) {
				if (typeof(targets) === "string") {
					targets = TweenLite.selector(targets) || targets;
				}
				if (_isSelector(targets)) {
					targets = _slice(targets);
				}
			}
			targets = targets || [];
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			l = targets.length - 1;
			for (i = 0; i <= l; i++) {
				copy = {};
				for (p in vars) {
					copy[p] = vars[p];
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				if (fromCycle) {
					fromCycle = copy.startAt = {};
					for (p in vars.startAt) {
						fromCycle[p] = vars.startAt[p];
					}
					_applyCycle(copy.startAt, targets, i);
				}
				copy.delay = delay + (copy.delay || 0);
				if (i === l && onCompleteAll) {
					copy.onComplete = finalComplete;
				}
				a[i] = new TweenMax(targets[i], duration, copy);
				delay += stagger;
			}
			return a;
		};
		
		TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};
		
		TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};
				
		TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
			return new TweenMax(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, useFrames:useFrames, overwrite:0});
		};
		
		TweenMax.set = function(target, vars) {
			return new TweenMax(target, 0, vars);
		};
		
		TweenMax.isTweening = function(target) {
			return (TweenLite.getTweensOf(target, true).length > 0);
		};
		
		var _getChildrenOf = function(timeline, includeTimelines) {
				var a = [],
					cnt = 0,
					tween = timeline._first;
				while (tween) {
					if (tween instanceof TweenLite) {
						a[cnt++] = tween;
					} else {
						if (includeTimelines) {
							a[cnt++] = tween;
						}
						a = a.concat(_getChildrenOf(tween, includeTimelines));
						cnt = a.length;
					}
					tween = tween._next;
				}
				return a;
			}, 
			getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
				return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat( _getChildrenOf(Animation._rootFramesTimeline, includeTimelines) );
			};
		
		TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
			if (tweens == null) {
				tweens = true;
			}
			if (delayedCalls == null) {
				delayedCalls = true;
			}
			var a = getAllTweens((timelines != false)),
				l = a.length,
				allTrue = (tweens && delayedCalls && timelines),
				isDC, tween, i;
			for (i = 0; i < l; i++) {
				tween = a[i];
				if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
					if (complete) {
						tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
					} else {
						tween._enabled(false, false);
					}
				}
			}
		};
		
		TweenMax.killChildTweensOf = function(parent, complete) {
			if (parent == null) {
				return;
			}
			var tl = TweenLiteInternals.tweenLookup,
				a, curParent, p, i, l;
			if (typeof(parent) === "string") {
				parent = TweenLite.selector(parent) || parent;
			}
			if (_isSelector(parent)) {
				parent = _slice(parent);
			}
			if (_isArray(parent)) {
				i = parent.length;
				while (--i > -1) {
					TweenMax.killChildTweensOf(parent[i], complete);
				}
				return;
			}
			a = [];
			for (p in tl) {
				curParent = tl[p].target.parentNode;
				while (curParent) {
					if (curParent === parent) {
						a = a.concat(tl[p].tweens);
					}
					curParent = curParent.parentNode;
				}
			}
			l = a.length;
			for (i = 0; i < l; i++) {
				if (complete) {
					a[i].totalTime(a[i].totalDuration());
				}
				a[i]._enabled(false, false);
			}
		};

		var _changePause = function(pause, tweens, delayedCalls, timelines) {
			tweens = (tweens !== false);
			delayedCalls = (delayedCalls !== false);
			timelines = (timelines !== false);
			var a = getAllTweens(timelines),
				allTrue = (tweens && delayedCalls && timelines),
				i = a.length,
				isDC, tween;
			while (--i > -1) {
				tween = a[i];
				if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
					tween.paused(pause);
				}
			}
		};
		
		TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
			_changePause(true, tweens, delayedCalls, timelines);
		};
		
		TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
			_changePause(false, tweens, delayedCalls, timelines);
		};

		TweenMax.globalTimeScale = function(value) {
			var tl = Animation._rootTimeline,
				t = TweenLite.ticker.time;
			if (!arguments.length) {
				return tl._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
			tl = Animation._rootFramesTimeline;
			t = TweenLite.ticker.frame;
			tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
			tl._timeScale = Animation._rootTimeline._timeScale = value;
			return value;
		};
		
	
//---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------
		
		p.progress = function(value, suppressEvents) {
			return (!arguments.length) ? this._time / this.duration() : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
		};
		
		p.totalProgress = function(value, suppressEvents) {
			return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);
		};
		
		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.duration = function(value) {
			if (!arguments.length) {
				return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
			}
			return Animation.prototype.duration.call(this, value);
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					//instead of Infinity, we use 999999999999 so that we can accommodate reverses
					this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return (this._repeat === -1) ? this : this.duration( (value - (this._repeat * this._repeatDelay)) / (this._repeat + 1) );
		};
		
		p.repeat = function(value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};
		
		p.repeatDelay = function(value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};
		
		p.yoyo = function(value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};
		
		
		return TweenMax;
		
	}, true);








/*
 * ----------------------------------------------------------------
 * TimelineLite
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("TimelineLite", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

		var TimelineLite = function(vars) {
				SimpleTimeline.call(this, vars);
				this._labels = {};
				this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
				this.smoothChildTiming = (this.vars.smoothChildTiming === true);
				this._sortChildren = true;
				this._onUpdate = this.vars.onUpdate;
				var v = this.vars,
					val, p;
				for (p in v) {
					val = v[p];
					if (_isArray(val)) if (val.join("").indexOf("{self}") !== -1) {
						v[p] = this._swapSelfInParams(val);
					}
				}
				if (_isArray(v.tweens)) {
					this.add(v.tweens, 0, v.align, v.stagger);
				}
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_internals = TimelineLite._internals = {},
			_isSelector = TweenLiteInternals.isSelector,
			_isArray = TweenLiteInternals.isArray,
			_lazyTweens = TweenLiteInternals.lazyTweens,
			_lazyRender = TweenLiteInternals.lazyRender,
			_globals = _gsScope._gsDefine.globals,
			_copy = function(vars) {
				var copy = {}, p;
				for (p in vars) {
					copy[p] = vars[p];
				}
				return copy;
			},
			_applyCycle = function(vars, targets, i) {
				var alt = vars.cycle,
					p, val;
				for (p in alt) {
					val = alt[p];
					vars[p] = (typeof(val) === "function") ? val.call(targets[i], i) : val[i % val.length];
				}
				delete vars.cycle;
			},
			_pauseCallback = _internals.pauseCallback = function() {},
			_slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++]));
				return b;
			},
			p = TimelineLite.prototype = new SimpleTimeline();

		TimelineLite.version = "1.19.0";
		p.constructor = TimelineLite;
		p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

		/* might use later...
		//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
		function localToGlobal(time, animation) {
			while (animation) {
				time = (time / animation._timeScale) + animation._startTime;
				animation = animation.timeline;
			}
			return time;
		}

		//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
		function globalToLocal(time, animation) {
			var scale = 1;
			time -= localToGlobal(0, animation);
			while (animation) {
				scale *= animation._timeScale;
				animation = animation.timeline;
			}
			return time * scale;
		}
		*/

		p.to = function(target, duration, vars, position) {
			var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
			return duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);
		};

		p.from = function(target, duration, vars, position) {
			return this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
		};

		p.fromTo = function(target, duration, fromVars, toVars, position) {
			var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
			return duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
		};

		p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			var tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),
				cycle = vars.cycle,
				copy, i;
			if (typeof(targets) === "string") {
				targets = TweenLite.selector(targets) || targets;
			}
			targets = targets || [];
			if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
				targets = _slice(targets);
			}
			stagger = stagger || 0;
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			for (i = 0; i < targets.length; i++) {
				copy = _copy(vars);
				if (copy.startAt) {
					copy.startAt = _copy(copy.startAt);
					if (copy.startAt.cycle) {
						_applyCycle(copy.startAt, targets, i);
					}
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				tl.to(targets[i], duration, copy, i * stagger);
			}
			return this.add(tl, position);
		};

		p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.immediateRender = (vars.immediateRender != false);
			vars.runBackwards = true;
			return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.call = function(callback, params, scope, position) {
			return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.set = function(target, vars, position) {
			position = this._parseTimeOrLabel(position, 0, true);
			if (vars.immediateRender == null) {
				vars.immediateRender = (position === this._time && !this._paused);
			}
			return this.add( new TweenLite(target, 0, vars), position);
		};

		TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
			vars = vars || {};
			if (vars.smoothChildTiming == null) {
				vars.smoothChildTiming = true;
			}
			var tl = new TimelineLite(vars),
				root = tl._timeline,
				tween, next;
			if (ignoreDelayedCalls == null) {
				ignoreDelayedCalls = true;
			}
			root._remove(tl, true);
			tl._startTime = 0;
			tl._rawPrevTime = tl._time = tl._totalTime = root._time;
			tween = root._first;
			while (tween) {
				next = tween._next;
				if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
					tl.add(tween, tween._startTime - tween._delay);
				}
				tween = next;
			}
			root.add(tl, 0);
			return tl;
		};

		p.add = function(value, position, align, stagger) {
			var curTime, l, i, child, tl, beforeRawTime;
			if (typeof(position) !== "number") {
				position = this._parseTimeOrLabel(position, 0, true, value);
			}
			if (!(value instanceof Animation)) {
				if ((value instanceof Array) || (value && value.push && _isArray(value))) {
					align = align || "normal";
					stagger = stagger || 0;
					curTime = position;
					l = value.length;
					for (i = 0; i < l; i++) {
						if (_isArray(child = value[i])) {
							child = new TimelineLite({tweens:child});
						}
						this.add(child, curTime);
						if (typeof(child) !== "string" && typeof(child) !== "function") {
							if (align === "sequence") {
								curTime = child._startTime + (child.totalDuration() / child._timeScale);
							} else if (align === "start") {
								child._startTime -= child.delay();
							}
						}
						curTime += stagger;
					}
					return this._uncache(true);
				} else if (typeof(value) === "string") {
					return this.addLabel(value, position);
				} else if (typeof(value) === "function") {
					value = TweenLite.delayedCall(0, value);
				} else {
					throw("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
				}
			}

			SimpleTimeline.prototype.add.call(this, value, position);

			//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
			if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {
				//in case any of the ancestors had completed but should now be enabled...
				tl = this;
				beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
				while (tl._timeline) {
					if (beforeRawTime && tl._timeline.smoothChildTiming) {
						tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
					} else if (tl._gc) {
						tl._enabled(true, false);
					}
					tl = tl._timeline;
				}
			}

			return this;
		};

		p.remove = function(value) {
			if (value instanceof Animation) {
				this._remove(value, false);
				var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
				value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
				return this;
			} else if (value instanceof Array || (value && value.push && _isArray(value))) {
				var i = value.length;
				while (--i > -1) {
					this.remove(value[i]);
				}
				return this;
			} else if (typeof(value) === "string") {
				return this.removeLabel(value);
			}
			return this.kill(null, value);
		};

		p._remove = function(tween, skipDisable) {
			SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
			var last = this._last;
			if (!last) {
				this._time = this._totalTime = this._duration = this._totalDuration = 0;
			} else if (this._time > last._startTime + last._totalDuration / last._timeScale) {
				this._time = this.duration();
				this._totalTime = this._totalDuration;
			}
			return this;
		};

		p.append = function(value, offsetOrLabel) {
			return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
		};

		p.insert = p.insertMultiple = function(value, position, align, stagger) {
			return this.add(value, position || 0, align, stagger);
		};

		p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
			return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
		};

		p.addLabel = function(label, position) {
			this._labels[label] = this._parseTimeOrLabel(position);
			return this;
		};

		p.addPause = function(position, callback, params, scope) {
			var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
			t.vars.onComplete = t.vars.onReverseComplete = callback;
			t.data = "isPause";
			this._hasPause = true;
			return this.add(t, position);
		};

		p.removeLabel = function(label) {
			delete this._labels[label];
			return this;
		};

		p.getLabelTime = function(label) {
			return (this._labels[label] != null) ? this._labels[label] : -1;
		};

		p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
			var i;
			//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
			if (ignore instanceof Animation && ignore.timeline === this) {
				this.remove(ignore);
			} else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
				i = ignore.length;
				while (--i > -1) {
					if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
						this.remove(ignore[i]);
					}
				}
			}
			if (typeof(offsetOrLabel) === "string") {
				return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - this.duration() : 0, appendIfAbsent);
			}
			offsetOrLabel = offsetOrLabel || 0;
			if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
				i = timeOrLabel.indexOf("=");
				if (i === -1) {
					if (this._labels[timeOrLabel] == null) {
						return appendIfAbsent ? (this._labels[timeOrLabel] = this.duration() + offsetOrLabel) : offsetOrLabel;
					}
					return this._labels[timeOrLabel] + offsetOrLabel;
				}
				offsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + "1", 10) * Number(timeOrLabel.substr(i+1));
				timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : this.duration();
			} else if (timeOrLabel == null) {
				timeOrLabel = this.duration();
			}
			return Number(timeOrLabel) + offsetOrLabel;
		};

		p.seek = function(position, suppressEvents) {
			return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
		};

		p.stop = function() {
			return this.paused(true);
		};

		p.gotoAndPlay = function(position, suppressEvents) {
			return this.play(position, suppressEvents);
		};

		p.gotoAndStop = function(position, suppressEvents) {
			return this.pause(position, suppressEvents);
		};

		p.render = function(time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				prevTime = this._time,
				prevStart = this._startTime,
				prevTimeScale = this._timeScale,
				prevPaused = this._paused,
				tween, isComplete, next, callback, internalForce, pauseTween, curTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = this._time = totalDur;
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {
						internalForce = true;
						if (this._rawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}

			} else {

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					if (time >= prevTime) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
					}
				}

				this._totalTime = this._time = this._rawPrevTime = time;
			}
			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {
				this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}

			if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p._hasPausedChild = function() {
			var tween = this._first;
			while (tween) {
				if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
					return true;
				}
				tween = tween._next;
			}
			return false;
		};

		p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || -9999999999;
			var a = [],
				tween = this._first,
				cnt = 0;
			while (tween) {
				if (tween._startTime < ignoreBeforeTime) {
					//do nothing
				} else if (tween instanceof TweenLite) {
					if (tweens !== false) {
						a[cnt++] = tween;
					}
				} else {
					if (timelines !== false) {
						a[cnt++] = tween;
					}
					if (nested !== false) {
						a = a.concat(tween.getChildren(true, tweens, timelines));
						cnt = a.length;
					}
				}
				tween = tween._next;
			}
			return a;
		};

		p.getTweensOf = function(target, nested) {
			var disabled = this._gc,
				a = [],
				cnt = 0,
				tweens, i;
			if (disabled) {
				this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
			}
			tweens = TweenLite.getTweensOf(target);
			i = tweens.length;
			while (--i > -1) {
				if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
					a[cnt++] = tweens[i];
				}
			}
			if (disabled) {
				this._enabled(false, true);
			}
			return a;
		};

		p.recent = function() {
			return this._recent;
		};

		p._contains = function(tween) {
			var tl = tween.timeline;
			while (tl) {
				if (tl === this) {
					return true;
				}
				tl = tl.timeline;
			}
			return false;
		};

		p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || 0;
			var tween = this._first,
				labels = this._labels,
				p;
			while (tween) {
				if (tween._startTime >= ignoreBeforeTime) {
					tween._startTime += amount;
				}
				tween = tween._next;
			}
			if (adjustLabels) {
				for (p in labels) {
					if (labels[p] >= ignoreBeforeTime) {
						labels[p] += amount;
					}
				}
			}
			return this._uncache(true);
		};

		p._kill = function(vars, target) {
			if (!vars && !target) {
				return this._enabled(false, false);
			}
			var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
				i = tweens.length,
				changed = false;
			while (--i > -1) {
				if (tweens[i]._kill(vars, target)) {
					changed = true;
				}
			}
			return changed;
		};

		p.clear = function(labels) {
			var tweens = this.getChildren(false, true, true),
				i = tweens.length;
			this._time = this._totalTime = 0;
			while (--i > -1) {
				tweens[i]._enabled(false, false);
			}
			if (labels !== false) {
				this._labels = {};
			}
			return this._uncache(true);
		};

		p.invalidate = function() {
			var tween = this._first;
			while (tween) {
				tween.invalidate();
				tween = tween._next;
			}
			return Animation.prototype.invalidate.call(this);;
		};

		p._enabled = function(enabled, ignoreTimeline) {
			if (enabled === this._gc) {
				var tween = this._first;
				while (tween) {
					tween._enabled(enabled, true);
					tween = tween._next;
				}
			}
			return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
		};

		p.totalTime = function(time, suppressEvents, uncapped) {
			this._forcingPlayhead = true;
			var val = Animation.prototype.totalTime.apply(this, arguments);
			this._forcingPlayhead = false;
			return val;
		};

		p.duration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					this.totalDuration(); //just triggers recalculation
				}
				return this._duration;
			}
			if (this.duration() !== 0 && value !== 0) {
				this.timeScale(this._duration / value);
			}
			return this;
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					var max = 0,
						tween = this._last,
						prevStart = 999999999999,
						prev, end;
					while (tween) {
						prev = tween._prev; //record it here in case the tween changes position in the sequence...
						if (tween._dirty) {
							tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
						}
						if (tween._startTime > prevStart && this._sortChildren && !tween._paused) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
							this.add(tween, tween._startTime - tween._delay);
						} else {
							prevStart = tween._startTime;
						}
						if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
							max -= tween._startTime;
							if (this._timeline.smoothChildTiming) {
								this._startTime += tween._startTime / this._timeScale;
							}
							this.shiftChildren(-tween._startTime, false, -9999999999);
							prevStart = 0;
						}
						end = tween._startTime + (tween._totalDuration / tween._timeScale);
						if (end > max) {
							max = end;
						}
						tween = prev;
					}
					this._duration = this._totalDuration = max;
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
		};

		p.paused = function(value) {
			if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
				var tween = this._first,
					time = this._time;
				while (tween) {
					if (tween._startTime === time && tween.data === "isPause") {
						tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
					}
					tween = tween._next;
				}
			}
			return Animation.prototype.paused.apply(this, arguments);
		};

		p.usesFrames = function() {
			var tl = this._timeline;
			while (tl._timeline) {
				tl = tl._timeline;
			}
			return (tl === Animation._rootFramesTimeline);
		};

		p.rawTime = function() {
			return this._paused ? this._totalTime : (this._timeline.rawTime() - this._startTime) * this._timeScale;
		};

		return TimelineLite;

	}, true);








	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * TimelineMax
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("TimelineMax", ["TimelineLite","TweenLite","easing.Ease"], function(TimelineLite, TweenLite, Ease) {

		var TimelineMax = function(vars) {
				TimelineLite.call(this, vars);
				this._repeat = this.vars.repeat || 0;
				this._repeatDelay = this.vars.repeatDelay || 0;
				this._cycle = 0;
				this._yoyo = (this.vars.yoyo === true);
				this._dirty = true;
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_lazyTweens = TweenLiteInternals.lazyTweens,
			_lazyRender = TweenLiteInternals.lazyRender,
			_globals = _gsScope._gsDefine.globals,
			_easeNone = new Ease(null, null, 1, 0),
			p = TimelineMax.prototype = new TimelineLite();

		p.constructor = TimelineMax;
		p.kill()._gc = false;
		TimelineMax.version = "1.19.0";

		p.invalidate = function() {
			this._yoyo = (this.vars.yoyo === true);
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._uncache(true);
			return TimelineLite.prototype.invalidate.call(this);
		};

		p.addCallback = function(callback, position, params, scope) {
			return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.removeCallback = function(callback, position) {
			if (callback) {
				if (position == null) {
					this._kill(null, callback);
				} else {
					var a = this.getTweensOf(callback, false),
						i = a.length,
						time = this._parseTimeOrLabel(position);
					while (--i > -1) {
						if (a[i]._startTime === time) {
							a[i]._enabled(false, false);
						}
					}
				}
			}
			return this;
		};

		p.removePause = function(position) {
			return this.removeCallback(TimelineLite._internals.pauseCallback, position);
		};

		p.tweenTo = function(position, vars) {
			vars = vars || {};
			var copy = {ease:_easeNone, useFrames:this.usesFrames(), immediateRender:false},
				Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
				duration, p, t;
			for (p in vars) {
				copy[p] = vars[p];
			}
			copy.time = this._parseTimeOrLabel(position);
			duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
			t = new Engine(this, duration, copy);
			copy.onStart = function() {
				t.target.paused(true);
				if (t.vars.time !== t.target.time() && duration === t.duration()) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
					t.duration( Math.abs( t.vars.time - t.target.time()) / t.target._timeScale );
				}
				if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
					t._callback("onStart");
				}
			};
			return t;
		};

		p.tweenFromTo = function(fromPosition, toPosition, vars) {
			vars = vars || {};
			fromPosition = this._parseTimeOrLabel(fromPosition);
			vars.startAt = {onComplete:this.seek, onCompleteParams:[fromPosition], callbackScope:this};
			vars.immediateRender = (vars.immediateRender !== false);
			var t = this.tweenTo(toPosition, vars);
			return t.duration((Math.abs( t.vars.time - fromPosition) / this._timeScale) || 0.001);
		};

		p.render = function(time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				dur = this._duration,
				prevTime = this._time,
				prevTotalTime = this._totalTime,
				prevStart = this._startTime,
				prevTimeScale = this._timeScale,
				prevRawPrevTime = this._rawPrevTime,
				prevPaused = this._paused,
				prevCycle = this._cycle,
				tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				if (!this._locked) {
					this._totalTime = totalDur;
					this._cycle = this._repeat;
				}
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {
						internalForce = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = time = 0;
				} else {
					this._time = dur;
					time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
				}

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				if (!this._locked) {
					this._totalTime = this._cycle = 0;
				}
				this._time = 0;
				if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) {
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}

			} else {
				if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
					internalForce = true;
				}
				this._time = this._rawPrevTime = time;
				if (!this._locked) {
					this._totalTime = time;
					if (this._repeat !== 0) {
						cycleDuration = dur + this._repeatDelay;
						this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
						if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
							this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
						}
						this._time = this._totalTime - (this._cycle * cycleDuration);
						if (this._yoyo) if ((this._cycle & 1) !== 0) {
							this._time = dur - this._time;
						}
						if (this._time > dur) {
							this._time = dur;
							time = dur + 0.0001; //to avoid occasional floating point rounding error
						} else if (this._time < 0) {
							this._time = time = 0;
						} else {
							time = this._time;
						}
					}
				}

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					time = this._time;
					if (time >= prevTime) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
					}
				}

			}

			if (this._cycle !== prevCycle) if (!this._locked) {
				/*
				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
				would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
				ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
				*/
				var backwards = (this._yoyo && (prevCycle & 1) !== 0),
					wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
					recTotalTime = this._totalTime,
					recCycle = this._cycle,
					recRawPrevTime = this._rawPrevTime,
					recTime = this._time;

				this._totalTime = prevCycle * dur;
				if (this._cycle < prevCycle) {
					backwards = !backwards;
				} else {
					this._totalTime += dur;
				}
				this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

				this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
				this._cycle = prevCycle;
				this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
				prevTime = (backwards) ? 0 : dur;
				this.render(prevTime, suppressEvents, (dur === 0));
				if (!suppressEvents) if (!this._gc) {
					if (this.vars.onRepeat) {
						this._callback("onRepeat");
					}
				}
				if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
					return;
				}
				if (wrap) {
					prevTime = (backwards) ? dur + 0.0001 : -0.0001;
					this.render(prevTime, true, false);
				}
				this._locked = false;
				if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
					return;
				}
				this._time = recTime;
				this._totalTime = recTotalTime;
				this._cycle = recCycle;
				this._rawPrevTime = recRawPrevTime;
			}

			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
				this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}
			if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p.getActive = function(nested, tweens, timelines) {
			if (nested == null) {
				nested = true;
			}
			if (tweens == null) {
				tweens = true;
			}
			if (timelines == null) {
				timelines = false;
			}
			var a = [],
				all = this.getChildren(nested, tweens, timelines),
				cnt = 0,
				l = all.length,
				i, tween;
			for (i = 0; i < l; i++) {
				tween = all[i];
				if (tween.isActive()) {
					a[cnt++] = tween;
				}
			}
			return a;
		};


		p.getLabelAfter = function(time) {
			if (!time) if (time !== 0) { //faster than isNan()
				time = this._time;
			}
			var labels = this.getLabelsArray(),
				l = labels.length,
				i;
			for (i = 0; i < l; i++) {
				if (labels[i].time > time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelBefore = function(time) {
			if (time == null) {
				time = this._time;
			}
			var labels = this.getLabelsArray(),
				i = labels.length;
			while (--i > -1) {
				if (labels[i].time < time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelsArray = function() {
			var a = [],
				cnt = 0,
				p;
			for (p in this._labels) {
				a[cnt++] = {time:this._labels[p], name:p};
			}
			a.sort(function(a,b) {
				return a.time - b.time;
			});
			return a;
		};


//---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

		p.progress = function(value, suppressEvents) {
			return (!arguments.length) ? this._time / this.duration() : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
		};

		p.totalProgress = function(value, suppressEvents) {
			return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					TimelineLite.prototype.totalDuration.call(this); //just forces refresh
					//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
					this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
				}
				return this._totalDuration;
			}
			return (this._repeat === -1 || !value) ? this : this.timeScale( this.totalDuration() / value );
		};

		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.repeat = function(value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};

		p.repeatDelay = function(value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};

		p.yoyo = function(value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};

		p.currentLabel = function(value) {
			if (!arguments.length) {
				return this.getLabelBefore(this._time + 0.00000001);
			}
			return this.seek(value, true);
		};

		return TimelineMax;

	}, true);
	




	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * BezierPlugin
 * ----------------------------------------------------------------
 */
	(function() {

		var _RAD2DEG = 180 / Math.PI,
			_r1 = [],
			_r2 = [],
			_r3 = [],
			_corProps = {},
			_globals = _gsScope._gsDefine.globals,
			Segment = function(a, b, c, d) {
				if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
					c = d - (d - b) / 1000000;
				}
				if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
					b = a + (c - a) / 1000000;
				}
				this.a = a;
				this.b = b;
				this.c = c;
				this.d = d;
				this.da = d - a;
				this.ca = c - a;
				this.ba = b - a;
			},
			_correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
			cubicToQuadratic = function(a, b, c, d) {
				var q1 = {a:a},
					q2 = {},
					q3 = {},
					q4 = {c:d},
					mab = (a + b) / 2,
					mbc = (b + c) / 2,
					mcd = (c + d) / 2,
					mabc = (mab + mbc) / 2,
					mbcd = (mbc + mcd) / 2,
					m8 = (mbcd - mabc) / 8;
				q1.b = mab + (a - mab) / 4;
				q2.b = mabc + m8;
				q1.c = q2.a = (q1.b + q2.b) / 2;
				q2.c = q3.a = (mabc + mbcd) / 2;
				q3.b = mbcd - m8;
				q4.b = mcd + (d - mcd) / 4;
				q3.c = q4.a = (q3.b + q4.b) / 2;
				return [q1, q2, q3, q4];
			},
			_calculateControlPoints = function(a, curviness, quad, basic, correlate) {
				var l = a.length - 1,
					ii = 0,
					cp1 = a[0].a,
					i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
				for (i = 0; i < l; i++) {
					seg = a[ii];
					p1 = seg.a;
					p2 = seg.d;
					p3 = a[ii+1].d;

					if (correlate) {
						r1 = _r1[i];
						r2 = _r2[i];
						tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
						m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
						m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
						mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
					} else {
						m1 = p2 - (p2 - p1) * curviness * 0.5;
						m2 = p2 + (p3 - p2) * curviness * 0.5;
						mm = p2 - (m1 + m2) / 2;
					}
					m1 += mm;
					m2 += mm;

					seg.c = cp2 = m1;
					if (i !== 0) {
						seg.b = cp1;
					} else {
						seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
					}

					seg.da = p2 - p1;
					seg.ca = cp2 - p1;
					seg.ba = cp1 - p1;

					if (quad) {
						qb = cubicToQuadratic(p1, cp1, cp2, p2);
						a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
						ii += 4;
					} else {
						ii++;
					}

					cp1 = m2;
				}
				seg = a[ii];
				seg.b = cp1;
				seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
				seg.da = seg.d - seg.a;
				seg.ca = seg.c - seg.a;
				seg.ba = cp1 - seg.a;
				if (quad) {
					qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
					a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
				}
			},
			_parseAnchors = function(values, p, correlate, prepend) {
				var a = [],
					l, i, p1, p2, p3, tmp;
				if (prepend) {
					values = [prepend].concat(values);
					i = values.length;
					while (--i > -1) {
						if (typeof( (tmp = values[i][p]) ) === "string") if (tmp.charAt(1) === "=") {
							values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
						}
					}
				}
				l = values.length - 2;
				if (l < 0) {
					a[0] = new Segment(values[0][p], 0, 0, values[(l < -1) ? 0 : 1][p]);
					return a;
				}
				for (i = 0; i < l; i++) {
					p1 = values[i][p];
					p2 = values[i+1][p];
					a[i] = new Segment(p1, 0, 0, p2);
					if (correlate) {
						p3 = values[i+2][p];
						_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
						_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
					}
				}
				a[i] = new Segment(values[i][p], 0, 0, values[i+1][p]);
				return a;
			},
			bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
				var obj = {},
					props = [],
					first = prepend || values[0],
					i, p, a, j, r, l, seamless, last;
				correlate = (typeof(correlate) === "string") ? ","+correlate+"," : _correlate;
				if (curviness == null) {
					curviness = 1;
				}
				for (p in values[0]) {
					props.push(p);
				}
				//check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
				if (values.length > 1) {
					last = values[values.length - 1];
					seamless = true;
					i = props.length;
					while (--i > -1) {
						p = props[i];
						if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
							seamless = false;
							break;
						}
					}
					if (seamless) {
						values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
						if (prepend) {
							values.unshift(prepend);
						}
						values.push(values[1]);
						prepend = values[values.length - 3];
					}
				}
				_r1.length = _r2.length = _r3.length = 0;
				i = props.length;
				while (--i > -1) {
					p = props[i];
					_corProps[p] = (correlate.indexOf(","+p+",") !== -1);
					obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
				}
				i = _r1.length;
				while (--i > -1) {
					_r1[i] = Math.sqrt(_r1[i]);
					_r2[i] = Math.sqrt(_r2[i]);
				}
				if (!basic) {
					i = props.length;
					while (--i > -1) {
						if (_corProps[p]) {
							a = obj[props[i]];
							l = a.length - 1;
							for (j = 0; j < l; j++) {
								r = (a[j+1].da / _r2[j] + a[j].da / _r1[j]) || 0;
								_r3[j] = (_r3[j] || 0) + r * r;
							}
						}
					}
					i = _r3.length;
					while (--i > -1) {
						_r3[i] = Math.sqrt(_r3[i]);
					}
				}
				i = props.length;
				j = quadratic ? 4 : 1;
				while (--i > -1) {
					p = props[i];
					a = obj[p];
					_calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
					if (seamless) {
						a.splice(0, j);
						a.splice(a.length - j, j);
					}
				}
				return obj;
			},
			_parseBezierData = function(values, type, prepend) {
				type = type || "soft";
				var obj = {},
					inc = (type === "cubic") ? 3 : 2,
					soft = (type === "soft"),
					props = [],
					a, b, c, d, cur, i, j, l, p, cnt, tmp;
				if (soft && prepend) {
					values = [prepend].concat(values);
				}
				if (values == null || values.length < inc + 1) { throw "invalid Bezier data"; }
				for (p in values[0]) {
					props.push(p);
				}
				i = props.length;
				while (--i > -1) {
					p = props[i];
					obj[p] = cur = [];
					cnt = 0;
					l = values.length;
					for (j = 0; j < l; j++) {
						a = (prepend == null) ? values[j][p] : (typeof( (tmp = values[j][p]) ) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
						if (soft) if (j > 1) if (j < l - 1) {
							cur[cnt++] = (a + cur[cnt-2]) / 2;
						}
						cur[cnt++] = a;
					}
					l = cnt - inc + 1;
					cnt = 0;
					for (j = 0; j < l; j += inc) {
						a = cur[j];
						b = cur[j+1];
						c = cur[j+2];
						d = (inc === 2) ? 0 : cur[j+3];
						cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
					}
					cur.length = cnt;
				}
				return obj;
			},
			_addCubicLengths = function(a, steps, resolution) {
				var inc = 1 / resolution,
					j = a.length,
					d, d1, s, da, ca, ba, p, i, inv, bez, index;
				while (--j > -1) {
					bez = a[j];
					s = bez.a;
					da = bez.d - s;
					ca = bez.c - s;
					ba = bez.b - s;
					d = d1 = 0;
					for (i = 1; i <= resolution; i++) {
						p = inc * i;
						inv = 1 - p;
						d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
						index = j * resolution + i - 1;
						steps[index] = (steps[index] || 0) + d * d;
					}
				}
			},
			_parseLengthData = function(obj, resolution) {
				resolution = resolution >> 0 || 6;
				var a = [],
					lengths = [],
					d = 0,
					total = 0,
					threshold = resolution - 1,
					segments = [],
					curLS = [], //current length segments array
					p, i, l, index;
				for (p in obj) {
					_addCubicLengths(obj[p], a, resolution);
				}
				l = a.length;
				for (i = 0; i < l; i++) {
					d += Math.sqrt(a[i]);
					index = i % resolution;
					curLS[index] = d;
					if (index === threshold) {
						total += d;
						index = (i / resolution) >> 0;
						segments[index] = curLS;
						lengths[index] = total;
						d = 0;
						curLS = [];
					}
				}
				return {length:total, lengths:lengths, segments:segments};
			},



			BezierPlugin = _gsScope._gsDefine.plugin({
					propName: "bezier",
					priority: -1,
					version: "1.3.7",
					API: 2,
					global:true,

					//gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
					init: function(target, vars, tween) {
						this._target = target;
						if (vars instanceof Array) {
							vars = {values:vars};
						}
						this._func = {};
						this._mod = {};
						this._props = [];
						this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
						var values = vars.values || [],
							first = {},
							second = values[0],
							autoRotate = vars.autoRotate || tween.vars.orientToBezier,
							p, isFunc, i, j, prepend;

						this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [["x","y","rotation",((autoRotate === true) ? 0 : Number(autoRotate) || 0)]] : null;
						for (p in second) {
							this._props.push(p);
						}

						i = this._props.length;
						while (--i > -1) {
							p = this._props[i];

							this._overwriteProps.push(p);
							isFunc = this._func[p] = (typeof(target[p]) === "function");
							first[p] = (!isFunc) ? parseFloat(target[p]) : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]();
							if (!prepend) if (first[p] !== values[0][p]) {
								prepend = first;
							}
						}
						this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
						this._segCount = this._beziers[p].length;

						if (this._timeRes) {
							var ld = _parseLengthData(this._beziers, this._timeRes);
							this._length = ld.length;
							this._lengths = ld.lengths;
							this._segments = ld.segments;
							this._l1 = this._li = this._s1 = this._si = 0;
							this._l2 = this._lengths[0];
							this._curSeg = this._segments[0];
							this._s2 = this._curSeg[0];
							this._prec = 1 / this._curSeg.length;
						}

						if ((autoRotate = this._autoRotate)) {
							this._initialRotations = [];
							if (!(autoRotate[0] instanceof Array)) {
								this._autoRotate = autoRotate = [autoRotate];
							}
							i = autoRotate.length;
							while (--i > -1) {
								for (j = 0; j < 3; j++) {
									p = autoRotate[i][j];
									this._func[p] = (typeof(target[p]) === "function") ? target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ] : false;
								}
								p = autoRotate[i][2];
								this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
								this._overwriteProps.push(p);
							}
						}
						this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
						return true;
					},

					//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
					set: function(v) {
						var segments = this._segCount,
							func = this._func,
							target = this._target,
							notStart = (v !== this._startRatio),
							curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
						if (!this._timeRes) {
							curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
							t = (v - (curIndex * (1 / segments))) * segments;
						} else {
							lengths = this._lengths;
							curSeg = this._curSeg;
							v *= this._length;
							i = this._li;
							//find the appropriate segment (if the currently cached one isn't correct)
							if (v > this._l2 && i < segments - 1) {
								l = segments - 1;
								while (i < l && (this._l2 = lengths[++i]) <= v) {	}
								this._l1 = lengths[i-1];
								this._li = i;
								this._curSeg = curSeg = this._segments[i];
								this._s2 = curSeg[(this._s1 = this._si = 0)];
							} else if (v < this._l1 && i > 0) {
								while (i > 0 && (this._l1 = lengths[--i]) >= v) { }
								if (i === 0 && v < this._l1) {
									this._l1 = 0;
								} else {
									i++;
								}
								this._l2 = lengths[i];
								this._li = i;
								this._curSeg = curSeg = this._segments[i];
								this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
								this._s2 = curSeg[this._si];
							}
							curIndex = i;
							//now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
							v -= this._l1;
							i = this._si;
							if (v > this._s2 && i < curSeg.length - 1) {
								l = curSeg.length - 1;
								while (i < l && (this._s2 = curSeg[++i]) <= v) {	}
								this._s1 = curSeg[i-1];
								this._si = i;
							} else if (v < this._s1 && i > 0) {
								while (i > 0 && (this._s1 = curSeg[--i]) >= v) {	}
								if (i === 0 && v < this._s1) {
									this._s1 = 0;
								} else {
									i++;
								}
								this._s2 = curSeg[i];
								this._si = i;
							}
							t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
						}
						inv = 1 - t;

						i = this._props.length;
						while (--i > -1) {
							p = this._props[i];
							b = this._beziers[p][curIndex];
							val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
							if (this._mod[p]) {
								val = this._mod[p](val, target);
							}
							if (func[p]) {
								target[p](val);
							} else {
								target[p] = val;
							}
						}

						if (this._autoRotate) {
							var ar = this._autoRotate,
								b2, x1, y1, x2, y2, add, conv;
							i = ar.length;
							while (--i > -1) {
								p = ar[i][2];
								add = ar[i][3] || 0;
								conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
								b = this._beziers[ar[i][0]];
								b2 = this._beziers[ar[i][1]];

								if (b && b2) { //in case one of the properties got overwritten.
									b = b[curIndex];
									b2 = b2[curIndex];

									x1 = b.a + (b.b - b.a) * t;
									x2 = b.b + (b.c - b.b) * t;
									x1 += (x2 - x1) * t;
									x2 += ((b.c + (b.d - b.c) * t) - x2) * t;

									y1 = b2.a + (b2.b - b2.a) * t;
									y2 = b2.b + (b2.c - b2.b) * t;
									y1 += (y2 - y1) * t;
									y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;

									val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

									if (this._mod[p]) {
										val = this._mod[p](val, target); //for modProps
									}

									if (func[p]) {
										target[p](val);
									} else {
										target[p] = val;
									}
								}
							}
						}
					}
			}),
			p = BezierPlugin.prototype;


		BezierPlugin.bezierThrough = bezierThrough;
		BezierPlugin.cubicToQuadratic = cubicToQuadratic;
		BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
		BezierPlugin.quadraticToCubic = function(a, b, c) {
			return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
		};

		BezierPlugin._cssRegister = function() {
			var CSSPlugin = _globals.CSSPlugin;
			if (!CSSPlugin) {
				return;
			}
			var _internals = CSSPlugin._internals,
				_parseToProxy = _internals._parseToProxy,
				_setPluginRatio = _internals._setPluginRatio,
				CSSPropTween = _internals.CSSPropTween;
			_internals._registerComplexSpecialProp("bezier", {parser:function(t, e, prop, cssp, pt, plugin) {
				if (e instanceof Array) {
					e = {values:e};
				}
				plugin = new BezierPlugin();
				var values = e.values,
					l = values.length - 1,
					pluginValues = [],
					v = {},
					i, p, data;
				if (l < 0) {
					return pt;
				}
				for (i = 0; i <= l; i++) {
					data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
					pluginValues[i] = data.end;
				}
				for (p in e) {
					v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
				}
				v.values = pluginValues;
				pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
				pt.data = data;
				pt.plugin = plugin;
				pt.setRatio = _setPluginRatio;
				if (v.autoRotate === 0) {
					v.autoRotate = true;
				}
				if (v.autoRotate && !(v.autoRotate instanceof Array)) {
					i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
					v.autoRotate = (data.end.left != null) ? [["left","top","rotation",i,false]] : (data.end.x != null) ? [["x","y","rotation",i,false]] : false;
				}
				if (v.autoRotate) {
					if (!cssp._transform) {
						cssp._enableTransforms(false);
					}
					data.autoRotate = cssp._target._gsTransform;
					data.proxy.rotation = data.autoRotate.rotation || 0;
					cssp._overwriteProps.push("rotation");
				}
				plugin._onInitTween(data.proxy, v, cssp._tween);
				return pt;
			}});
		};

		p._mod = function(lookup) {
			var op = this._overwriteProps,
				i = op.length,
				val;
			while (--i > -1) {
				val = lookup[op[i]];
				if (val && typeof(val) === "function") {
					this._mod[op[i]] = val;
				}
			}
		};

		p._kill = function(lookup) {
			var a = this._props,
				p, i;
			for (p in this._beziers) {
				if (p in lookup) {
					delete this._beziers[p];
					delete this._func[p];
					i = a.length;
					while (--i > -1) {
						if (a[i] === p) {
							a.splice(i, 1);
						}
					}
				}
			}
			a = this._autoRotate;
			if (a) {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i][2]]) {
						a.splice(i, 1);
					}
				}
			}
			return this._super._kill.call(this, lookup);
		};

	}());






	
	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * CSSPlugin
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin","TweenLite"], function(TweenPlugin, TweenLite) {

		/** @constructor **/
		var CSSPlugin = function() {
				TweenPlugin.call(this, "css");
				this._overwriteProps.length = 0;
				this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
			},
			_globals = _gsScope._gsDefine.globals,
			_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
			_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
			_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
			_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
			_specialProps = {},
			p = CSSPlugin.prototype = new TweenPlugin("css");

		p.constructor = CSSPlugin;
		CSSPlugin.version = "1.19.0";
		CSSPlugin.API = 2;
		CSSPlugin.defaultTransformPerspective = 0;
		CSSPlugin.defaultSkewType = "compensated";
		CSSPlugin.defaultSmoothOrigin = true;
		p = "px"; //we'll reuse the "p" variable to keep file size down
		CSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:""};


		var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
			_relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
			_valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
			_NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
			_suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
			_opacityExp = /opacity *= *([^)]*)/i,
			_opacityValExp = /opacity:([^;]*)/i,
			_alphaFilterExp = /alpha\(opacity *=.+?\)/i,
			_rgbhslExp = /^(rgb|hsl)/,
			_capsExp = /([A-Z])/g,
			_camelExp = /-([a-z])/gi,
			_urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
			_camelFunc = function(s, g) { return g.toUpperCase(); },
			_horizExp = /(?:Left|Right|Width)/i,
			_ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
			_ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
			_commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
			_complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
			_DEG2RAD = Math.PI / 180,
			_RAD2DEG = 180 / Math.PI,
			_forcePT = {},
			_doc = document,
			_createElement = function(type) {
				return _doc.createElementNS ? _doc.createElementNS("http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
			},
			_tempDiv = _createElement("div"),
			_tempImg = _createElement("img"),
			_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins
			_agent = navigator.userAgent,
			_autoRound,
			_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

			_isSafari,
			_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
			_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
			_ieVers,
			_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
				var i = _agent.indexOf("Android"),
					a = _createElement("a");
				_isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || Number(_agent.substr(i+8, 1)) > 3));
				_isSafariLT6 = (_isSafari && (Number(_agent.substr(_agent.indexOf("Version/")+8, 1)) < 6));
				_isFirefox = (_agent.indexOf("Firefox") !== -1);
				if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
					_ieVers = parseFloat( RegExp.$1 );
				}
				if (!a) {
					return false;
				}
				a.style.cssText = "top:1px;opacity:.55;";
				return /^0.55/.test(a.style.opacity);
			}()),
			_getIEOpacity = function(v) {
				return (_opacityExp.test( ((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);
			},
			_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.
				if (window.console) {
					console.log(s);
				}
			},
			_target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
			_index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

			_prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
			_prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

			// @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
			_checkPropPrefix = function(p, e) {
				e = e || _tempDiv;
				var s = e.style,
					a, i;
				if (s[p] !== undefined) {
					return p;
				}
				p = p.charAt(0).toUpperCase() + p.substr(1);
				a = ["O","Moz","ms","Ms","Webkit"];
				i = 5;
				while (--i > -1 && s[a[i]+p] === undefined) { }
				if (i >= 0) {
					_prefix = (i === 3) ? "ms" : a[i];
					_prefixCSS = "-" + _prefix.toLowerCase() + "-";
					return _prefix + p;
				}
				return null;
			},

			_getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},

			/**
			 * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
			 * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
			 *
			 * @param {!Object} t Target element whose style property you want to query
			 * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
			 * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
			 * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
			 * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
			 * @return {?string} The current property value
			 */
			_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
				var rv;
				if (!_supportsOpacity) if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
					return _getIEOpacity(t);
				}
				if (!calc && t.style[p]) {
					rv = t.style[p];
				} else if ((cs = cs || _getComputedStyle(t))) {
					rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
				} else if (t.currentStyle) {
					rv = t.currentStyle[p];
				}
				return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
			},

			/**
			 * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
			 * @param {!Object} t Target element
			 * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
			 * @param {!number} v Value
			 * @param {string=} sfx Suffix (like "px" or "%" or "em")
			 * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
			 * @return {number} value in pixels
			 */
			_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
				if (sfx === "px" || !sfx) { return v; }
				if (sfx === "auto" || !v) { return 0; }
				var horiz = _horizExp.test(p),
					node = t,
					style = _tempDiv.style,
					neg = (v < 0),
					precise = (v === 1),
					pix, cache, time;
				if (neg) {
					v = -v;
				}
				if (precise) {
					v *= 100;
				}
				if (sfx === "%" && p.indexOf("border") !== -1) {
					pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
				} else {
					style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
					if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
						node = t.parentNode || _doc.body;
						cache = node._gsCache;
						time = TweenLite.ticker.frame;
						if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
							return cache.width * v / 100;
						}
						style[(horiz ? "width" : "height")] = v + sfx;
					} else {
						style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
					}
					node.appendChild(_tempDiv);
					pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
					node.removeChild(_tempDiv);
					if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
						cache = node._gsCache = node._gsCache || {};
						cache.time = time;
						cache.width = pix / v * 100;
					}
					if (pix === 0 && !recurse) {
						pix = _convertToPixels(t, p, v, sfx, true);
					}
				}
				if (precise) {
					pix /= 100;
				}
				return neg ? -pix : pix;
			},
			_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
				if (_getStyle(t, "position", cs) !== "absolute") { return 0; }
				var dim = ((p === "left") ? "Left" : "Top"),
					v = _getStyle(t, "margin" + dim, cs);
				return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
			},

			// @private returns at object containing ALL of the style properties in camelCase and their associated values.
			_getAllStyles = function(t, cs) {
				var s = {},
					i, tr, p;
				if ((cs = cs || _getComputedStyle(t, null))) {
					if ((i = cs.length)) {
						while (--i > -1) {
							p = cs[i];
							if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
							}
						}
					} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
						for (i in cs) {
							if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[i] = cs[i];
							}
						}
					}
				} else if ((cs = t.currentStyle || t.style)) {
					for (i in cs) {
						if (typeof(i) === "string" && s[i] === undefined) {
							s[i.replace(_camelExp, _camelFunc)] = cs[i];
						}
					}
				}
				if (!_supportsOpacity) {
					s.opacity = _getIEOpacity(t);
				}
				tr = _getTransform(t, cs, false);
				s.rotation = tr.rotation;
				s.skewX = tr.skewX;
				s.scaleX = tr.scaleX;
				s.scaleY = tr.scaleY;
				s.x = tr.x;
				s.y = tr.y;
				if (_supports3D) {
					s.z = tr.z;
					s.rotationX = tr.rotationX;
					s.rotationY = tr.rotationY;
					s.scaleZ = tr.scaleZ;
				}
				if (s.filters) {
					delete s.filters;
				}
				return s;
			},

			// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
			_cssDif = function(t, s1, s2, vars, forceLookup) {
				var difs = {},
					style = t.style,
					val, p, mpt;
				for (p in s2) {
					if (p !== "cssText") if (p !== "length") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf("Origin") === -1) if (typeof(val) === "number" || typeof(val) === "string") {
						difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
						if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
							mpt = new MiniPropTween(style, p, style[p], mpt);
						}
					}
				}
				if (vars) {
					for (p in vars) { //copy properties (except className)
						if (p !== "className") {
							difs[p] = vars[p];
						}
					}
				}
				return {difs:difs, firstMPT:mpt};
			},
			_dimensions = {width:["Left","Right"], height:["Top","Bottom"]},
			_margins = ["marginLeft","marginRight","marginTop","marginBottom"],

			/**
			 * @private Gets the width or height of an element
			 * @param {!Object} t Target element
			 * @param {!string} p Property name ("width" or "height")
			 * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
			 * @return {number} Dimension (in pixels)
			 */
			_getDimension = function(t, p, cs) {
				if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
					return (cs || _getComputedStyle(t))[p] || 0;
				} else if (t.getBBox && _isSVG(t)) {
					return t.getBBox()[p] || 0;
				}
				var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
					a = _dimensions[p],
					i = a.length;
				cs = cs || _getComputedStyle(t, null);
				while (--i > -1) {
					v -= parseFloat( _getStyle(t, "padding" + a[i], cs, true) ) || 0;
					v -= parseFloat( _getStyle(t, "border" + a[i] + "Width", cs, true) ) || 0;
				}
				return v;
			},

			// @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
			_parsePosition = function(v, recObj) {
				if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
					return v + " ";
				}
				if (v == null || v === "") {
					v = "0 0";
				}
				var a = v.split(" "),
					x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
					y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
					i;
				if (a.length > 3 && !recObj) { //multiple positions
					a = v.split(", ").join(",").split(",");
					v = [];
					for (i = 0; i < a.length; i++) {
						v.push(_parsePosition(a[i]));
					}
					return v.join(",");
				}
				if (y == null) {
					y = (x === "center") ? "50%" : "0";
				} else if (y === "center") {
					y = "50%";
				}
				if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
					x = "50%";
				}
				v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
				if (recObj) {
					recObj.oxp = (x.indexOf("%") !== -1);
					recObj.oyp = (y.indexOf("%") !== -1);
					recObj.oxr = (x.charAt(1) === "=");
					recObj.oyr = (y.charAt(1) === "=");
					recObj.ox = parseFloat(x.replace(_NaNExp, ""));
					recObj.oy = parseFloat(y.replace(_NaNExp, ""));
					recObj.v = v;
				}
				return recObj || v;
			},

			/**
			 * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
			 * @param {(number|string)} e End value which is typically a string, but could be a number
			 * @param {(number|string)} b Beginning value which is typically a string but could be a number
			 * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
			 */
			_parseChange = function(e, b) {
				if (typeof(e) === "function") {
					e = e(_index, _target);
				}
				return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
			},

			/**
			 * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @return {number} Parsed value
			 */
			_parseVal = function(v, d) {
				if (typeof(v) === "function") {
					v = v(_index, _target);
				}
				return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
			},

			/**
			 * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
			 * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
			 * @return {number} parsed angle in radians
			 */
			_parseAngle = function(v, d, p, directionalEnd) {
				var min = 0.000001,
					cap, split, dif, result, isRelative;
				if (typeof(v) === "function") {
					v = v(_index, _target);
				}
				if (v == null) {
					result = d;
				} else if (typeof(v) === "number") {
					result = v;
				} else {
					cap = 360;
					split = v.split("_");
					isRelative = (v.charAt(1) === "=");
					dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
					if (split.length) {
						if (directionalEnd) {
							directionalEnd[p] = d + dif;
						}
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = (dif < 0) ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						}
					}
					result = d + dif;
				}
				if (result < min && result > -min) {
					result = 0;
				}
				return result;
			},

			_colorLookup = {aqua:[0,255,255],
				lime:[0,255,0],
				silver:[192,192,192],
				black:[0,0,0],
				maroon:[128,0,0],
				teal:[0,128,128],
				blue:[0,0,255],
				navy:[0,0,128],
				white:[255,255,255],
				fuchsia:[255,0,255],
				olive:[128,128,0],
				yellow:[255,255,0],
				orange:[255,165,0],
				gray:[128,128,128],
				purple:[128,0,128],
				green:[0,128,0],
				red:[255,0,0],
				pink:[255,192,203],
				cyan:[0,255,255],
				transparent:[255,255,255,0]},

			_hue = function(h, m1, m2) {
				h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
				return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
			},

			/**
			 * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
			 * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
			 * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
			 * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
			 */
			_parseColor = CSSPlugin.parseColor = function(v, toHSL) {
				var a, r, g, b, h, s, l, max, min, d, wasHSL;
				if (!v) {
					a = _colorLookup.black;
				} else if (typeof(v) === "number") {
					a = [v >> 16, (v >> 8) & 255, v & 255];
				} else {
					if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
						v = v.substr(0, v.length - 1);
					}
					if (_colorLookup[v]) {
						a = _colorLookup[v];
					} else if (v.charAt(0) === "#") {
						if (v.length === 4) { //for shorthand like #9F0
							r = v.charAt(1);
							g = v.charAt(2);
							b = v.charAt(3);
							v = "#" + r + r + g + g + b + b;
						}
						v = parseInt(v.substr(1), 16);
						a = [v >> 16, (v >> 8) & 255, v & 255];
					} else if (v.substr(0, 3) === "hsl") {
						a = wasHSL = v.match(_numExp);
						if (!toHSL) {
							h = (Number(a[0]) % 360) / 360;
							s = Number(a[1]) / 100;
							l = Number(a[2]) / 100;
							g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
							r = l * 2 - g;
							if (a.length > 3) {
								a[3] = Number(v[3]);
							}
							a[0] = _hue(h + 1 / 3, r, g);
							a[1] = _hue(h, r, g);
							a[2] = _hue(h - 1 / 3, r, g);
						} else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
							return v.match(_relNumExp);
						}
					} else {
						a = v.match(_numExp) || _colorLookup.transparent;
					}
					a[0] = Number(a[0]);
					a[1] = Number(a[1]);
					a[2] = Number(a[2]);
					if (a.length > 3) {
						a[3] = Number(a[3]);
					}
				}
				if (toHSL && !wasHSL) {
					r = a[0] / 255;
					g = a[1] / 255;
					b = a[2] / 255;
					max = Math.max(r, g, b);
					min = Math.min(r, g, b);
					l = (max + min) / 2;
					if (max === min) {
						h = s = 0;
					} else {
						d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
						h *= 60;
					}
					a[0] = (h + 0.5) | 0;
					a[1] = (s * 100 + 0.5) | 0;
					a[2] = (l * 100 + 0.5) | 0;
				}
				return a;
			},
			_formatColors = function(s, toHSL) {
				var colors = s.match(_colorExp) || [],
					charIndex = 0,
					parsed = colors.length ? "" : s,
					i, color, temp;
				for (i = 0; i < colors.length; i++) {
					color = colors[i];
					temp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);
					charIndex += temp.length + color.length;
					color = _parseColor(color, toHSL);
					if (color.length === 3) {
						color.push(1);
					}
					parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
				}
				return parsed + s.substr(charIndex);
			},
			_colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

		for (p in _colorLookup) {
			_colorExp += "|" + p + "\\b";
		}
		_colorExp = new RegExp(_colorExp+")", "gi");

		CSSPlugin.colorStringFilter = function(a) {
			var combined = a[0] + a[1],
				toHSL;
			if (_colorExp.test(combined)) {
				toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
				a[0] = _formatColors(a[0], toHSL);
				a[1] = _formatColors(a[1], toHSL);
			}
			_colorExp.lastIndex = 0;
		};

		if (!TweenLite.defaultStringFilter) {
			TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
		}

		/**
		 * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
		 * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
		 * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
		 * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
		 * @return {Function} formatter function
		 */
		var _getFormatter = function(dflt, clr, collapsible, multi) {
				if (dflt == null) {
					return function(v) {return v;};
				}
				var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
					dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
					pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
					sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
					delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
					numVals = dVals.length,
					dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
					formatter;
				if (!numVals) {
					return function(v) {return v;};
				}
				if (clr) {
					formatter = function(v) {
						var color, vals, i, a;
						if (typeof(v) === "number") {
							v += dSfx;
						} else if (multi && _commasOutsideParenExp.test(v)) {
							a = v.replace(_commasOutsideParenExp, "|").split("|");
							for (i = 0; i < a.length; i++) {
								a[i] = formatter(a[i]);
							}
							return a.join(",");
						}
						color = (v.match(_colorExp) || [dColor])[0];
						vals = v.split(color).join("").match(_valuesExp) || [];
						i = vals.length;
						if (numVals > i--) {
							while (++i < numVals) {
								vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
							}
						}
						return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
					};
					return formatter;

				}
				formatter = function(v) {
					var vals, a, i;
					if (typeof(v) === "number") {
						v += dSfx;
					} else if (multi && _commasOutsideParenExp.test(v)) {
						a = v.replace(_commasOutsideParenExp, "|").split("|");
						for (i = 0; i < a.length; i++) {
							a[i] = formatter(a[i]);
						}
						return a.join(",");
					}
					vals = v.match(_valuesExp) || [];
					i = vals.length;
					if (numVals > i--) {
						while (++i < numVals) {
							vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
						}
					}
					return pfx + vals.join(delim) + sfx;
				};
				return formatter;
			},

			/**
			 * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
			 * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
			 * @return {Function} a formatter function
			 */
			_getEdgeParser = function(props) {
				props = props.split(",");
				return function(t, e, p, cssp, pt, plugin, vars) {
					var a = (e + "").split(" "),
						i;
					vars = {};
					for (i = 0; i < 4; i++) {
						vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
					}
					return cssp.parse(t, vars, pt, plugin);
				};
			},

			// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
			_setPluginRatio = _internals._setPluginRatio = function(v) {
				this.plugin.setRatio(v);
				var d = this.data,
					proxy = d.proxy,
					mpt = d.firstMPT,
					min = 0.000001,
					val, pt, i, str, p;
				while (mpt) {
					val = proxy[mpt.v];
					if (mpt.r) {
						val = Math.round(val);
					} else if (val < min && val > -min) {
						val = 0;
					}
					mpt.t[mpt.p] = val;
					mpt = mpt._next;
				}
				if (d.autoRotate) {
					d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
				}
				//at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
				if (v === 1 || v === 0) {
					mpt = d.firstMPT;
					p = (v === 1) ? "e" : "b";
					while (mpt) {
						pt = mpt.t;
						if (!pt.type) {
							pt[p] = pt.s + pt.xs0;
						} else if (pt.type === 1) {
							str = pt.xs0 + pt.s + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt[p] = str;
						}
						mpt = mpt._next;
					}
				}
			},

			/**
			 * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
			 * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
			 * @param {!string} p property name
			 * @param {(number|string|object)} v value
			 * @param {MiniPropTween=} next next MiniPropTween in the linked list
			 * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
			 */
			MiniPropTween = function(t, p, v, next, r) {
				this.t = t;
				this.p = p;
				this.v = v;
				this.r = r;
				if (next) {
					next._prev = this;
					this._next = next;
				}
			},

			/**
			 * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
			 * This method returns an object that has the following properties:
			 *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
			 *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
			 *  - firstMPT: the first MiniPropTween in the linked list
			 *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
			 * @param {!Object} t target object to be tweened
			 * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
			 * @param {!CSSPlugin} cssp The CSSPlugin instance
			 * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
			 * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
			 * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
			 * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
			 */
			_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
				var bpt = pt,
					start = {},
					end = {},
					transform = cssp._transform,
					oldForce = _forcePT,
					i, p, xp, mpt, firstPT;
				cssp._transform = null;
				_forcePT = vars;
				pt = firstPT = cssp.parse(t, vars, pt, plugin);
				_forcePT = oldForce;
				//break off from the linked list so the new ones are isolated.
				if (shallow) {
					cssp._transform = transform;
					if (bpt) {
						bpt._prev = null;
						if (bpt._prev) {
							bpt._prev._next = null;
						}
					}
				}
				while (pt && pt !== bpt) {
					if (pt.type <= 1) {
						p = pt.p;
						end[p] = pt.s + pt.c;
						start[p] = pt.s;
						if (!shallow) {
							mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
							pt.c = 0;
						}
						if (pt.type === 1) {
							i = pt.l;
							while (--i > 0) {
								xp = "xn" + i;
								p = pt.p + "_" + xp;
								end[p] = pt.data[xp];
								start[p] = pt[xp];
								if (!shallow) {
									mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
								}
							}
						}
					}
					pt = pt._next;
				}
				return {proxy:start, end:end, firstMPT:mpt, pt:firstPT};
			},



			/**
			 * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
			 * CSSPropTweens have the following optional properties as well (not defined through the constructor):
			 *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
			 *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
			 *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
			 *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
			 *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
			 * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
			 * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
			 * @param {number} s Starting numeric value
			 * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
			 * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
			 * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
			 * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
			 * @param {boolean=} r If true, the value(s) should be rounded
			 * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
			 * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
			 * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
			 */
			CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
				this.t = t; //target
				this.p = p; //property
				this.s = s; //starting value
				this.c = c; //change value
				this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
				if (!(t instanceof CSSPropTween)) {
					_overwriteProps.push(this.n);
				}
				this.r = r; //round (boolean)
				this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
				if (pr) {
					this.pr = pr;
					_hasPriority = true;
				}
				this.b = (b === undefined) ? s : b;
				this.e = (e === undefined) ? s + c : e;
				if (next) {
					this._next = next;
					next._prev = this;
				}
			},

			_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
				var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
				pt.b = start;
				pt.e = pt.xs0 = end;
				return pt;
			},

			/**
			 * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
			 * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
			 * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
			 * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
			 *
			 * @param {!Object} t Target whose property will be tweened
			 * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
			 * @param {string} b Beginning value
			 * @param {string} e Ending value
			 * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
			 * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
			 * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
			 * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
			 * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
			 * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
			 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
			 */
			_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
				//DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
				b = b || dflt || "";
				if (typeof(e) === "function") {
					e = e(_index, _target);
				}
				pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
				e += ""; //ensures it's a string
				if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
					e = [b, e];
					CSSPlugin.colorStringFilter(e);
					b = e[0];
					e = e[1];
				}
				var ba = b.split(", ").join(",").split(" "), //beginning array
					ea = e.split(", ").join(",").split(" "), //ending array
					l = ba.length,
					autoRound = (_autoRound !== false),
					i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
				if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
					ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					l = ba.length;
				}
				if (l !== ea.length) {
					//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
					ba = (dflt || "").split(" ");
					l = ba.length;
				}
				pt.plugin = plugin;
				pt.setRatio = setRatio;
				_colorExp.lastIndex = 0;
				for (i = 0; i < l; i++) {
					bv = ba[i];
					ev = ea[i];
					bn = parseFloat(bv);
					//if the value begins with a number (most common). It's fine if it has a suffix like px
					if (bn || bn === 0) {
						pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1), true);

					//if the value is a color
					} else if (clrs && _colorExp.test(bv)) {
						str = ev.indexOf(")") + 1;
						str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
						useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
						bv = _parseColor(bv, useHSL);
						ev = _parseColor(ev, useHSL);
						hasAlpha = (bv.length + ev.length > 6);
						if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
							pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
							pt.e = pt.e.split(ea[i]).join("transparent");
						} else {
							if (!_supportsOpacity) { //old versions of IE don't support rgba().
								hasAlpha = false;
							}
							if (useHSL) {
								pt.appendXtra((hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
									.appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
									.appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
							} else {
								pt.appendXtra((hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true)
									.appendXtra("", bv[1], ev[1] - bv[1], ",", true)
									.appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), true);
							}

							if (hasAlpha) {
								bv = (bv.length < 4) ? 1 : bv[3];
								pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
							}
						}
						_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

					} else {
						bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

						//if no number is found, treat it as a non-tweening value and just append the string to the current xs.
						if (!bnums) {
							pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;

						//loop through all the numbers that are found and construct the extra values on the pt.
						} else {
							enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
							if (!enums || enums.length !== bnums.length) {
								//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
								return pt;
							}
							ni = 0;
							for (xi = 0; xi < bnums.length; xi++) {
								cv = bnums[xi];
								temp = bv.indexOf(cv, ni);
								pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px"), (xi === 0));
								ni = temp + cv.length;
							}
							pt["xs" + pt.l] += bv.substr(ni);
						}
					}
				}
				//if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
				if (e.indexOf("=") !== -1) if (pt.data) {
					str = pt.xs0 + pt.data.s;
					for (i = 1; i < pt.l; i++) {
						str += pt["xs" + i] + pt.data["xn" + i];
					}
					pt.e = str + pt["xs" + i];
				}
				if (!pt.l) {
					pt.type = -1;
					pt.xs0 = pt.e;
				}
				return pt.xfirst || pt;
			},
			i = 9;


		p = CSSPropTween.prototype;
		p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
		while (--i > 0) {
			p["xn" + i] = 0;
			p["xs" + i] = "";
		}
		p.xs0 = "";
		p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


		/**
		 * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
		 * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
		 * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
		 * @param {string=} pfx Prefix (if any)
		 * @param {!number} s Starting value
		 * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
		 * @param {string=} sfx Suffix (if any)
		 * @param {boolean=} r Round (if true).
		 * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
		 * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
		 */
		p.appendXtra = function(pfx, s, c, sfx, r, pad) {
			var pt = this,
				l = pt.l;
			pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
			if (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
				pt["xs" + l] += s + (sfx || "");
				return pt;
			}
			pt.l++;
			pt.type = pt.setRatio ? 2 : 1;
			pt["xs" + pt.l] = sfx || "";
			if (l > 0) {
				pt.data["xn" + l] = s + c;
				pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
				pt["xn" + l] = s;
				if (!pt.plugin) {
					pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
					pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
				}
				return pt;
			}
			pt.data = {s:s + c};
			pt.rxp = {};
			pt.s = s;
			pt.c = c;
			pt.r = r;
			return pt;
		};

		/**
		 * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
		 * @param {!string} p Property name (like "boxShadow" or "throwProps")
		 * @param {Object=} options An object containing any of the following configuration options:
		 *                      - defaultValue: the default value
		 *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
		 *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
		 *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
		 *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
		 *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
		 *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
		 *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
		 *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
		 */
		var SpecialProp = function(p, options) {
				options = options || {};
				this.p = options.prefix ? _checkPropPrefix(p) || p : p;
				_specialProps[p] = _specialProps[this.p] = this;
				this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
				if (options.parser) {
					this.parse = options.parser;
				}
				this.clrs = options.color;
				this.multi = options.multi;
				this.keyword = options.keyword;
				this.dflt = options.defaultValue;
				this.pr = options.priority || 0;
			},

			//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
			_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
				if (typeof(options) !== "object") {
					options = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
				}
				var a = p.split(","),
					d = options.defaultValue,
					i, temp;
				defaults = defaults || [d];
				for (i = 0; i < a.length; i++) {
					options.prefix = (i === 0 && options.prefix);
					options.defaultValue = defaults[i] || d;
					temp = new SpecialProp(a[i], options);
				}
			},

			//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
			_registerPluginProp = _internals._registerPluginProp = function(p) {
				if (!_specialProps[p]) {
					var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
					_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {
						var pluginClass = _globals.com.greensock.plugins[pluginName];
						if (!pluginClass) {
							_log("Error: " + pluginName + " js file not loaded.");
							return pt;
						}
						pluginClass._cssRegister();
						return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
					}});
				}
			};


		p = SpecialProp.prototype;

		/**
		 * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
		 * @param {!Object} t target element
		 * @param {(string|number|object)} b beginning value
		 * @param {(string|number|object)} e ending (destination) value
		 * @param {CSSPropTween=} pt next CSSPropTween in the linked list
		 * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
		 * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
		 * @return {CSSPropTween=} First CSSPropTween in the linked list
		 */
		p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
			var kwd = this.keyword,
				i, ba, ea, l, bi, ei;
			//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
			if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
				ba = b.replace(_commasOutsideParenExp, "|").split("|");
				ea = e.replace(_commasOutsideParenExp, "|").split("|");
			} else if (kwd) {
				ba = [b];
				ea = [e];
			}
			if (ea) {
				l = (ea.length > ba.length) ? ea.length : ba.length;
				for (i = 0; i < l; i++) {
					b = ba[i] = ba[i] || this.dflt;
					e = ea[i] = ea[i] || this.dflt;
					if (kwd) {
						bi = b.indexOf(kwd);
						ei = e.indexOf(kwd);
						if (bi !== ei) {
							if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
								ba[i] = ba[i].split(kwd).join("");
							} else if (bi === -1) { //if the keyword isn't in the beginning, add it.
								ba[i] += " " + kwd;
							}
						}
					}
				}
				b = ba.join(", ");
				e = ea.join(", ");
			}
			return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
		};

		/**
		 * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
		 * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
		 * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
		 * @param {!Object} t Target object whose property is being tweened
		 * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
		 * @param {!string} p Property name
		 * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
		 * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
		 * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
		 * @param {Object=} vars Original vars object that contains the data for parsing.
		 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
		 */
		p.parse = function(t, e, p, cssp, pt, plugin, vars) {
			return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
		};

		/**
		 * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
		 *  1) Target object whose property should be tweened (typically a DOM element)
		 *  2) The end/destination value (could be a string, number, object, or whatever you want)
		 *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
		 *
		 * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
		 *
		 * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
		 *      var start = target.style.width;
		 *      return function(ratio) {
		 *              target.style.width = (start + value * ratio) + "px";
		 *              console.log("set width to " + target.style.width);
		 *          }
		 * }, 0);
		 *
		 * Then, when I do this tween, it will trigger my special property:
		 *
		 * TweenLite.to(element, 1, {css:{myCustomProp:100}});
		 *
		 * In the example, of course, we're just changing the width, but you can do anything you want.
		 *
		 * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
		 * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
		 * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
		 */
		CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
			_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {
				var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
				rv.plugin = plugin;
				rv.setRatio = onInitTween(t, e, cssp._tween, p);
				return rv;
			}, priority:priority});
		};






		//transform-related methods and properties
		CSSPlugin.useSVGTransformAttr = _isSafari || _isFirefox; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
		var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
			_transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
			_transformPropCSS = _prefixCSS + "transform",
			_transformOriginProp = _checkPropPrefix("transformOrigin"),
			_supports3D = (_checkPropPrefix("perspective") !== null),
			Transform = _internals.Transform = function() {
				this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
				this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
			},
			_SVGElement = window.SVGElement,
			_useSVGTransformAttr,
			//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

			_createSVG = function(type, container, attributes) {
				var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
					reg = /([a-z])([A-Z])/g,
					p;
				for (p in attributes) {
					element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
				}
				container.appendChild(element);
				return element;
			},
			_docElement = _doc.documentElement,
			_forceSVGTransformAttr = (function() {
				//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
				var force = _ieVers || (/Android/i.test(_agent) && !window.chrome),
					svg, rect, width;
				if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
					svg = _createSVG("svg", _docElement);
					rect = _createSVG("rect", svg, {width:100, height:50, x:100});
					width = rect.getBoundingClientRect().width;
					rect.style[_transformOriginProp] = "50% 50%";
					rect.style[_transformProp] = "scaleX(0.5)";
					force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
					_docElement.removeChild(svg);
				}
				return force;
			})(),
			_parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
				var tm = e._gsTransform,
					m = _getMatrix(e, true),
					v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
				if (tm) {
					xOriginOld = tm.xOrigin; //record the original values before we alter them.
					yOriginOld = tm.yOrigin;
				}
				if (!absolute || (v = absolute.split(" ")).length < 2) {
					b = e.getBBox();
					local = _parsePosition(local).split(" ");
					v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
						 (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];
				}
				decoratee.xOrigin = xOrigin = parseFloat(v[0]);
				decoratee.yOrigin = yOrigin = parseFloat(v[1]);
				if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
					a = m[0];
					b = m[1];
					c = m[2];
					d = m[3];
					tx = m[4];
					ty = m[5];
					determinant = (a * d - b * c);
					x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
					y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
					xOrigin = decoratee.xOrigin = v[0] = x;
					yOrigin = decoratee.yOrigin = v[1] = y;
				}
				if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
					if (skipRecord) {
						decoratee.xOffset = tm.xOffset;
						decoratee.yOffset = tm.yOffset;
						tm = decoratee;
					}
					if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
						x = xOrigin - xOriginOld;
						y = yOrigin - yOriginOld;
						//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
						//tm.x -= x - (x * m[0] + y * m[2]);
						//tm.y -= y - (x * m[1] + y * m[3]);
						tm.xOffset += (x * m[0] + y * m[2]) - x;
						tm.yOffset += (x * m[1] + y * m[3]) - y;
					} else {
						tm.xOffset = tm.yOffset = 0;
					}
				}
				if (!skipRecord) {
					e.setAttribute("data-svg-origin", v.join(" "));
				}
			},
			_canGetBBox = function(e) {
				try {
					return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
				} catch (e) {}
			},
			_isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
				return !!(_SVGElement && e.getBBox && e.getCTM && _canGetBBox(e) && (!e.parentNode || (e.parentNode.getBBox && e.parentNode.getCTM)));
			},
			_identity2DMatrix = [1,0,0,1,0,0],
			_getMatrix = function(e, force2D) {
				var tm = e._gsTransform || new Transform(),
					rnd = 100000,
					style = e.style,
					isDefault, s, m, n, dec, none;
				if (_transformProp) {
					s = _getStyle(e, _transformPropCSS, null, true);
				} else if (e.currentStyle) {
					//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
					s = e.currentStyle.filter.match(_ieGetMatrixExp);
					s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
				}
				isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
				if (isDefault && _transformProp && ((none = (_getComputedStyle(e).display === "none")) || !e.parentNode)) {
					if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none".
						n = style.display;
						style.display = "block";
					}
					if (!e.parentNode) {
						dec = 1; //flag
						_docElement.appendChild(e);
					}
					s = _getStyle(e, _transformPropCSS, null, true);
					isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
					if (n) {
						style.display = n;
					} else if (none) {
						_removeProp(style, "display");
					}
					if (dec) {
						_docElement.removeChild(e);
					}
				}
				if (tm.svg || (e.getBBox && _isSVG(e))) {
					if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
						s = style[_transformProp];
						isDefault = 0;
					}
					m = e.getAttribute("transform");
					if (isDefault && m) {
						if (m.indexOf("matrix") !== -1) { //just in case there's a "transform" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.
							s = m;
							isDefault = 0;
						} else if (m.indexOf("translate") !== -1) {
							s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
							isDefault = 0;
						}
					}
				}
				if (isDefault) {
					return _identity2DMatrix;
				}
				//split the matrix values out into an array (m for matrix)
				m = (s || "").match(_numExp) || [];
				i = m.length;
				while (--i > -1) {
					n = Number(m[i]);
					m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
				}
				return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
			},

			/**
			 * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
			 * @param {!Object} t target element
			 * @param {Object=} cs computed style object (optional)
			 * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
			 * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
			 * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
			 */
			_getTransform = _internals.getTransform = function(t, cs, rec, parse) {
				if (t._gsTransform && rec && !parse) {
					return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
				}
				var tm = rec ? t._gsTransform || new Transform() : new Transform(),
					invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
					min = 0.00002,
					rnd = 100000,
					zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin  || 0 : 0,
					defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
					m, i, scaleX, scaleY, rotation, skewX;

				tm.svg = !!(t.getBBox && _isSVG(t));
				if (tm.svg) {
					_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
					_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
				}
				m = _getMatrix(t);
				if (m !== _identity2DMatrix) {

					if (m.length === 16) {
						//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
						var a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],
							a12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],
							a13 = m[8], a23 = m[9], a33 = m[10],
							a14 = m[12], a24 = m[13], a34 = m[14],
							a43 = m[11],
							angle = Math.atan2(a32, a33),
							t1, t2, t3, t4, cos, sin;

						//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
						if (tm.zOrigin) {
							a34 = -tm.zOrigin;
							a14 = a13*a34-m[12];
							a24 = a23*a34-m[13];
							a34 = a33*a34+tm.zOrigin-m[14];
						}
						tm.rotationX = angle * _RAD2DEG;
						//rotationX
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							t1 = a12*cos+a13*sin;
							t2 = a22*cos+a23*sin;
							t3 = a32*cos+a33*sin;
							a13 = a12*-sin+a13*cos;
							a23 = a22*-sin+a23*cos;
							a33 = a32*-sin+a33*cos;
							a43 = a42*-sin+a43*cos;
							a12 = t1;
							a22 = t2;
							a32 = t3;
						}
						//rotationY
						angle = Math.atan2(-a31, a33);
						tm.rotationY = angle * _RAD2DEG;
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							t1 = a11*cos-a13*sin;
							t2 = a21*cos-a23*sin;
							t3 = a31*cos-a33*sin;
							a23 = a21*sin+a23*cos;
							a33 = a31*sin+a33*cos;
							a43 = a41*sin+a43*cos;
							a11 = t1;
							a21 = t2;
							a31 = t3;
						}
						//rotationZ
						angle = Math.atan2(a21, a11);
						tm.rotation = angle * _RAD2DEG;
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							a11 = a11*cos+a12*sin;
							t2 = a21*cos+a22*sin;
							a22 = a21*-sin+a22*cos;
							a32 = a31*-sin+a32*cos;
							a21 = t2;
						}

						if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
							tm.rotationX = tm.rotation = 0;
							tm.rotationY = 180 - tm.rotationY;
						}

						tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21) * rnd + 0.5) | 0) / rnd;
						tm.scaleY = ((Math.sqrt(a22 * a22 + a23 * a23) * rnd + 0.5) | 0) / rnd;
						tm.scaleZ = ((Math.sqrt(a32 * a32 + a33 * a33) * rnd + 0.5) | 0) / rnd;
						if (tm.rotationX || tm.rotationY) {
							tm.skewX = 0;
						} else {
							tm.skewX = (a12 || a22) ? Math.atan2(a12, a22) * _RAD2DEG + tm.rotation : tm.skewX || 0;
							if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
								if (invX) {
									tm.scaleX *= -1;
									tm.skewX += (tm.rotation <= 0) ? 180 : -180;
									tm.rotation += (tm.rotation <= 0) ? 180 : -180;
								} else {
									tm.scaleY *= -1;
									tm.skewX += (tm.skewX <= 0) ? 180 : -180;
								}
							}
						}
						tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
						tm.x = a14;
						tm.y = a24;
						tm.z = a34;
						if (tm.svg) {
							tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
							tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
						}

					} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
						var k = (m.length >= 6),
							a = k ? m[0] : 1,
							b = m[1] || 0,
							c = m[2] || 0,
							d = k ? m[3] : 1;
						tm.x = m[4] || 0;
						tm.y = m[5] || 0;
						scaleX = Math.sqrt(a * a + b * b);
						scaleY = Math.sqrt(d * d + c * c);
						rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
						skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
						if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
							if (invX) {
								scaleX *= -1;
								skewX += (rotation <= 0) ? 180 : -180;
								rotation += (rotation <= 0) ? 180 : -180;
							} else {
								scaleY *= -1;
								skewX += (skewX <= 0) ? 180 : -180;
							}
						}
						tm.scaleX = scaleX;
						tm.scaleY = scaleY;
						tm.rotation = rotation;
						tm.skewX = skewX;
						if (_supports3D) {
							tm.rotationX = tm.rotationY = tm.z = 0;
							tm.perspective = defaultTransformPerspective;
							tm.scaleZ = 1;
						}
						if (tm.svg) {
							tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
							tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
						}
					}
					tm.zOrigin = zOrigin;
					//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
					for (i in tm) {
						if (tm[i] < min) if (tm[i] > -min) {
							tm[i] = 0;
						}
					}
				}
				//DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
				if (rec) {
					t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
					if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
						if (_useSVGTransformAttr && t.style[_transformProp]) {
							TweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
								_removeProp(t.style, _transformProp);
							});
						} else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
							TweenLite.delayedCall(0.001, function(){
								t.removeAttribute("transform");
							});
						}
					}
				}
				return tm;
			},

			//for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
			_setIETransformRatio = function(v) {
				var t = this.data, //refers to the element's _gsTransform object
					ang = -t.rotation * _DEG2RAD,
					skew = ang + t.skewX * _DEG2RAD,
					rnd = 100000,
					a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
					b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
					c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
					d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
					style = this.t.style,
					cs = this.t.currentStyle,
					filters, val;
				if (!cs) {
					return;
				}
				val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
				b = -c;
				c = -val;
				filters = cs.filter;
				style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
				var w = this.t.offsetWidth,
					h = this.t.offsetHeight,
					clip = (cs.position !== "absolute"),
					m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
					ox = t.x + (w * t.xPercent / 100),
					oy = t.y + (h * t.yPercent / 100),
					dx, dy;

				//if transformOrigin is being used, adjust the offset x and y
				if (t.ox != null) {
					dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
					dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
					ox += dx - (dx * a + dy * b);
					oy += dy - (dx * c + dy * d);
				}

				if (!clip) {
					m += ", sizingMethod='auto expand')";
				} else {
					dx = (w / 2);
					dy = (h / 2);
					//translate to ensure that transformations occur around the correct origin (default is center).
					m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
				}
				if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
					style.filter = filters.replace(_ieSetMatrixExp, m);
				} else {
					style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
				}

				//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
				if (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf("Dx=0, Dy=0") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
					style.removeAttribute("filter");
				}

				//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
				if (!clip) {
					var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
						marg, prop, dif;
					dx = t.ieOffsetX || 0;
					dy = t.ieOffsetY || 0;
					t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
					t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
					for (i = 0; i < 4; i++) {
						prop = _margins[i];
						marg = cs[prop];
						//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
						val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
						if (val !== t[prop]) {
							dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
						} else {
							dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
						}
						style[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + "px";
					}
				}
			},

			/* translates a super small decimal to a string WITHOUT scientific notation
			_safeDecimal = function(n) {
				var s = (n < 0 ? -n : n) + "",
					a = s.split("e-");
				return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
			},
			*/

			_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
				var t = this.data, //refers to the element's _gsTransform object
					style = this.t.style,
					angle = t.rotation,
					rotationX = t.rotationX,
					rotationY = t.rotationY,
					sx = t.scaleX,
					sy = t.scaleY,
					sz = t.scaleZ,
					x = t.x,
					y = t.y,
					z = t.z,
					isSVG = t.svg,
					perspective = t.perspective,
					force3D = t.force3D,
					a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
					zOrigin, min, cos, sin, t1, t2, transform, comma, zero, skew, rnd;
				//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
				if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

					//2D
					if (angle || t.skewX || isSVG) {
						angle *= _DEG2RAD;
						skew = t.skewX * _DEG2RAD;
						rnd = 100000;
						a11 = Math.cos(angle) * sx;
						a21 = Math.sin(angle) * sx;
						a12 = Math.sin(angle - skew) * -sy;
						a22 = Math.cos(angle - skew) * sy;
						if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
							t1 = Math.tan(skew - t.skewY * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							a12 *= t1;
							a22 *= t1;
							if (t.skewY) {
								t1 = Math.tan(t.skewY * _DEG2RAD);
								t1 = Math.sqrt(1 + t1 * t1);
								a11 *= t1;
								a21 *= t1;
							}
						}
						if (isSVG) {
							x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
							y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
							if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
								min = this.t.getBBox();
								x += t.xPercent * 0.01 * min.width;
								y += t.yPercent * 0.01 * min.height;
							}
							min = 0.000001;
							if (x < min) if (x > -min) {
								x = 0;
							}
							if (y < min) if (y > -min) {
								y = 0;
							}
						}
						transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
						if (isSVG && _useSVGTransformAttr) {
							this.t.setAttribute("transform", "matrix(" + transform);
						} else {
							//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
							style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
						}
					} else {
						style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
					}
					return;

				}
				if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
					min = 0.0001;
					if (sx < min && sx > -min) {
						sx = sz = 0.00002;
					}
					if (sy < min && sy > -min) {
						sy = sz = 0.00002;
					}
					if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
						perspective = 0;
					}
				}
				if (angle || t.skewX) {
					angle *= _DEG2RAD;
					cos = a11 = Math.cos(angle);
					sin = a21 = Math.sin(angle);
					if (t.skewX) {
						angle -= t.skewX * _DEG2RAD;
						cos = Math.cos(angle);
						sin = Math.sin(angle);
						if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
							t1 = Math.tan((t.skewX - t.skewY) * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							cos *= t1;
							sin *= t1;
							if (t.skewY) {
								t1 = Math.tan(t.skewY * _DEG2RAD);
								t1 = Math.sqrt(1 + t1 * t1);
								a11 *= t1;
								a21 *= t1;
							}
						}
					}
					a12 = -sin;
					a22 = cos;

				} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
					style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z +"px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
					return;
				} else {
					a11 = a22 = 1;
					a12 = a21 = 0;
				}
				// KEY  INDEX   AFFECTS
				// a11  0       rotation, rotationY, scaleX
				// a21  1       rotation, rotationY, scaleX
				// a31  2       rotationY, scaleX
				// a41  3       rotationY, scaleX
				// a12  4       rotation, skewX, rotationX, scaleY
				// a22  5       rotation, skewX, rotationX, scaleY
				// a32  6       rotationX, scaleY
				// a42  7       rotationX, scaleY
				// a13  8       rotationY, rotationX, scaleZ
				// a23  9       rotationY, rotationX, scaleZ
				// a33  10      rotationY, rotationX, scaleZ
				// a43  11      rotationY, rotationX, perspective, scaleZ
				// a14  12      x, zOrigin, svgOrigin
				// a24  13      y, zOrigin, svgOrigin
				// a34  14      z, zOrigin
				// a44  15
				// rotation: Math.atan2(a21, a11)
				// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
				// rotationX: Math.atan2(a32, a33)
				a33 = 1;
				a13 = a23 = a31 = a32 = a41 = a42 = 0;
				a43 = (perspective) ? -1 / perspective : 0;
				zOrigin = t.zOrigin;
				min = 0.000001; //threshold below which browsers use scientific notation which won't work.
				comma = ",";
				zero = "0";
				angle = rotationY * _DEG2RAD;
				if (angle) {
					cos = Math.cos(angle);
					sin = Math.sin(angle);
					a31 = -sin;
					a41 = a43*-sin;
					a13 = a11*sin;
					a23 = a21*sin;
					a33 = cos;
					a43 *= cos;
					a11 *= cos;
					a21 *= cos;
				}
				angle = rotationX * _DEG2RAD;
				if (angle) {
					cos = Math.cos(angle);
					sin = Math.sin(angle);
					t1 = a12*cos+a13*sin;
					t2 = a22*cos+a23*sin;
					a32 = a33*sin;
					a42 = a43*sin;
					a13 = a12*-sin+a13*cos;
					a23 = a22*-sin+a23*cos;
					a33 = a33*cos;
					a43 = a43*cos;
					a12 = t1;
					a22 = t2;
				}
				if (sz !== 1) {
					a13*=sz;
					a23*=sz;
					a33*=sz;
					a43*=sz;
				}
				if (sy !== 1) {
					a12*=sy;
					a22*=sy;
					a32*=sy;
					a42*=sy;
				}
				if (sx !== 1) {
					a11*=sx;
					a21*=sx;
					a31*=sx;
					a41*=sx;
				}

				if (zOrigin || isSVG) {
					if (zOrigin) {
						x += a13*-zOrigin;
						y += a23*-zOrigin;
						z += a33*-zOrigin+zOrigin;
					}
					if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
						x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
						y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
					}
					if (x < min && x > -min) {
						x = zero;
					}
					if (y < min && y > -min) {
						y = zero;
					}
					if (z < min && z > -min) {
						z = 0; //don't use string because we calculate perspective later and need the number.
					}
				}

				//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
				transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
				transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
				transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
				if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
					transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
					transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
				} else {
					transform += ",0,0,0,0,1,0,";
				}
				transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";

				style[_transformProp] = transform;
			};

		p = Transform.prototype;
		p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
		p.scaleX = p.scaleY = p.scaleZ = 1;

		_registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {
			if (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.
			cssp._lastParsedTransform = vars;
			var swapFunc;
			if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
				swapFunc = vars[parsingProp];
				vars[parsingProp] = e;
			}
			var originalGSTransform = t._gsTransform,
				style = t.style,
				min = 0.000001,
				i = _transformProps.length,
				v = vars,
				endRotations = {},
				transformOriginString = "transformOrigin",
				m1 = _getTransform(t, _cs, true, v.parseTransform),
				orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
				m2, copy, has3D, hasChange, dr, x, y, matrix, p;
			cssp._transform = m1;
			if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
				copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
				copy[_transformProp] = orig;
				copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
				copy.position = "absolute";
				_doc.body.appendChild(_tempDiv);
				m2 = _getTransform(_tempDiv, null, false);
				if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
					x = m1.xOrigin;
					y = m1.yOrigin;
					m2.x -= m1.xOffset;
					m2.y -= m1.yOffset;
					if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
						orig = {};
						_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
						x = orig.xOrigin;
						y = orig.yOrigin;
						m2.x -= orig.xOffset - m1.xOffset;
						m2.y -= orig.yOffset - m1.yOffset;
					}
					if (x || y) {
						matrix = _getMatrix(_tempDiv, true);
						m2.x -= x - (x * matrix[0] + y * matrix[2]);
						m2.y -= y - (x * matrix[1] + y * matrix[3]);
					}
				}
				_doc.body.removeChild(_tempDiv);
				if (!m2.perspective) {
					m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
				}
				if (v.xPercent != null) {
					m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
				}
				if (v.yPercent != null) {
					m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
				}
			} else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
				m2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
					scaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
					scaleZ:_parseVal(v.scaleZ, m1.scaleZ),
					x:_parseVal(v.x, m1.x),
					y:_parseVal(v.y, m1.y),
					z:_parseVal(v.z, m1.z),
					xPercent:_parseVal(v.xPercent, m1.xPercent),
					yPercent:_parseVal(v.yPercent, m1.yPercent),
					perspective:_parseVal(v.transformPerspective, m1.perspective)};
				dr = v.directionalRotation;
				if (dr != null) {
					if (typeof(dr) === "object") {
						for (copy in dr) {
							v[copy] = dr[copy];
						}
					} else {
						v.rotation = dr;
					}
				}
				if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
					m2.x = 0;
					m2.xPercent = _parseVal(v.x, m1.xPercent);
				}
				if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
					m2.y = 0;
					m2.yPercent = _parseVal(v.y, m1.yPercent);
				}

				m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation - m1.skewY, m1.rotation - m1.skewY, "rotation", endRotations); //see notes below about skewY for why we subtract it from rotation here
				if (_supports3D) {
					m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
					m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
				}
				m2.skewX = _parseAngle(v.skewX, m1.skewX - m1.skewY); //see notes below about skewY and why we subtract it from skewX here

				//note: for performance reasons, we combine all skewing into the skewX and rotation values, ignoring skewY but we must still record it so that we can discern how much of the overall skew is attributed to skewX vs. skewY. Otherwise, if the skewY would always act relative (tween skewY to 10deg, for example, multiple times and if we always combine things into skewX, we can't remember that skewY was 10 from last time). Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of -10 degrees.
				if ((m2.skewY = _parseAngle(v.skewY, m1.skewY))) {
					m2.skewX += m2.skewY;
					m2.rotation += m2.skewY;
				}
			}
			if (_supports3D && v.force3D != null) {
				m1.force3D = v.force3D;
				hasChange = true;
			}

			m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;

			has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
			if (!has3D && v.scale != null) {
				m2.scaleZ = 1; //no need to tween scaleZ.
			}

			while (--i > -1) {
				p = _transformProps[i];
				orig = m2[p] - m1[p];
				if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
					hasChange = true;
					pt = new CSSPropTween(m1, p, m1[p], orig, pt);
					if (p in endRotations) {
						pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
					}
					pt.xs0 = 0; //ensures the value stays numeric in setRatio()
					pt.plugin = plugin;
					cssp._overwriteProps.push(pt.n);
				}
			}

			orig = v.transformOrigin;
			if (m1.svg && (orig || v.svgOrigin)) {
				x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
				y = m1.yOffset;
				_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
				pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
				pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
				if (x !== m1.xOffset || y !== m1.yOffset) {
					pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
					pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
				}
				orig = _useSVGTransformAttr ? null : "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
			}
			if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
				if (_transformProp) {
					hasChange = true;
					p = _transformOriginProp;
					orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
					pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
					pt.b = style[p];
					pt.plugin = plugin;
					if (_supports3D) {
						copy = m1.zOrigin;
						orig = orig.split(" ");
						m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
						pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
						pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
						pt.b = copy;
						pt.xs0 = pt.e = m1.zOrigin;
					} else {
						pt.xs0 = pt.e = orig;
					}

					//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
				} else {
					_parsePosition(orig + "", m1);
				}
			}
			if (hasChange) {
				cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
			}
			if (swapFunc) {
				vars[parsingProp] = swapFunc;
			}
			return pt;
		}, prefix:true});

		_registerComplexSpecialProp("boxShadow", {defaultValue:"0px 0px 0px 0px #999", prefix:true, color:true, multi:true, keyword:"inset"});

		_registerComplexSpecialProp("borderRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
			e = this.format(e);
			var props = ["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],
				style = t.style,
				ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
			w = parseFloat(t.offsetWidth);
			h = parseFloat(t.offsetHeight);
			ea1 = e.split(" ");
			for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
				if (this.p.indexOf("border")) { //older browsers used a prefix
					props[i] = _checkPropPrefix(props[i]);
				}
				bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
				if (bs.indexOf(" ") !== -1) {
					bs2 = bs.split(" ");
					bs = bs2[0];
					bs2 = bs2[1];
				}
				es = es2 = ea1[i];
				bn = parseFloat(bs);
				bsfx = bs.substr((bn + "").length);
				rel = (es.charAt(1) === "=");
				if (rel) {
					en = parseInt(es.charAt(0)+"1", 10);
					es = es.substr(2);
					en *= parseFloat(es);
					esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
				} else {
					en = parseFloat(es);
					esfx = es.substr((en + "").length);
				}
				if (esfx === "") {
					esfx = _suffixMap[p] || bsfx;
				}
				if (esfx !== bsfx) {
					hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
					vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
					if (esfx === "%") {
						bs = (hn / w * 100) + "%";
						bs2 = (vn / h * 100) + "%";
					} else if (esfx === "em") {
						em = _convertToPixels(t, "borderLeft", 1, "em");
						bs = (hn / em) + "em";
						bs2 = (vn / em) + "em";
					} else {
						bs = hn + "px";
						bs2 = vn + "px";
					}
					if (rel) {
						es = (parseFloat(bs) + en) + esfx;
						es2 = (parseFloat(bs2) + en) + esfx;
					}
				}
				pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
			}
			return pt;
		}, prefix:true, formatter:_getFormatter("0px 0px 0px 0px", false, true)});
		_registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
			return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
		}, prefix:true, formatter:_getFormatter("0px 0px", false, true)});
		_registerComplexSpecialProp("backgroundPosition", {defaultValue:"0 0", parser:function(t, e, p, cssp, pt, plugin) {
			var bp = "background-position",
				cs = (_cs || _getComputedStyle(t, null)),
				bs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
				es = this.format(e),
				ba, ea, i, pct, overlap, src;
			if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
				src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
				if (src && src !== "none") {
					ba = bs.split(" ");
					ea = es.split(" ");
					_tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
					i = 2;
					while (--i > -1) {
						bs = ba[i];
						pct = (bs.indexOf("%") !== -1);
						if (pct !== (ea[i].indexOf("%") !== -1)) {
							overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
							ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
						}
					}
					bs = ba.join(" ");
				}
			}
			return this.parseComplex(t.style, bs, es, pt, plugin);
		}, formatter:_parsePosition});
		_registerComplexSpecialProp("backgroundSize", {defaultValue:"0 0", formatter:function(v) {
			v += ""; //ensure it's a string
			return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong).
		}});
		_registerComplexSpecialProp("perspective", {defaultValue:"0px", prefix:true});
		_registerComplexSpecialProp("perspectiveOrigin", {defaultValue:"50% 50%", prefix:true});
		_registerComplexSpecialProp("transformStyle", {prefix:true});
		_registerComplexSpecialProp("backfaceVisibility", {prefix:true});
		_registerComplexSpecialProp("userSelect", {prefix:true});
		_registerComplexSpecialProp("margin", {parser:_getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")});
		_registerComplexSpecialProp("padding", {parser:_getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")});
		_registerComplexSpecialProp("clip", {defaultValue:"rect(0px,0px,0px,0px)", parser:function(t, e, p, cssp, pt, plugin){
			var b, cs, delim;
			if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
				cs = t.currentStyle;
				delim = _ieVers < 8 ? " " : ",";
				b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
				e = this.format(e).split(",").join(delim);
			} else {
				b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
				e = this.format(e);
			}
			return this.parseComplex(t.style, b, e, pt, plugin);
		}});
		_registerComplexSpecialProp("textShadow", {defaultValue:"0px 0px 0px #999", color:true, multi:true});
		_registerComplexSpecialProp("autoRound,strictUnits", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)
		_registerComplexSpecialProp("border", {defaultValue:"0px solid #000", parser:function(t, e, p, cssp, pt, plugin) {
			var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
				end = this.format(e).split(" "),
				esfx = end[0].replace(_suffixExp, "");
			if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
				bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
			}
			return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
			}, color:true, formatter:function(v) {
				var a = v.split(" ");
				return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
			}});
		_registerComplexSpecialProp("borderWidth", {parser:_getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
		_registerComplexSpecialProp("float,cssFloat,styleFloat", {parser:function(t, e, p, cssp, pt, plugin) {
			var s = t.style,
				prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
			return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
		}});

		//opacity-related
		var _setIEOpacityRatio = function(v) {
				var t = this.t, //refers to the element's style property
					filters = t.filter || _getStyle(this.data, "filter") || "",
					val = (this.s + this.c * v) | 0,
					skip;
				if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
					if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
						t.removeAttribute("filter");
						skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
					} else {
						t.filter = filters.replace(_alphaFilterExp, "");
						skip = true;
					}
				}
				if (!skip) {
					if (this.xn1) {
						t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
					}
					if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
						if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
							t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
						}
					} else {
						t.filter = filters.replace(_opacityExp, "opacity=" + val);
					}
				}
			};
		_registerComplexSpecialProp("opacity,alpha,autoAlpha", {defaultValue:"1", parser:function(t, e, p, cssp, pt, plugin) {
			var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
				style = t.style,
				isAutoAlpha = (p === "autoAlpha");
			if (typeof(e) === "string" && e.charAt(1) === "=") {
				e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
			}
			if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
				b = 0;
			}
			if (_supportsOpacity) {
				pt = new CSSPropTween(style, "opacity", b, e - b, pt);
			} else {
				pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
				pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
				style.zoom = 1; //helps correct an IE issue.
				pt.type = 2;
				pt.b = "alpha(opacity=" + pt.s + ")";
				pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
				pt.data = t;
				pt.plugin = plugin;
				pt.setRatio = _setIEOpacityRatio;
			}
			if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
				pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
				pt.xs0 = "inherit";
				cssp._overwriteProps.push(pt.n);
				cssp._overwriteProps.push(p);
			}
			return pt;
		}});


		var _removeProp = function(s, p) {
				if (p) {
					if (s.removeProperty) {
						if (p.substr(0,2) === "ms" || p.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
							p = "-" + p;
						}
						s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
					} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
						s.removeAttribute(p);
					}
				}
			},
			_setClassNameRatio = function(v) {
				this.t._gsClassPT = this;
				if (v === 1 || v === 0) {
					this.t.setAttribute("class", (v === 0) ? this.b : this.e);
					var mpt = this.data, //first MiniPropTween
						s = this.t.style;
					while (mpt) {
						if (!mpt.v) {
							_removeProp(s, mpt.p);
						} else {
							s[mpt.p] = mpt.v;
						}
						mpt = mpt._next;
					}
					if (v === 1 && this.t._gsClassPT === this) {
						this.t._gsClassPT = null;
					}
				} else if (this.t.getAttribute("class") !== this.e) {
					this.t.setAttribute("class", this.e);
				}
			};
		_registerComplexSpecialProp("className", {parser:function(t, e, p, cssp, pt, plugin, vars) {
			var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
				cssText = t.style.cssText,
				difData, bs, cnpt, cnptLookup, mpt;
			pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClassNameRatio;
			pt.pr = -11;
			_hasPriority = true;
			pt.b = b;
			bs = _getAllStyles(t, _cs);
			//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
			cnpt = t._gsClassPT;
			if (cnpt) {
				cnptLookup = {};
				mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
				while (mpt) {
					cnptLookup[mpt.p] = 1;
					mpt = mpt._next;
				}
				cnpt.setRatio(1);
			}
			t._gsClassPT = pt;
			pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
			t.setAttribute("class", pt.e);
			difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
			t.setAttribute("class", b);
			pt.data = difData.firstMPT;
			t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
			pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
			return pt;
		}});


		var _setClearPropsRatio = function(v) {
			if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
				var s = this.t.style,
					transformParse = _specialProps.transform.parse,
					a, p, i, clearTransform, transform;
				if (this.e === "all") {
					s.cssText = "";
					clearTransform = true;
				} else {
					a = this.e.split(" ").join("").split(",");
					i = a.length;
					while (--i > -1) {
						p = a[i];
						if (_specialProps[p]) {
							if (_specialProps[p].parse === transformParse) {
								clearTransform = true;
							} else {
								p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
							}
						}
						_removeProp(s, p);
					}
				}
				if (clearTransform) {
					_removeProp(s, _transformProp);
					transform = this.t._gsTransform;
					if (transform) {
						if (transform.svg) {
							this.t.removeAttribute("data-svg-origin");
							this.t.removeAttribute("transform");
						}
						delete this.t._gsTransform;
					}
				}

			}
		};
		_registerComplexSpecialProp("clearProps", {parser:function(t, e, p, cssp, pt) {
			pt = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClearPropsRatio;
			pt.e = e;
			pt.pr = -10;
			pt.data = cssp._tween;
			_hasPriority = true;
			return pt;
		}});

		p = "bezier,throwProps,physicsProps,physics2D".split(",");
		i = p.length;
		while (i--) {
			_registerPluginProp(p[i]);
		}








		p = CSSPlugin.prototype;
		p._firstPT = p._lastParsedTransform = p._transform = null;

		//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
		p._onInitTween = function(target, vars, tween, index) {
			if (!target.nodeType) { //css is only for dom elements
				return false;
			}
			this._target = _target = target;
			this._tween = tween;
			this._vars = vars;
			_index = index;
			_autoRound = vars.autoRound;
			_hasPriority = false;
			_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
			_cs = _getComputedStyle(target, "");
			_overwriteProps = this._overwriteProps;
			var style = target.style,
				v, pt, pt2, first, last, next, zIndex, tpt, threeD;
			if (_reqSafariFix) if (style.zIndex === "") {
				v = _getStyle(target, "zIndex", _cs);
				if (v === "auto" || v === "") {
					//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
					this._addLazySet(style, "zIndex", 0);
				}
			}

			if (typeof(vars) === "string") {
				first = style.cssText;
				v = _getAllStyles(target, _cs);
				style.cssText = first + ";" + vars;
				v = _cssDif(target, v, _getAllStyles(target)).difs;
				if (!_supportsOpacity && _opacityValExp.test(vars)) {
					v.opacity = parseFloat( RegExp.$1 );
				}
				vars = v;
				style.cssText = first;
			}

			if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
				this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
			} else {
				this._firstPT = pt = this.parse(target, vars, null);
			}

			if (this._transformType) {
				threeD = (this._transformType === 3);
				if (!_transformProp) {
					style.zoom = 1; //helps correct an IE issue.
				} else if (_isSafari) {
					_reqSafariFix = true;
					//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
					if (style.zIndex === "") {
						zIndex = _getStyle(target, "zIndex", _cs);
						if (zIndex === "auto" || zIndex === "") {
							this._addLazySet(style, "zIndex", 0);
						}
					}
					//Setting WebkitBackfaceVisibility corrects 3 bugs:
					// 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
					// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
					// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
					//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
					if (_isSafariLT6) {
						this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
					}
				}
				pt2 = pt;
				while (pt2 && pt2._next) {
					pt2 = pt2._next;
				}
				tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
				this._linkCSSP(tpt, null, pt2);
				tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
				tpt.data = this._transform || _getTransform(target, _cs, true);
				tpt.tween = tween;
				tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
				_overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
			}

			if (_hasPriority) {
				//reorders the linked list in order of pr (priority)
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				this._firstPT = first;
			}
			return true;
		};


		p.parse = function(target, vars, pt, plugin) {
			var style = target.style,
				p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
			for (p in vars) {
				es = vars[p]; //ending value string
				if (typeof(es) === "function") {
					es = es(_index, _target);
				}
				sp = _specialProps[p]; //SpecialProp lookup.
				if (sp) {
					pt = sp.parse(target, es, p, this, pt, plugin, vars);

				} else {
					bs = _getStyle(target, p, _cs) + "";
					isStr = (typeof(es) === "string");
					if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
						if (!isStr) {
							es = _parseColor(es);
							es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
						}
						pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

					} else if (isStr && _complexExp.test(es)) {
						pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

					} else {
						bn = parseFloat(bs);
						bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

						if (bs === "" || bs === "auto") {
							if (p === "width" || p === "height") {
								bn = _getDimension(target, p, _cs);
								bsfx = "px";
							} else if (p === "left" || p === "top") {
								bn = _calculateOffset(target, p, _cs);
								bsfx = "px";
							} else {
								bn = (p !== "opacity") ? 0 : 1;
								bsfx = "";
							}
						}

						rel = (isStr && es.charAt(1) === "=");
						if (rel) {
							en = parseInt(es.charAt(0) + "1", 10);
							es = es.substr(2);
							en *= parseFloat(es);
							esfx = es.replace(_suffixExp, "");
						} else {
							en = parseFloat(es);
							esfx = isStr ? es.replace(_suffixExp, "") : "";
						}

						if (esfx === "") {
							esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
						}

						es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.

						//if the beginning/ending suffixes don't match, normalize them...
						if (bsfx !== esfx) if (esfx !== "") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
							bn = _convertToPixels(target, p, bn, bsfx);
							if (esfx === "%") {
								bn /= _convertToPixels(target, p, 100, "%") / 100;
								if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
									bs = bn + "%";
								}

							} else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
								bn /= _convertToPixels(target, p, 1, esfx);

							//otherwise convert to pixels.
							} else if (esfx !== "px") {
								en = _convertToPixels(target, p, en, esfx);
								esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
							}
							if (rel) if (en || en === 0) {
								es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
							}
						}

						if (rel) {
							en += bn;
						}

						if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
							pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
							pt.xs0 = esfx;
							//DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
						} else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
							_log("invalid " + p + " tween value: " + vars[p]);
						} else {
							pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
							pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
							//DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
						}
					}
				}
				if (plugin) if (pt && !pt.plugin) {
					pt.plugin = plugin;
				}
			}
			return pt;
		};


		//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
		p.setRatio = function(v) {
			var pt = this._firstPT,
				min = 0.000001,
				val, str, i;
			//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
			if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
				while (pt) {
					if (pt.type !== 2) {
						if (pt.r && pt.type !== -1) {
							val = Math.round(pt.s + pt.c);
							if (!pt.type) {
								pt.t[pt.p] = val + pt.xs0;
							} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
								i = pt.l;
								str = pt.xs0 + val + pt.xs1;
								for (i = 1; i < pt.l; i++) {
									str += pt["xn"+i] + pt["xs"+(i+1)];
								}
								pt.t[pt.p] = str;
							}
						} else {
							pt.t[pt.p] = pt.e;
						}
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
				while (pt) {
					val = pt.c * v + pt.s;
					if (pt.r) {
						val = Math.round(val);
					} else if (val < min) if (val > -min) {
						val = 0;
					}
					if (!pt.type) {
						pt.t[pt.p] = val + pt.xs0;
					} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
						i = pt.l;
						if (i === 2) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
						} else if (i === 3) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
						} else if (i === 4) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
						} else if (i === 5) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
						} else {
							str = pt.xs0 + val + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt.t[pt.p] = str;
						}

					} else if (pt.type === -1) { //non-tweening value
						pt.t[pt.p] = pt.xs0;

					} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
			} else {
				while (pt) {
					if (pt.type !== 2) {
						pt.t[pt.p] = pt.b;
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}
			}
		};

		/**
		 * @private
		 * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
		 * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
		 * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
		 * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
		 * doesn't have any transform-related properties of its own. You can call this method as many times as you
		 * want and it won't create duplicate CSSPropTweens.
		 *
		 * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
		 */
		p._enableTransforms = function(threeD) {
			this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
			this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
		};

		var lazySet = function(v) {
			this.t[this.p] = this.e;
			this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
		};
		/** @private Gives us a way to set a value on the first render (and only the first render). **/
		p._addLazySet = function(t, p, v) {
			var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
			pt.e = v;
			pt.setRatio = lazySet;
			pt.data = this;
		};

		/** @private **/
		p._linkCSSP = function(pt, next, prev, remove) {
			if (pt) {
				if (next) {
					next._prev = pt;
				}
				if (pt._next) {
					pt._next._prev = pt._prev;
				}
				if (pt._prev) {
					pt._prev._next = pt._next;
				} else if (this._firstPT === pt) {
					this._firstPT = pt._next;
					remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
				}
				if (prev) {
					prev._next = pt;
				} else if (!remove && this._firstPT === null) {
					this._firstPT = pt;
				}
				pt._next = next;
				pt._prev = prev;
			}
			return pt;
		};

		p._mod = function(lookup) {
			var pt = this._firstPT;
			while (pt) {
				if (typeof(lookup[pt.p]) === "function" && lookup[pt.p] === Math.round) { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally..
					pt.r = 1;
				}
				pt = pt._next;
			}
		};

		//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
		p._kill = function(lookup) {
			var copy = lookup,
				pt, p, xfirst;
			if (lookup.autoAlpha || lookup.alpha) {
				copy = {};
				for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
					copy[p] = lookup[p];
				}
				copy.opacity = 1;
				if (copy.autoAlpha) {
					copy.visibility = 1;
				}
			}
			if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
				xfirst = pt.xfirst;
				if (xfirst && xfirst._prev) {
					this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
				} else if (xfirst === this._firstPT) {
					this._firstPT = pt._next;
				}
				if (pt._next) {
					this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
				}
				this._classNamePT = null;
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
					pt.plugin._kill(lookup);
					p = pt.plugin;
				}
				pt = pt._next;
			}
			return TweenPlugin.prototype._kill.call(this, copy);
		};



		//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
		var _getChildStyles = function(e, props, targets) {
				var children, i, child, type;
				if (e.slice) {
					i = e.length;
					while (--i > -1) {
						_getChildStyles(e[i], props, targets);
					}
					return;
				}
				children = e.childNodes;
				i = children.length;
				while (--i > -1) {
					child = children[i];
					type = child.type;
					if (child.style) {
						props.push(_getAllStyles(child));
						if (targets) {
							targets.push(child);
						}
					}
					if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
						_getChildStyles(child, props, targets);
					}
				}
			};

		/**
		 * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
		 * and then compares the style properties of all the target's child elements at the tween's start and end, and
		 * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
		 * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
		 * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
		 * is because it creates entirely new tweens that may have completely different targets than the original tween,
		 * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
		 * and it would create other problems. For example:
		 *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
		 *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
		 *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
		 *
		 * @param {Object} target object to be tweened
		 * @param {number} Duration in seconds (or frames for frames-based tweens)
		 * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
		 * @return {Array} An array of TweenLite instances
		 */
		CSSPlugin.cascadeTo = function(target, duration, vars) {
			var tween = TweenLite.to(target, duration, vars),
				results = [tween],
				b = [],
				e = [],
				targets = [],
				_reservedProps = TweenLite._internals.reservedProps,
				i, difs, p, from;
			target = tween._targets || tween.target;
			_getChildStyles(target, b, targets);
			tween.render(duration, true, true);
			_getChildStyles(target, e);
			tween.render(0, true, true);
			tween._enabled(true);
			i = targets.length;
			while (--i > -1) {
				difs = _cssDif(targets[i], b[i], e[i]);
				if (difs.firstMPT) {
					difs = difs.difs;
					for (p in vars) {
						if (_reservedProps[p]) {
							difs[p] = vars[p];
						}
					}
					from = {};
					for (p in difs) {
						from[p] = b[i][p];
					}
					results.push(TweenLite.fromTo(targets[i], duration, from, difs));
				}
			}
			return results;
		};

		TweenPlugin.activate([CSSPlugin]);
		return CSSPlugin;

	}, true);

	
	
	
	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * RoundPropsPlugin
 * ----------------------------------------------------------------
 */
	(function() {

		var RoundPropsPlugin = _gsScope._gsDefine.plugin({
				propName: "roundProps",
				version: "1.6.0",
				priority: -1,
				API: 2,

				//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
				init: function(target, value, tween) {
					this._tween = tween;
					return true;
				}

			}),
			_roundLinkedList = function(node) {
				while (node) {
					if (!node.f && !node.blob) {
						node.m = Math.round;
					}
					node = node._next;
				}
			},
			p = RoundPropsPlugin.prototype;

		p._onInitAllProps = function() {
			var tween = this._tween,
				rp = (tween.vars.roundProps.join) ? tween.vars.roundProps : tween.vars.roundProps.split(","),
				i = rp.length,
				lookup = {},
				rpt = tween._propLookup.roundProps,
				prop, pt, next;
			while (--i > -1) {
				lookup[rp[i]] = Math.round;
			}
			i = rp.length;
			while (--i > -1) {
				prop = rp[i];
				pt = tween._firstPT;
				while (pt) {
					next = pt._next; //record here, because it may get removed
					if (pt.pg) {
						pt.t._mod(lookup);
					} else if (pt.n === prop) {
						if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
							_roundLinkedList(pt.t._firstPT);
						} else {
							this._add(pt.t, prop, pt.s, pt.c);
							//remove from linked list
							if (next) {
								next._prev = pt._prev;
							}
							if (pt._prev) {
								pt._prev._next = next;
							} else if (tween._firstPT === pt) {
								tween._firstPT = next;
							}
							pt._next = pt._prev = null;
							tween._propLookup[prop] = rpt;
						}
					}
					pt = next;
				}
			}
			return false;
		};

		p._add = function(target, p, s, c) {
			this._addTween(target, p, s, s + c, p, Math.round);
			this._overwriteProps.push(p);
		};

	}());










/*
 * ----------------------------------------------------------------
 * AttrPlugin
 * ----------------------------------------------------------------
 */

	(function() {

		_gsScope._gsDefine.plugin({
			propName: "attr",
			API: 2,
			version: "0.6.0",

			//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
			init: function(target, value, tween, index) {
				var p, end;
				if (typeof(target.setAttribute) !== "function") {
					return false;
				}
				for (p in value) {
					end = value[p];
					if (typeof(end) === "function") {
						end = end(index, target);
					}
					this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
					this._overwriteProps.push(p);
				}
				return true;
			}

		});

	}());










/*
 * ----------------------------------------------------------------
 * DirectionalRotationPlugin
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine.plugin({
		propName: "directionalRotation",
		version: "0.3.0",
		API: 2,

		//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
		init: function(target, value, tween, index) {
			if (typeof(value) !== "object") {
				value = {rotation:value};
			}
			this.finals = {};
			var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
				min = 0.000001,
				p, v, start, end, dif, split;
			for (p in value) {
				if (p !== "useRadians") {
					end = value[p];
					if (typeof(end) === "function") {
						end = end(index, target);
					}
					split = (end + "").split("_");
					v = split[0];
					start = parseFloat( (typeof(target[p]) !== "function") ? target[p] : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]() );
					end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
					dif = end - start;
					if (split.length) {
						v = split.join("_");
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = (dif < 0) ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						}
					}
					if (dif > min || dif < -min) {
						this._addTween(target, p, start, start + dif, p);
						this._overwriteProps.push(p);
					}
				}
			}
			return true;
		},

		//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
		set: function(ratio) {
			var pt;
			if (ratio !== 1) {
				this._super.setRatio.call(this, ratio);
			} else {
				pt = this._firstPT;
				while (pt) {
					if (pt.f) {
						pt.t[pt.p](this.finals[pt.p]);
					} else {
						pt.t[pt.p] = this.finals[pt.p];
					}
					pt = pt._next;
				}
			}
		}

	})._autoCSS = true;







	
	
	
	
/*
 * ----------------------------------------------------------------
 * EasePack
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {
		
		var w = (_gsScope.GreenSockGlobals || _gsScope),
			gs = w.com.greensock,
			_2PI = Math.PI * 2,
			_HALF_PI = Math.PI / 2,
			_class = gs._class,
			_create = function(n, f) {
				var C = _class("easing." + n, function(){}, true),
					p = C.prototype = new Ease();
				p.constructor = C;
				p.getRatio = f;
				return C;
			},
			_easeReg = Ease.register || function(){}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
			_wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
				var C = _class("easing."+name, {
					easeOut:new EaseOut(),
					easeIn:new EaseIn(),
					easeInOut:new EaseInOut()
				}, true);
				_easeReg(C, name);
				return C;
			},
			EasePoint = function(time, value, next) {
				this.t = time;
				this.v = value;
				if (next) {
					this.next = next;
					next.prev = this;
					this.c = next.v - value;
					this.gap = next.t - time;
				}
			},

			//Back
			_createBack = function(n, f) {
				var C = _class("easing." + n, function(overshoot) {
						this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
						this._p2 = this._p1 * 1.525;
					}, true),
					p = C.prototype = new Ease();
				p.constructor = C;
				p.getRatio = f;
				p.config = function(overshoot) {
					return new C(overshoot);
				};
				return C;
			},

			Back = _wrap("Back",
				_createBack("BackOut", function(p) {
					return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
				}),
				_createBack("BackIn", function(p) {
					return p * p * ((this._p1 + 1) * p - this._p1);
				}),
				_createBack("BackInOut", function(p) {
					return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
				})
			),


			//SlowMo
			SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
				power = (power || power === 0) ? power : 0.7;
				if (linearRatio == null) {
					linearRatio = 0.7;
				} else if (linearRatio > 1) {
					linearRatio = 1;
				}
				this._p = (linearRatio !== 1) ? power : 0;
				this._p1 = (1 - linearRatio) / 2;
				this._p2 = linearRatio;
				this._p3 = this._p1 + this._p2;
				this._calcEnd = (yoyoMode === true);
			}, true),
			p = SlowMo.prototype = new Ease(),
			SteppedEase, RoughEase, _createElastic;

		p.constructor = SlowMo;
		p.getRatio = function(p) {
			var r = p + (0.5 - p) * this._p;
			if (p < this._p1) {
				return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
			} else if (p > this._p3) {
				return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p);
			}
			return this._calcEnd ? 1 : r;
		};
		SlowMo.ease = new SlowMo(0.7, 0.7);

		p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
			return new SlowMo(linearRatio, power, yoyoMode);
		};


		//SteppedEase
		SteppedEase = _class("easing.SteppedEase", function(steps) {
				steps = steps || 1;
				this._p1 = 1 / steps;
				this._p2 = steps + 1;
			}, true);
		p = SteppedEase.prototype = new Ease();
		p.constructor = SteppedEase;
		p.getRatio = function(p) {
			if (p < 0) {
				p = 0;
			} else if (p >= 1) {
				p = 0.999999999;
			}
			return ((this._p2 * p) >> 0) * this._p1;
		};
		p.config = SteppedEase.config = function(steps) {
			return new SteppedEase(steps);
		};


		//RoughEase
		RoughEase = _class("easing.RoughEase", function(vars) {
			vars = vars || {};
			var taper = vars.taper || "none",
				a = [],
				cnt = 0,
				points = (vars.points || 20) | 0,
				i = points,
				randomize = (vars.randomize !== false),
				clamp = (vars.clamp === true),
				template = (vars.template instanceof Ease) ? vars.template : null,
				strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
				x, y, bump, invX, obj, pnt;
			while (--i > -1) {
				x = randomize ? Math.random() : (1 / points) * i;
				y = template ? template.getRatio(x) : x;
				if (taper === "none") {
					bump = strength;
				} else if (taper === "out") {
					invX = 1 - x;
					bump = invX * invX * strength;
				} else if (taper === "in") {
					bump = x * x * strength;
				} else if (x < 0.5) {  //"both" (start)
					invX = x * 2;
					bump = invX * invX * 0.5 * strength;
				} else {				//"both" (end)
					invX = (1 - x) * 2;
					bump = invX * invX * 0.5 * strength;
				}
				if (randomize) {
					y += (Math.random() * bump) - (bump * 0.5);
				} else if (i % 2) {
					y += bump * 0.5;
				} else {
					y -= bump * 0.5;
				}
				if (clamp) {
					if (y > 1) {
						y = 1;
					} else if (y < 0) {
						y = 0;
					}
				}
				a[cnt++] = {x:x, y:y};
			}
			a.sort(function(a, b) {
				return a.x - b.x;
			});

			pnt = new EasePoint(1, 1, null);
			i = points;
			while (--i > -1) {
				obj = a[i];
				pnt = new EasePoint(obj.x, obj.y, pnt);
			}

			this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
		}, true);
		p = RoughEase.prototype = new Ease();
		p.constructor = RoughEase;
		p.getRatio = function(p) {
			var pnt = this._prev;
			if (p > pnt.t) {
				while (pnt.next && p >= pnt.t) {
					pnt = pnt.next;
				}
				pnt = pnt.prev;
			} else {
				while (pnt.prev && p <= pnt.t) {
					pnt = pnt.prev;
				}
			}
			this._prev = pnt;
			return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
		};
		p.config = function(vars) {
			return new RoughEase(vars);
		};
		RoughEase.ease = new RoughEase();


		//Bounce
		_wrap("Bounce",
			_create("BounceOut", function(p) {
				if (p < 1 / 2.75) {
					return 7.5625 * p * p;
				} else if (p < 2 / 2.75) {
					return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
				} else if (p < 2.5 / 2.75) {
					return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
				}
				return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
			}),
			_create("BounceIn", function(p) {
				if ((p = 1 - p) < 1 / 2.75) {
					return 1 - (7.5625 * p * p);
				} else if (p < 2 / 2.75) {
					return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
				} else if (p < 2.5 / 2.75) {
					return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
				}
				return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
			}),
			_create("BounceInOut", function(p) {
				var invert = (p < 0.5);
				if (invert) {
					p = 1 - (p * 2);
				} else {
					p = (p * 2) - 1;
				}
				if (p < 1 / 2.75) {
					p = 7.5625 * p * p;
				} else if (p < 2 / 2.75) {
					p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
				} else if (p < 2.5 / 2.75) {
					p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
				} else {
					p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
				}
				return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
			})
		);


		//CIRC
		_wrap("Circ",
			_create("CircOut", function(p) {
				return Math.sqrt(1 - (p = p - 1) * p);
			}),
			_create("CircIn", function(p) {
				return -(Math.sqrt(1 - (p * p)) - 1);
			}),
			_create("CircInOut", function(p) {
				return ((p*=2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
			})
		);


		//Elastic
		_createElastic = function(n, f, def) {
			var C = _class("easing." + n, function(amplitude, period) {
					this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
					this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
					this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
					this._p2 = _2PI / this._p2; //precalculate to optimize
				}, true),
				p = C.prototype = new Ease();
			p.constructor = C;
			p.getRatio = f;
			p.config = function(amplitude, period) {
				return new C(amplitude, period);
			};
			return C;
		};
		_wrap("Elastic",
			_createElastic("ElasticOut", function(p) {
				return this._p1 * Math.pow(2, -10 * p) * Math.sin( (p - this._p3) * this._p2 ) + 1;
			}, 0.3),
			_createElastic("ElasticIn", function(p) {
				return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2 ));
			}, 0.3),
			_createElastic("ElasticInOut", function(p) {
				return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 *(p -= 1)) * Math.sin( (p - this._p3) * this._p2 ) * 0.5 + 1;
			}, 0.45)
		);


		//Expo
		_wrap("Expo",
			_create("ExpoOut", function(p) {
				return 1 - Math.pow(2, -10 * p);
			}),
			_create("ExpoIn", function(p) {
				return Math.pow(2, 10 * (p - 1)) - 0.001;
			}),
			_create("ExpoInOut", function(p) {
				return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
			})
		);


		//Sine
		_wrap("Sine",
			_create("SineOut", function(p) {
				return Math.sin(p * _HALF_PI);
			}),
			_create("SineIn", function(p) {
				return -Math.cos(p * _HALF_PI) + 1;
			}),
			_create("SineInOut", function(p) {
				return -0.5 * (Math.cos(Math.PI * p) - 1);
			})
		);

		_class("easing.EaseLookup", {
				find:function(s) {
					return Ease.map[s];
				}
			}, true);

		//register the non-standard eases
		_easeReg(w.SlowMo, "SlowMo", "ease,");
		_easeReg(RoughEase, "RoughEase", "ease,");
		_easeReg(SteppedEase, "SteppedEase", "ease,");

		return Back;
		
	}, true);


});

if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); } //necessary in case TweenLite was already loaded separately.











/*
 * ----------------------------------------------------------------
 * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
 * ----------------------------------------------------------------
 */
(function(window, moduleName) {

		"use strict";
		var _exports = {},
			_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
		if (_globals.TweenLite) {
			return; //in case the core set of classes is already loaded, don't instantiate twice.
		}
		var _namespace = function(ns) {
				var a = ns.split("."),
					p = _globals, i;
				for (i = 0; i < a.length; i++) {
					p[a[i]] = p = p[a[i]] || {};
				}
				return p;
			},
			gs = _namespace("com.greensock"),
			_tinyNum = 0.0000000001,
			_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++])) {}
				return b;
			},
			_emptyFunc = function() {},
			_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
				var toString = Object.prototype.toString,
					array = toString.call([]);
				return function(obj) {
					return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
				};
			}()),
			a, i, p, _ticker, _tickerActive,
			_defLookup = {},

			/**
			 * @constructor
			 * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
			 * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
			 * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
			 * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
			 *
			 * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
			 * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
			 * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
			 * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
			 * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
			 * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
			 * sandbox the banner one like:
			 *
			 * <script>
			 *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
			 * </script>
			 * <script src="js/greensock/v1.7/TweenMax.js"></script>
			 * <script>
			 *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
			 * </script>
			 * <script src="js/greensock/v1.6/TweenMax.js"></script>
			 * <script>
			 *     gs.TweenLite.to(...); //would use v1.7
			 *     TweenLite.to(...); //would use v1.6
			 * </script>
			 *
			 * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
			 * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
			 * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
			 * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
			 */
			Definition = function(ns, dependencies, func, global) {
				this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
				_defLookup[ns] = this;
				this.gsClass = null;
				this.func = func;
				var _classes = [];
				this.check = function(init) {
					var i = dependencies.length,
						missing = i,
						cur, a, n, cl, hasModule;
					while (--i > -1) {
						if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
							_classes[i] = cur.gsClass;
							missing--;
						} else if (init) {
							cur.sc.push(this);
						}
					}
					if (missing === 0 && func) {
						a = ("com.greensock." + ns).split(".");
						n = a.pop();
						cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

						//exports to multiple environments
						if (global) {
							_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
							hasModule = (typeof(module) !== "undefined" && module.exports);
							if (!hasModule && typeof(define) === "function" && define.amd){ //AMD
								define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() { return cl; });
							} else if (hasModule){ //node
								if (ns === moduleName) {
									module.exports = _exports[moduleName] = cl;
									for (i in _exports) {
										cl[i] = _exports[i];
									}
								} else if (_exports[moduleName]) {
									_exports[moduleName][n] = cl;
								}
							}
						}
						for (i = 0; i < this.sc.length; i++) {
							this.sc[i].check();
						}
					}
				};
				this.check(true);
			},

			//used to create Definition instances (which basically registers a class that has dependencies).
			_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
				return new Definition(ns, dependencies, func, global);
			},

			//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
			_class = gs._class = function(ns, func, global) {
				func = func || function() {};
				_gsDefine(ns, [], function(){ return func; }, global);
				return func;
			};

		_gsDefine.globals = _globals;



/*
 * ----------------------------------------------------------------
 * Ease
 * ----------------------------------------------------------------
 */
		var _baseParams = [0, 0, 1, 1],
			_blankArray = [],
			Ease = _class("easing.Ease", function(func, extraParams, type, power) {
				this._func = func;
				this._type = type || 0;
				this._power = power || 0;
				this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
			}, true),
			_easeMap = Ease.map = {},
			_easeReg = Ease.register = function(ease, names, types, create) {
				var na = names.split(","),
					i = na.length,
					ta = (types || "easeIn,easeOut,easeInOut").split(","),
					e, name, j, type;
				while (--i > -1) {
					name = na[i];
					e = create ? _class("easing."+name, null, true) : gs.easing[name] || {};
					j = ta.length;
					while (--j > -1) {
						type = ta[j];
						_easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
					}
				}
			};

		p = Ease.prototype;
		p._calcEnd = false;
		p.getRatio = function(p) {
			if (this._func) {
				this._params[0] = p;
				return this._func.apply(null, this._params);
			}
			var t = this._type,
				pw = this._power,
				r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
			if (pw === 1) {
				r *= r;
			} else if (pw === 2) {
				r *= r * r;
			} else if (pw === 3) {
				r *= r * r * r;
			} else if (pw === 4) {
				r *= r * r * r * r;
			}
			return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
		};

		//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
		a = ["Linear","Quad","Cubic","Quart","Quint,Strong"];
		i = a.length;
		while (--i > -1) {
			p = a[i]+",Power"+i;
			_easeReg(new Ease(null,null,1,i), p, "easeOut", true);
			_easeReg(new Ease(null,null,2,i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
			_easeReg(new Ease(null,null,3,i), p, "easeInOut");
		}
		_easeMap.linear = gs.easing.Linear.easeIn;
		_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


/*
 * ----------------------------------------------------------------
 * EventDispatcher
 * ----------------------------------------------------------------
 */
		var EventDispatcher = _class("events.EventDispatcher", function(target) {
			this._listeners = {};
			this._eventTarget = target || this;
		});
		p = EventDispatcher.prototype;

		p.addEventListener = function(type, callback, scope, useParam, priority) {
			priority = priority || 0;
			var list = this._listeners[type],
				index = 0,
				listener, i;
			if (this === _ticker && !_tickerActive) {
				_ticker.wake();
			}
			if (list == null) {
				this._listeners[type] = list = [];
			}
			i = list.length;
			while (--i > -1) {
				listener = list[i];
				if (listener.c === callback && listener.s === scope) {
					list.splice(i, 1);
				} else if (index === 0 && listener.pr < priority) {
					index = i + 1;
				}
			}
			list.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});
		};

		p.removeEventListener = function(type, callback) {
			var list = this._listeners[type], i;
			if (list) {
				i = list.length;
				while (--i > -1) {
					if (list[i].c === callback) {
						list.splice(i, 1);
						return;
					}
				}
			}
		};

		p.dispatchEvent = function(type) {
			var list = this._listeners[type],
				i, t, listener;
			if (list) {
				i = list.length;
				if (i > 1) {
					list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
				}
				t = this._eventTarget;
				while (--i > -1) {
					listener = list[i];
					if (listener) {
						if (listener.up) {
							listener.c.call(listener.s || t, {type:type, target:t});
						} else {
							listener.c.call(listener.s || t);
						}
					}
				}
			}
		};


/*
 * ----------------------------------------------------------------
 * Ticker
 * ----------------------------------------------------------------
 */
 		var _reqAnimFrame = window.requestAnimationFrame,
			_cancelAnimFrame = window.cancelAnimationFrame,
			_getTime = Date.now || function() {return new Date().getTime();},
			_lastUpdate = _getTime();

		//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
		a = ["ms","moz","webkit","o"];
		i = a.length;
		while (--i > -1 && !_reqAnimFrame) {
			_reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
			_cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
		}

		_class("Ticker", function(fps, useRAF) {
			var _self = this,
				_startTime = _getTime(),
				_useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
				_lagThreshold = 500,
				_adjustedLag = 33,
				_tickWord = "tick", //helps reduce gc burden
				_fps, _req, _id, _gap, _nextTime,
				_tick = function(manual) {
					var elapsed = _getTime() - _lastUpdate,
						overlap, dispatch;
					if (elapsed > _lagThreshold) {
						_startTime += elapsed - _adjustedLag;
					}
					_lastUpdate += elapsed;
					_self.time = (_lastUpdate - _startTime) / 1000;
					overlap = _self.time - _nextTime;
					if (!_fps || overlap > 0 || manual === true) {
						_self.frame++;
						_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
						dispatch = true;
					}
					if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
						_id = _req(_tick);
					}
					if (dispatch) {
						_self.dispatchEvent(_tickWord);
					}
				};

			EventDispatcher.call(_self);
			_self.time = _self.frame = 0;
			_self.tick = function() {
				_tick(true);
			};

			_self.lagSmoothing = function(threshold, adjustedLag) {
				_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
				_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
			};

			_self.sleep = function() {
				if (_id == null) {
					return;
				}
				if (!_useRAF || !_cancelAnimFrame) {
					clearTimeout(_id);
				} else {
					_cancelAnimFrame(_id);
				}
				_req = _emptyFunc;
				_id = null;
				if (_self === _ticker) {
					_tickerActive = false;
				}
			};

			_self.wake = function(seamless) {
				if (_id !== null) {
					_self.sleep();
				} else if (seamless) {
					_startTime += -_lastUpdate + (_lastUpdate = _getTime());
				} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
					_lastUpdate = _getTime() - _lagThreshold + 5;
				}
				_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
				if (_self === _ticker) {
					_tickerActive = true;
				}
				_tick(2);
			};

			_self.fps = function(value) {
				if (!arguments.length) {
					return _fps;
				}
				_fps = value;
				_gap = 1 / (_fps || 60);
				_nextTime = this.time + _gap;
				_self.wake();
			};

			_self.useRAF = function(value) {
				if (!arguments.length) {
					return _useRAF;
				}
				_self.sleep();
				_useRAF = value;
				_self.fps(_fps);
			};
			_self.fps(fps);

			//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
			setTimeout(function() {
				if (_useRAF === "auto" && _self.frame < 5 && document.visibilityState !== "hidden") {
					_self.useRAF(false);
				}
			}, 1500);
		});

		p = gs.Ticker.prototype = new gs.events.EventDispatcher();
		p.constructor = gs.Ticker;


/*
 * ----------------------------------------------------------------
 * Animation
 * ----------------------------------------------------------------
 */
		var Animation = _class("core.Animation", function(duration, vars) {
				this.vars = vars = vars || {};
				this._duration = this._totalDuration = duration || 0;
				this._delay = Number(vars.delay) || 0;
				this._timeScale = 1;
				this._active = (vars.immediateRender === true);
				this.data = vars.data;
				this._reversed = (vars.reversed === true);

				if (!_rootTimeline) {
					return;
				}
				if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
					_ticker.wake();
				}

				var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
				tl.add(this, tl._time);

				if (this.vars.paused) {
					this.paused(true);
				}
			});

		_ticker = Animation.ticker = new gs.Ticker();
		p = Animation.prototype;
		p._dirty = p._gc = p._initted = p._paused = false;
		p._totalTime = p._time = 0;
		p._rawPrevTime = -1;
		p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
		p._paused = false;


		//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
		var _checkTimeout = function() {
				if (_tickerActive && _getTime() - _lastUpdate > 2000) {
					_ticker.wake();
				}
				setTimeout(_checkTimeout, 2000);
			};
		_checkTimeout();


		p.play = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.reversed(false).paused(false);
		};

		p.pause = function(atTime, suppressEvents) {
			if (atTime != null) {
				this.seek(atTime, suppressEvents);
			}
			return this.paused(true);
		};

		p.resume = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.paused(false);
		};

		p.seek = function(time, suppressEvents) {
			return this.totalTime(Number(time), suppressEvents !== false);
		};

		p.restart = function(includeDelay, suppressEvents) {
			return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
		};

		p.reverse = function(from, suppressEvents) {
			if (from != null) {
				this.seek((from || this.totalDuration()), suppressEvents);
			}
			return this.reversed(true).paused(false);
		};

		p.render = function(time, suppressEvents, force) {
			//stub - we override this method in subclasses.
		};

		p.invalidate = function() {
			this._time = this._totalTime = 0;
			this._initted = this._gc = false;
			this._rawPrevTime = -1;
			if (this._gc || !this.timeline) {
				this._enabled(true);
			}
			return this;
		};

		p.isActive = function() {
			var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
				startTime = this._startTime,
				rawTime;
			return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale));
		};

		p._enabled = function (enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			this._gc = !enabled;
			this._active = this.isActive();
			if (ignoreTimeline !== true) {
				if (enabled && !this.timeline) {
					this._timeline.add(this, this._startTime - this._delay);
				} else if (!enabled && this.timeline) {
					this._timeline._remove(this, true);
				}
			}
			return false;
		};


		p._kill = function(vars, target) {
			return this._enabled(false, false);
		};

		p.kill = function(vars, target) {
			this._kill(vars, target);
			return this;
		};

		p._uncache = function(includeSelf) {
			var tween = includeSelf ? this : this.timeline;
			while (tween) {
				tween._dirty = true;
				tween = tween.timeline;
			}
			return this;
		};

		p._swapSelfInParams = function(params) {
			var i = params.length,
				copy = params.concat();
			while (--i > -1) {
				if (params[i] === "{self}") {
					copy[i] = this;
				}
			}
			return copy;
		};

		p._callback = function(type) {
			var v = this.vars,
				callback = v[type],
				params = v[type + "Params"],
				scope = v[type + "Scope"] || v.callbackScope || this,
				l = params ? params.length : 0;
			switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
				case 0: callback.call(scope); break;
				case 1: callback.call(scope, params[0]); break;
				case 2: callback.call(scope, params[0], params[1]); break;
				default: callback.apply(scope, params);
			}
		};

//----Animation getters/setters --------------------------------------------------------

		p.eventCallback = function(type, callback, params, scope) {
			if ((type || "").substr(0,2) === "on") {
				var v = this.vars;
				if (arguments.length === 1) {
					return v[type];
				}
				if (callback == null) {
					delete v[type];
				} else {
					v[type] = callback;
					v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
					v[type + "Scope"] = scope;
				}
				if (type === "onUpdate") {
					this._onUpdate = callback;
				}
			}
			return this;
		};

		p.delay = function(value) {
			if (!arguments.length) {
				return this._delay;
			}
			if (this._timeline.smoothChildTiming) {
				this.startTime( this._startTime + value - this._delay );
			}
			this._delay = value;
			return this;
		};

		p.duration = function(value) {
			if (!arguments.length) {
				this._dirty = false;
				return this._duration;
			}
			this._duration = this._totalDuration = value;
			this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
			if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
				this.totalTime(this._totalTime * (value / this._duration), true);
			}
			return this;
		};

		p.totalDuration = function(value) {
			this._dirty = false;
			return (!arguments.length) ? this._totalDuration : this.duration(value);
		};

		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
		};

		p.totalTime = function(time, suppressEvents, uncapped) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (!arguments.length) {
				return this._totalTime;
			}
			if (this._timeline) {
				if (time < 0 && !uncapped) {
					time += this.totalDuration();
				}
				if (this._timeline.smoothChildTiming) {
					if (this._dirty) {
						this.totalDuration();
					}
					var totalDuration = this._totalDuration,
						tl = this._timeline;
					if (time > totalDuration && !uncapped) {
						time = totalDuration;
					}
					this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
					if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
						this._uncache(false);
					}
					//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
					if (tl._timeline) {
						while (tl._timeline) {
							if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
								tl.totalTime(tl._totalTime, true);
							}
							tl = tl._timeline;
						}
					}
				}
				if (this._gc) {
					this._enabled(true, false);
				}
				if (this._totalTime !== time || this._duration === 0) {
					if (_lazyTweens.length) {
						_lazyRender();
					}
					this.render(time, suppressEvents, false);
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
						_lazyRender();
					}
				}
			}
			return this;
		};

		p.progress = p.totalProgress = function(value, suppressEvents) {
			var duration = this.duration();
			return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
		};

		p.startTime = function(value) {
			if (!arguments.length) {
				return this._startTime;
			}
			if (value !== this._startTime) {
				this._startTime = value;
				if (this.timeline) if (this.timeline._sortChildren) {
					this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			return this;
		};

		p.endTime = function(includeRepeats) {
			return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
		};

		p.timeScale = function(value) {
			if (!arguments.length) {
				return this._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			if (this._timeline && this._timeline.smoothChildTiming) {
				var pauseTime = this._pauseTime,
					t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
				this._startTime = t - ((t - this._startTime) * this._timeScale / value);
			}
			this._timeScale = value;
			return this._uncache(false);
		};

		p.reversed = function(value) {
			if (!arguments.length) {
				return this._reversed;
			}
			if (value != this._reversed) {
				this._reversed = value;
				this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
			}
			return this;
		};

		p.paused = function(value) {
			if (!arguments.length) {
				return this._paused;
			}
			var tl = this._timeline,
				raw, elapsed;
			if (value != this._paused) if (tl) {
				if (!_tickerActive && !value) {
					_ticker.wake();
				}
				raw = tl.rawTime();
				elapsed = raw - this._pauseTime;
				if (!value && tl.smoothChildTiming) {
					this._startTime += elapsed;
					this._uncache(false);
				}
				this._pauseTime = value ? raw : null;
				this._paused = value;
				this._active = this.isActive();
				if (!value && elapsed !== 0 && this._initted && this.duration()) {
					raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
					this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
				}
			}
			if (this._gc && !value) {
				this._enabled(true, false);
			}
			return this;
		};


/*
 * ----------------------------------------------------------------
 * SimpleTimeline
 * ----------------------------------------------------------------
 */
		var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
			Animation.call(this, 0, vars);
			this.autoRemoveChildren = this.smoothChildTiming = true;
		});

		p = SimpleTimeline.prototype = new Animation();
		p.constructor = SimpleTimeline;
		p.kill()._gc = false;
		p._first = p._last = p._recent = null;
		p._sortChildren = false;

		p.add = p.insert = function(child, position, align, stagger) {
			var prevTween, st;
			child._startTime = Number(position || 0) + child._delay;
			if (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
				child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
			}
			if (child.timeline) {
				child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
			}
			child.timeline = child._timeline = this;
			if (child._gc) {
				child._enabled(true, true);
			}
			prevTween = this._last;
			if (this._sortChildren) {
				st = child._startTime;
				while (prevTween && prevTween._startTime > st) {
					prevTween = prevTween._prev;
				}
			}
			if (prevTween) {
				child._next = prevTween._next;
				prevTween._next = child;
			} else {
				child._next = this._first;
				this._first = child;
			}
			if (child._next) {
				child._next._prev = child;
			} else {
				this._last = child;
			}
			child._prev = prevTween;
			this._recent = child;
			if (this._timeline) {
				this._uncache(true);
			}
			return this;
		};

		p._remove = function(tween, skipDisable) {
			if (tween.timeline === this) {
				if (!skipDisable) {
					tween._enabled(false, true);
				}

				if (tween._prev) {
					tween._prev._next = tween._next;
				} else if (this._first === tween) {
					this._first = tween._next;
				}
				if (tween._next) {
					tween._next._prev = tween._prev;
				} else if (this._last === tween) {
					this._last = tween._prev;
				}
				tween._next = tween._prev = tween.timeline = null;
				if (tween === this._recent) {
					this._recent = this._last;
				}

				if (this._timeline) {
					this._uncache(true);
				}
			}
			return this;
		};

		p.render = function(time, suppressEvents, force) {
			var tween = this._first,
				next;
			this._totalTime = this._time = this._rawPrevTime = time;
			while (tween) {
				next = tween._next; //record it here because the value could change after rendering...
				if (tween._active || (time >= tween._startTime && !tween._paused)) {
					if (!tween._reversed) {
						tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
					} else {
						tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
					}
				}
				tween = next;
			}
		};

		p.rawTime = function() {
			if (!_tickerActive) {
				_ticker.wake();
			}
			return this._totalTime;
		};

/*
 * ----------------------------------------------------------------
 * TweenLite
 * ----------------------------------------------------------------
 */
		var TweenLite = _class("TweenLite", function(target, duration, vars) {
				Animation.call(this, duration, vars);
				this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

				if (target == null) {
					throw "Cannot tween a null target.";
				}

				this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

				var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
					overwrite = this.vars.overwrite,
					i, targ, targets;

				this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

				if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
					this._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
					this._propLookup = [];
					this._siblings = [];
					for (i = 0; i < targets.length; i++) {
						targ = targets[i];
						if (!targ) {
							targets.splice(i--, 1);
							continue;
						} else if (typeof(targ) === "string") {
							targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
							if (typeof(targ) === "string") {
								targets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
							}
							continue;
						} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
							targets.splice(i--, 1);
							this._targets = targets = targets.concat(_slice(targ));
							continue;
						}
						this._siblings[i] = _register(targ, this, false);
						if (overwrite === 1) if (this._siblings[i].length > 1) {
							_applyOverwrite(targ, this, null, 1, this._siblings[i]);
						}
					}

				} else {
					this._propLookup = {};
					this._siblings = _register(target, this, false);
					if (overwrite === 1) if (this._siblings.length > 1) {
						_applyOverwrite(target, this, null, 1, this._siblings);
					}
				}
				if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
					this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
					this.render(Math.min(0, -this._delay)); //in case delay is negative
				}
			}, true),
			_isSelector = function(v) {
				return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
			},
			_autoCSS = function(vars, target) {
				var css = {},
					p;
				for (p in vars) {
					if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
						css[p] = vars[p];
						delete vars[p];
					}
				}
				vars.css = css;
			};

		p = TweenLite.prototype = new Animation();
		p.constructor = TweenLite;
		p.kill()._gc = false;

//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

		p.ratio = 0;
		p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
		p._notifyPluginsOfEnabled = p._lazy = false;

		TweenLite.version = "1.19.0";
		TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
		TweenLite.defaultOverwrite = "auto";
		TweenLite.ticker = _ticker;
		TweenLite.autoSleep = 120;
		TweenLite.lagSmoothing = function(threshold, adjustedLag) {
			_ticker.lagSmoothing(threshold, adjustedLag);
		};

		TweenLite.selector = window.$ || window.jQuery || function(e) {
			var selector = window.$ || window.jQuery;
			if (selector) {
				TweenLite.selector = selector;
				return selector(e);
			}
			return (typeof(document) === "undefined") ? e : (document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
		};

		var _lazyTweens = [],
			_lazyLookup = {},
			_numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
			//_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
			_setRatio = function(v) {
				var pt = this._firstPT,
					min = 0.000001,
					val;
				while (pt) {
					val = !pt.blob ? pt.c * v + pt.s : v ? this.join("") : this.start;
					if (pt.m) {
						val = pt.m(val, this._target || pt.t);
					} else if (val < min) if (val > -min) { //prevents issues with converting very small numbers to strings in the browser
						val = 0;
					}
					if (!pt.f) {
						pt.t[pt.p] = val;
					} else if (pt.fp) {
						pt.t[pt.p](pt.fp, val);
					} else {
						pt.t[pt.p](val);
					}
					pt = pt._next;
				}
			},
			//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
			_blobDif = function(start, end, filter, pt) {
				var a = [start, end],
					charIndex = 0,
					s = "",
					color = 0,
					startNums, endNums, num, i, l, nonNumbers, currentNum;
				a.start = start;
				if (filter) {
					filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
					start = a[0];
					end = a[1];
				}
				a.length = 0;
				startNums = start.match(_numbersExp) || [];
				endNums = end.match(_numbersExp) || [];
				if (pt) {
					pt._next = null;
					pt.blob = 1;
					a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
				}
				l = endNums.length;
				for (i = 0; i < l; i++) {
					currentNum = endNums[i];
					nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);
					s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
					charIndex += nonNumbers.length;
					if (color) { //sense rgba() values and round them.
						color = (color + 1) % 5;
					} else if (nonNumbers.substr(-5) === "rgba(") {
						color = 1;
					}
					if (currentNum === startNums[i] || startNums.length <= i) {
						s += currentNum;
					} else {
						if (s) {
							a.push(s);
							s = "";
						}
						num = parseFloat(startNums[i]);
						a.push(num);
						a._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};
						//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
					}
					charIndex += currentNum.length;
				}
				s += end.substr(charIndex);
				if (s) {
					a.push(s);
				}
				a.setRatio = _setRatio;
				return a;
			},
			//note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
			_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
				if (typeof(end) === "function") {
					end = end(index || 0, target);
				}
				var s = (start === "get") ? target[prop] : start,
					type = typeof(target[prop]),
					isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
					pt = {t:target, p:prop, s:s, f:(type === "function"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},
					blob, getterName;
				if (type !== "number") {
					if (type === "function" && start === "get") {
						getterName = ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3));
						pt.s = s = funcParam ? target[getterName](funcParam) : target[getterName]();
					}
					if (typeof(s) === "string" && (funcParam || isNaN(s))) {
						//a blob (string that has multiple numbers in it)
						pt.fp = funcParam;
						blob = _blobDif(s, end, stringFilter || TweenLite.defaultStringFilter, pt);
						pt = {t:blob, p:"setRatio", s:0, c:1, f:2, pg:0, n:overwriteProp || prop, pr:0, m:0}; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
					} else if (!isRelative) {
						pt.s = parseFloat(s);
						pt.c = (parseFloat(end) - pt.s) || 0;
					}
				}
				if (pt.c) { //only add it to the linked list if there's a change.
					if ((pt._next = this._firstPT)) {
						pt._next._prev = pt;
					}
					this._firstPT = pt;
					return pt;
				}
			},
			_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
			_plugins = TweenLite._plugins = {},
			_tweenLookup = _internals.tweenLookup = {},
			_tweenLookupNum = 0,
			_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1},
			_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, "true":1, "false":0},
			_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
			_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
			_nextGCFrame = 30,
			_lazyRender = _internals.lazyRender = function() {
				var i = _lazyTweens.length,
					tween;
				_lazyLookup = {};
				while (--i > -1) {
					tween = _lazyTweens[i];
					if (tween && tween._lazy !== false) {
						tween.render(tween._lazy[0], tween._lazy[1], true);
						tween._lazy = false;
					}
				}
				_lazyTweens.length = 0;
			};

		_rootTimeline._startTime = _ticker.time;
		_rootFramesTimeline._startTime = _ticker.frame;
		_rootTimeline._active = _rootFramesTimeline._active = true;
		setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

		Animation._updateRoot = TweenLite.render = function() {
				var i, a, p;
				if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
					_lazyRender();
				}
				_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
				_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
				if (_lazyTweens.length) {
					_lazyRender();
				}
				if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
					_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
					for (p in _tweenLookup) {
						a = _tweenLookup[p].tweens;
						i = a.length;
						while (--i > -1) {
							if (a[i]._gc) {
								a.splice(i, 1);
							}
						}
						if (a.length === 0) {
							delete _tweenLookup[p];
						}
					}
					//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
					p = _rootTimeline._first;
					if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
						while (p && p._paused) {
							p = p._next;
						}
						if (!p) {
							_ticker.sleep();
						}
					}
				}
			};

		_ticker.addEventListener("tick", Animation._updateRoot);

		var _register = function(target, tween, scrub) {
				var id = target._gsTweenID, a, i;
				if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
					_tweenLookup[id] = {target:target, tweens:[]};
				}
				if (tween) {
					a = _tweenLookup[id].tweens;
					a[(i = a.length)] = tween;
					if (scrub) {
						while (--i > -1) {
							if (a[i] === tween) {
								a.splice(i, 1);
							}
						}
					}
				}
				return _tweenLookup[id].tweens;
			},
			_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
				var func = overwrittenTween.vars.onOverwrite, r1, r2;
				if (func) {
					r1 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				func = TweenLite.onOverwrite;
				if (func) {
					r2 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				return (r1 !== false && r2 !== false);
			},
			_applyOverwrite = function(target, tween, props, mode, siblings) {
				var i, changed, curTween, l;
				if (mode === 1 || mode >= 4) {
					l = siblings.length;
					for (i = 0; i < l; i++) {
						if ((curTween = siblings[i]) !== tween) {
							if (!curTween._gc) {
								if (curTween._kill(null, target, tween)) {
									changed = true;
								}
							}
						} else if (mode === 5) {
							break;
						}
					}
					return changed;
				}
				//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
				var startTime = tween._startTime + _tinyNum,
					overlaps = [],
					oCount = 0,
					zeroDur = (tween._duration === 0),
					globalStart;
				i = siblings.length;
				while (--i > -1) {
					if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
						//ignore
					} else if (curTween._timeline !== tween._timeline) {
						globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
						if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
							overlaps[oCount++] = curTween;
						}
					} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
						overlaps[oCount++] = curTween;
					}
				}

				i = oCount;
				while (--i > -1) {
					curTween = overlaps[i];
					if (mode === 2) if (curTween._kill(props, target, tween)) {
						changed = true;
					}
					if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
						if (mode !== 2 && !_onOverwrite(curTween, tween)) {
							continue;
						}
						if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
							changed = true;
						}
					}
				}
				return changed;
			},
			_checkOverlap = function(tween, reference, zeroDur) {
				var tl = tween._timeline,
					ts = tl._timeScale,
					t = tween._startTime;
				while (tl._timeline) {
					t += tl._startTime;
					ts *= tl._timeScale;
					if (tl._paused) {
						return -100;
					}
					tl = tl._timeline;
				}
				t /= ts;
				return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
			};


//---- TweenLite instance methods -----------------------------------------------------------------------------

		p._init = function() {
			var v = this.vars,
				op = this._overwrittenProps,
				dur = this._duration,
				immediate = !!v.immediateRender,
				ease = v.ease,
				i, initPlugins, pt, p, startVars, l;
			if (v.startAt) {
				if (this._startAt) {
					this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
					this._startAt.kill();
				}
				startVars = {};
				for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
					startVars[p] = v.startAt[p];
				}
				startVars.overwrite = false;
				startVars.immediateRender = true;
				startVars.lazy = (immediate && v.lazy !== false);
				startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
				this._startAt = TweenLite.to(this.target, 0, startVars);
				if (immediate) {
					if (this._time > 0) {
						this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
					} else if (dur !== 0) {
						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
					}
				}
			} else if (v.runBackwards && dur !== 0) {
				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
				if (this._startAt) {
					this._startAt.render(-1, true);
					this._startAt.kill();
					this._startAt = null;
				} else {
					if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
						immediate = false;
					}
					pt = {};
					for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
						if (!_reservedProps[p] || p === "autoCSS") {
							pt[p] = v[p];
						}
					}
					pt.overwrite = 0;
					pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
					pt.lazy = (immediate && v.lazy !== false);
					pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
					this._startAt = TweenLite.to(this.target, 0, pt);
					if (!immediate) {
						this._startAt._init(); //ensures that the initial values are recorded
						this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
						if (this.vars.immediateRender) {
							this._startAt = null;
						}
					} else if (this._time === 0) {
						return;
					}
				}
			}
			this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
			if (v.easeParams instanceof Array && ease.config) {
				this._ease = ease.config.apply(ease, v.easeParams);
			}
			this._easeType = this._ease._type;
			this._easePower = this._ease._power;
			this._firstPT = null;

			if (this._targets) {
				l = this._targets.length;
				for (i = 0; i < l; i++) {
					if ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {
						initPlugins = true;
					}
				}
			} else {
				initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
			}

			if (initPlugins) {
				TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
			}
			if (op) if (!this._firstPT) if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
				this._enabled(false, false);
			}
			if (v.runBackwards) {
				pt = this._firstPT;
				while (pt) {
					pt.s += pt.c;
					pt.c = -pt.c;
					pt = pt._next;
				}
			}
			this._onUpdate = v.onUpdate;
			this._initted = true;
		};

		p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
			var p, i, initPlugins, plugin, pt, v;
			if (target == null) {
				return false;
			}

			if (_lazyLookup[target._gsTweenID]) {
				_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
			}

			if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
				_autoCSS(this.vars, target);
			}
			for (p in this.vars) {
				v = this.vars[p];
				if (_reservedProps[p]) {
					if (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join("").indexOf("{self}") !== -1) {
						this.vars[p] = v = this._swapSelfInParams(v, this);
					}

				} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

					//t - target 		[object]
					//p - property 		[string]
					//s - start			[number]
					//c - change		[number]
					//f - isFunction	[boolean]
					//n - name			[string]
					//pg - isPlugin 	[boolean]
					//pr - priority		[number]
					//m - mod           [function | 0]
					this._firstPT = pt = {_next:this._firstPT, t:plugin, p:"setRatio", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};
					i = plugin._overwriteProps.length;
					while (--i > -1) {
						propLookup[plugin._overwriteProps[i]] = this._firstPT;
					}
					if (plugin._priority || plugin._onInitAllProps) {
						initPlugins = true;
					}
					if (plugin._onDisable || plugin._onEnable) {
						this._notifyPluginsOfEnabled = true;
					}
					if (pt._next) {
						pt._next._prev = pt;
					}

				} else {
					propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
				}
			}

			if (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
				return this._initProps(target, propLookup, siblings, overwrittenProps, index);
			}
			if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
				this._kill(propLookup, target);
				return this._initProps(target, propLookup, siblings, overwrittenProps, index);
			}
			if (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
				_lazyLookup[target._gsTweenID] = true;
			}
			return initPlugins;
		};

		p.render = function(time, suppressEvents, force) {
			var prevTime = this._time,
				duration = this._duration,
				prevRawPrevTime = this._rawPrevTime,
				isComplete, callback, pt, rawPrevTime;
			if (time >= duration - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = this._time = duration;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				if (!this._reversed ) {
					isComplete = true;
					callback = "onComplete";
					force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;

				if (this._easeType) {
					var r = time / duration, type = this._easeType, pow = this._easePower;
					if (type === 1 || (type === 3 && r >= 0.5)) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - (r / 2);
					}

				} else {
					this.ratio = this._ease.getRatio(time / duration);
				}
			}

			if (this._time === prevTime && !force) {
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
					this._time = this._totalTime = prevTime;
					this._rawPrevTime = prevRawPrevTime;
					_lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd) {
					this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
				}
			}
			if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
				this._lazy = false;
			}
			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTime === 0) {
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}

			if (this._onUpdate) {
				if (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {
					this._callback("onUpdate");
				}
			}
			if (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};

		p._kill = function(vars, target, overwritingTween) {
			if (vars === "all") {
				vars = null;
			}
			if (vars == null) if (target == null || target === this.target) {
				this._lazy = false;
				return this._enabled(false, false);
			}
			target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
			var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
				i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				while (--i > -1) {
					if (this._kill(vars, target[i], overwritingTween)) {
						changed = true;
					}
				}
			} else {
				if (this._targets) {
					i = this._targets.length;
					while (--i > -1) {
						if (target === this._targets[i]) {
							propLookup = this._propLookup[i] || {};
							this._overwrittenProps = this._overwrittenProps || [];
							overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
							break;
						}
					}
				} else if (target !== this.target) {
					return false;
				} else {
					propLookup = this._propLookup;
					overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
				}

				if (propLookup) {
					killProps = vars || propLookup;
					record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
					if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
						for (p in killProps) {
							if (propLookup[p]) {
								if (!killed) {
									killed = [];
								}
								killed.push(p);
							}
						}
						if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
							return false;
						}
					}

					for (p in killProps) {
						if ((pt = propLookup[p])) {
							if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
								if (pt.f) {
									pt.t[pt.p](pt.s);
								} else {
									pt.t[pt.p] = pt.s;
								}
								changed = true;
							}
							if (pt.pg && pt.t._kill(killProps)) {
								changed = true; //some plugins need to be notified so they can perform cleanup tasks first
							}
							if (!pt.pg || pt.t._overwriteProps.length === 0) {
								if (pt._prev) {
									pt._prev._next = pt._next;
								} else if (pt === this._firstPT) {
									this._firstPT = pt._next;
								}
								if (pt._next) {
									pt._next._prev = pt._prev;
								}
								pt._next = pt._prev = null;
							}
							delete propLookup[p];
						}
						if (record) {
							overwrittenProps[p] = 1;
						}
					}
					if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
						this._enabled(false, false);
					}
				}
			}
			return changed;
		};

		p.invalidate = function() {
			if (this._notifyPluginsOfEnabled) {
				TweenLite._onPluginEvent("_onDisable", this);
			}
			this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
			this._notifyPluginsOfEnabled = this._active = this._lazy = false;
			this._propLookup = (this._targets) ? {} : [];
			Animation.prototype.invalidate.call(this);
			if (this.vars.immediateRender) {
				this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
				this.render(Math.min(0, -this._delay)); //in case delay is negative.
			}
			return this;
		};

		p._enabled = function(enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (enabled && this._gc) {
				var targets = this._targets,
					i;
				if (targets) {
					i = targets.length;
					while (--i > -1) {
						this._siblings[i] = _register(targets[i], this, true);
					}
				} else {
					this._siblings = _register(this.target, this, true);
				}
			}
			Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
			if (this._notifyPluginsOfEnabled) if (this._firstPT) {
				return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
			}
			return false;
		};


//----TweenLite static methods -----------------------------------------------------

		TweenLite.to = function(target, duration, vars) {
			return new TweenLite(target, duration, vars);
		};

		TweenLite.from = function(target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return new TweenLite(target, duration, vars);
		};

		TweenLite.fromTo = function(target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return new TweenLite(target, duration, toVars);
		};

		TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
			return new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});
		};

		TweenLite.set = function(target, vars) {
			return new TweenLite(target, 0, vars);
		};

		TweenLite.getTweensOf = function(target, onlyActive) {
			if (target == null) { return []; }
			target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
			var i, a, j, t;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				a = [];
				while (--i > -1) {
					a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
				}
				i = a.length;
				//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
				while (--i > -1) {
					t = a[i];
					j = i;
					while (--j > -1) {
						if (t === a[j]) {
							a.splice(i, 1);
						}
					}
				}
			} else {
				a = _register(target).concat();
				i = a.length;
				while (--i > -1) {
					if (a[i]._gc || (onlyActive && !a[i].isActive())) {
						a.splice(i, 1);
					}
				}
			}
			return a;
		};

		TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
			if (typeof(onlyActive) === "object") {
				vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
				onlyActive = false;
			}
			var a = TweenLite.getTweensOf(target, onlyActive),
				i = a.length;
			while (--i > -1) {
				a[i]._kill(vars, target);
			}
		};



/*
 * ----------------------------------------------------------------
 * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
 * ----------------------------------------------------------------
 */
		var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
					this._overwriteProps = (props || "").split(",");
					this._propName = this._overwriteProps[0];
					this._priority = priority || 0;
					this._super = TweenPlugin.prototype;
				}, true);

		p = TweenPlugin.prototype;
		TweenPlugin.version = "1.19.0";
		TweenPlugin.API = 2;
		p._firstPT = null;
		p._addTween = _addPropTween;
		p.setRatio = _setRatio;

		p._kill = function(lookup) {
			var a = this._overwriteProps,
				pt = this._firstPT,
				i;
			if (lookup[this._propName] != null) {
				this._overwriteProps = [];
			} else {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i]] != null) {
						a.splice(i, 1);
					}
				}
			}
			while (pt) {
				if (lookup[pt.n] != null) {
					if (pt._next) {
						pt._next._prev = pt._prev;
					}
					if (pt._prev) {
						pt._prev._next = pt._next;
						pt._prev = null;
					} else if (this._firstPT === pt) {
						this._firstPT = pt._next;
					}
				}
				pt = pt._next;
			}
			return false;
		};

		p._mod = p._roundProps = function(lookup) {
			var pt = this._firstPT,
				val;
			while (pt) {
				val = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + "_").join("") ]);
				if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
					if (pt.f === 2) {
						pt.t._applyPT.m = val;
					} else {
						pt.m = val;
					}
				}
				pt = pt._next;
			}
		};

		TweenLite._onPluginEvent = function(type, tween) {
			var pt = tween._firstPT,
				changed, pt2, first, last, next;
			if (type === "_onInitAllProps") {
				//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				pt = tween._firstPT = first;
			}
			while (pt) {
				if (pt.pg) if (typeof(pt.t[type]) === "function") if (pt.t[type]()) {
					changed = true;
				}
				pt = pt._next;
			}
			return changed;
		};

		TweenPlugin.activate = function(plugins) {
			var i = plugins.length;
			while (--i > -1) {
				if (plugins[i].API === TweenPlugin.API) {
					_plugins[(new plugins[i]())._propName] = plugins[i];
				}
			}
			return true;
		};

		//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
		_gsDefine.plugin = function(config) {
			if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
			var propName = config.propName,
				priority = config.priority || 0,
				overwriteProps = config.overwriteProps,
				map = {init:"_onInitTween", set:"setRatio", kill:"_kill", round:"_mod", mod:"_mod", initAll:"_onInitAllProps"},
				Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
					function() {
						TweenPlugin.call(this, propName, priority);
						this._overwriteProps = overwriteProps || [];
					}, (config.global === true)),
				p = Plugin.prototype = new TweenPlugin(propName),
				prop;
			p.constructor = Plugin;
			Plugin.API = config.API;
			for (prop in map) {
				if (typeof(config[prop]) === "function") {
					p[map[prop]] = config[prop];
				}
			}
			Plugin.version = config.version;
			TweenPlugin.activate([Plugin]);
			return Plugin;
		};


		//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
		a = window._gsQueue;
		if (a) {
			for (i = 0; i < a.length; i++) {
				a[i]();
			}
			for (p in _defLookup) {
				if (!_defLookup[p].func) {
					window.console.log("GSAP encountered missing dependency: " + p);
				}
			}
		}

		_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

})((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenMax");
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
module.exports = function( THREE ) {
	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finter swipe

	function OrbitControls( object, domElement ) {

		this.object = object;

		this.domElement = ( domElement !== undefined ) ? domElement : document;

		// Set to false to disable this control
		this.enabled = true;

		// "target" sets the location of focus, where the object orbits around
		this.target = new THREE.Vector3();

		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.25;

		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

		// Set to false to disable use of the keys
		this.enableKeys = true;

		// The four arrow keys
		this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

		// Mouse buttons
		this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		//
		// public methods
		//

		this.getPolarAngle = function () {

			return spherical.phi;

		};

		this.getAzimuthalAngle = function () {

			return spherical.theta;

		};

		this.reset = function () {

			scope.target.copy( scope.target0 );
			scope.object.position.copy( scope.position0 );
			scope.object.zoom = scope.zoom0;

			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );

			scope.update();

			state = STATE.NONE;

		};

		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function() {

			var offset = new THREE.Vector3();

			// so camera.up is the orbit axis
			var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
			var quatInverse = quat.clone().inverse();

			var lastPosition = new THREE.Vector3();
			var lastQuaternion = new THREE.Quaternion();

			return function update () {

				var position = scope.object.position;

				offset.copy( position ).sub( scope.target );

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );

				// angle from z-axis around y-axis
				spherical.setFromVector3( offset );

				if ( scope.autoRotate && state === STATE.NONE ) {

					rotateLeft( getAutoRotationAngle() );

				}

				spherical.theta += sphericalDelta.theta;
				spherical.phi += sphericalDelta.phi;

				// restrict theta to be between desired limits
				spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

				// restrict phi to be between desired limits
				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

				spherical.makeSafe();


				spherical.radius *= scale;

				// restrict radius to be between desired limits
				spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

				// move target to panned location
				scope.target.add( panOffset );

				offset.setFromSpherical( spherical );

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );

				position.copy( scope.target ).add( offset );

				scope.object.lookAt( scope.target );

				if ( scope.enableDamping === true ) {

					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
					sphericalDelta.phi *= ( 1 - scope.dampingFactor );

				} else {

					sphericalDelta.set( 0, 0, 0 );

				}

				scale = 1;
				panOffset.set( 0, 0, 0 );

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if ( zoomChanged ||
					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

					scope.dispatchEvent( changeEvent );

					lastPosition.copy( scope.object.position );
					lastQuaternion.copy( scope.object.quaternion );
					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

		this.dispose = function() {

			scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
			scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

			scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			window.removeEventListener( 'keydown', onKeyDown, false );

			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

		};

		//
		// internals
		//

		var scope = this;

		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };

		var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

		var state = STATE.NONE;

		var EPS = 0.000001;

		// current position in spherical coordinates
		var spherical = new THREE.Spherical();
		var sphericalDelta = new THREE.Spherical();

		var scale = 1;
		var panOffset = new THREE.Vector3();
		var zoomChanged = false;

		var rotateStart = new THREE.Vector2();
		var rotateEnd = new THREE.Vector2();
		var rotateDelta = new THREE.Vector2();

		var panStart = new THREE.Vector2();
		var panEnd = new THREE.Vector2();
		var panDelta = new THREE.Vector2();

		var dollyStart = new THREE.Vector2();
		var dollyEnd = new THREE.Vector2();
		var dollyDelta = new THREE.Vector2();

		function getAutoRotationAngle() {

			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

		}

		function getZoomScale() {

			return Math.pow( 0.95, scope.zoomSpeed );

		}

		function rotateLeft( angle ) {

			sphericalDelta.theta -= angle;

		}

		function rotateUp( angle ) {

			sphericalDelta.phi -= angle;

		}

		var panLeft = function() {

			var v = new THREE.Vector3();

			return function panLeft( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
				v.multiplyScalar( - distance );

				panOffset.add( v );

			};

		}();

		var panUp = function() {

			var v = new THREE.Vector3();

			return function panUp( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
				v.multiplyScalar( distance );

				panOffset.add( v );

			};

		}();

		// deltaX and deltaY are in pixels; right and down are positive
		var pan = function() {

			var offset = new THREE.Vector3();

			return function pan ( deltaX, deltaY ) {

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					// perspective
					var position = scope.object.position;
					offset.copy( position ).sub( scope.target );
					var targetDistance = offset.length();

					// half of the fov is center to top of screen
					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

					// we actually don't use screenWidth, since perspective camera is fixed to screen height
					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					// orthographic
					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

				} else {

					// camera neither orthographic nor perspective
					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
					scope.enablePan = false;

				}

			};

		}();

		function dollyIn( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale /= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		function dollyOut( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale *= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		//
		// event callbacks - update the object state
		//

		function handleMouseDownRotate( event ) {

			//console.log( 'handleMouseDownRotate' );

			rotateStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownDolly( event ) {

			//console.log( 'handleMouseDownDolly' );

			dollyStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownPan( event ) {

			//console.log( 'handleMouseDownPan' );

			panStart.set( event.clientX, event.clientY );

		}

		function handleMouseMoveRotate( event ) {

			//console.log( 'handleMouseMoveRotate' );

			rotateEnd.set( event.clientX, event.clientY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleMouseMoveDolly( event ) {

			//console.log( 'handleMouseMoveDolly' );

			dollyEnd.set( event.clientX, event.clientY );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyIn( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyOut( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleMouseMovePan( event ) {

			//console.log( 'handleMouseMovePan' );

			panEnd.set( event.clientX, event.clientY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleMouseUp( event ) {

			//console.log( 'handleMouseUp' );

		}

		function handleMouseWheel( event ) {

			//console.log( 'handleMouseWheel' );

			if ( event.deltaY < 0 ) {

				dollyOut( getZoomScale() );

			} else if ( event.deltaY > 0 ) {

				dollyIn( getZoomScale() );

			}

			scope.update();

		}

		function handleKeyDown( event ) {

			//console.log( 'handleKeyDown' );

			switch ( event.keyCode ) {

				case scope.keys.UP:
					pan( 0, scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.BOTTOM:
					pan( 0, - scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.LEFT:
					pan( scope.keyPanSpeed, 0 );
					scope.update();
					break;

				case scope.keys.RIGHT:
					pan( - scope.keyPanSpeed, 0 );
					scope.update();
					break;

			}

		}

		function handleTouchStartRotate( event ) {

			//console.log( 'handleTouchStartRotate' );

			rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchStartDolly( event ) {

			//console.log( 'handleTouchStartDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyStart.set( 0, distance );

		}

		function handleTouchStartPan( event ) {

			//console.log( 'handleTouchStartPan' );

			panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchMoveRotate( event ) {

			//console.log( 'handleTouchMoveRotate' );

			rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleTouchMoveDolly( event ) {

			//console.log( 'handleTouchMoveDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyEnd.set( 0, distance );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyOut( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyIn( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleTouchMovePan( event ) {

			//console.log( 'handleTouchMovePan' );

			panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleTouchEnd( event ) {

			//console.log( 'handleTouchEnd' );

		}

		//
		// event handlers - FSM: listen for events and reset state
		//

		function onMouseDown( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( event.button === scope.mouseButtons.ORBIT ) {

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

			} else if ( event.button === scope.mouseButtons.ZOOM ) {

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

			} else if ( event.button === scope.mouseButtons.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

			}

			if ( state !== STATE.NONE ) {

				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );

				scope.dispatchEvent( startEvent );

			}

		}

		function onMouseMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( state === STATE.ROTATE ) {

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

			} else if ( state === STATE.DOLLY ) {

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

			} else if ( state === STATE.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

			}

		}

		function onMouseUp( event ) {

			if ( scope.enabled === false ) return;

			handleMouseUp( event );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onMouseWheel( event ) {

			if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

			event.preventDefault();
			event.stopPropagation();

			handleMouseWheel( event );

			scope.dispatchEvent( startEvent ); // not sure why these are here...
			scope.dispatchEvent( endEvent );

		}

		function onKeyDown( event ) {

			if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

			handleKeyDown( event );

		}

		function onTouchStart( event ) {

			if ( scope.enabled === false ) return;

			switch ( event.touches.length ) {

				case 1:	// one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;

					handleTouchStartRotate( event );

					state = STATE.TOUCH_ROTATE;

					break;

				case 2:	// two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;

					handleTouchStartDolly( event );

					state = STATE.TOUCH_DOLLY;

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;

					handleTouchStartPan( event );

					state = STATE.TOUCH_PAN;

					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) {

				scope.dispatchEvent( startEvent );

			}

		}

		function onTouchMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			switch ( event.touches.length ) {

				case 1: // one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;
					if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

					handleTouchMoveRotate( event );

					break;

				case 2: // two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;
					if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

					handleTouchMoveDolly( event );

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;
					if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

					handleTouchMovePan( event );

					break;

				default:

					state = STATE.NONE;

			}

		}

		function onTouchEnd( event ) {

			if ( scope.enabled === false ) return;

			handleTouchEnd( event );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onContextMenu( event ) {

			event.preventDefault();

		}

		//

		scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

		scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

		window.addEventListener( 'keydown', onKeyDown, false );

		// force an update at start

		this.update();

	};

	OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	OrbitControls.prototype.constructor = OrbitControls;

	Object.defineProperties( OrbitControls.prototype, {

		center: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
				return this.target;

			}

		},

		// backward compatibility

		noZoom: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				return ! this.enableZoom;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				this.enableZoom = ! value;

			}

		},

		noRotate: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				return ! this.enableRotate;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				this.enableRotate = ! value;

			}

		},

		noPan: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				return ! this.enablePan;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				this.enablePan = ! value;

			}

		},

		noKeys: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				return ! this.enableKeys;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				this.enableKeys = ! value;

			}

		},

		staticMoving : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				return ! this.enableDamping;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				this.enableDamping = ! value;

			}

		},

		dynamicDampingFactor : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				return this.dampingFactor;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				this.dampingFactor = value;

			}

		}

	} );

	return OrbitControls;
};

},{}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _head = require('./head');

var _head2 = _interopRequireDefault(_head);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

window.THREE = require("./lib/three");
var OrbitControls = require('three-orbit-controls')(THREE);
var glsl = require('glslify');

var frag = glsl(["#define GLSLIFY 1\n/**\n * Set the colour to a lovely pink.\n * Note that the color is a 4D Float\n * Vector, R,G,B and A and each part\n * runs from 0.0 to 1.0\n */\nvoid main() {\n  gl_FragColor = vec4(1.0,  // R\n                      0.0,  // G\n                      1.0,  // B\n                      1.0); // A\n}"]);
var vert = glsl(["#define GLSLIFY 1\n/**\n * Multiply each vertex by the\n * model-view matrix and the\n * projection matrix (both provided\n * by Three.js) to get a final\n * vertex position\n */\nvoid main() {\n  gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(position,1.0);\n}"]);

var App = function () {
	function App() {
		var _this = this;

		_classCallCheck(this, App);

		this.scene = new THREE.Scene();
		this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
		this.renderer = new THREE.WebGLRenderer();

		this.renderer.setClearColor(0x555555);
		this.camera.position.z = 2.5;

		this.controls = new OrbitControls(this.camera);

		document.body.appendChild(this.renderer.domElement);

		this.head = new _head2.default(this.scene, this.camera, this.renderer);
		this.head.load(function () {
			_this.scene.add(_this.head.animation);
			_this.head.animation.animate(6.0, { ease: Power2.easeOut });
		});

		this.events();
		this.resize();
		this.addLights();
		this.render();
	}

	_createClass(App, [{
		key: 'addLights',
		value: function addLights() {
			this.light = new THREE.DirectionalLight(0xffffff, 1);
			this.light.position.set(0.5, 10, 5);
			this.scene.add(this.light);

			this.pointLight = new THREE.PointLight(0x6600ff, 2.0, 6);
			this.scene.add(this.pointLight);
		}
	}, {
		key: 'events',
		value: function events() {
			window.addEventListener("resize", this.resize.bind(this));
		}
	}, {
		key: 'render',
		value: function render() {
			window.requestAnimationFrame(this.render.bind(this));

			if (this.head.animation) {
				this.head.animation.rotation.y += 0.01;
			}

			this.renderer.render(this.scene, this.camera);
		}
	}, {
		key: 'resize',
		value: function resize() {
			this.renderer.setSize(window.innerWidth, window.innerHeight);
		}
	}]);

	return App;
}();

window.onload = function () {
	new App();
};

},{"./head":5,"./lib/three":10,"glslify":1,"three-orbit-controls":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _loadObj = require("./lib/loadObj");

var _loadObj2 = _interopRequireDefault(_loadObj);

var _animation = require("./lib/animation2");

var _animation2 = _interopRequireDefault(_animation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Head = function () {
	function Head(scene, camera, renderer) {
		_classCallCheck(this, Head);

		this.scene = scene;
		this.camera = camera;
		this.renderer = renderer;

		this.material = undefined;
		this.geometry = undefined;
		this.mesh = undefined;
	}

	_createClass(Head, [{
		key: "load",
		value: function load(cb) {
			var _this = this;

			(0, _loadObj2.default)('/obj/macaco_medium.OBJ', function (g) {
				_this.createMesh(g);
				cb();
			});
		}
	}, {
		key: "createMesh",
		value: function createMesh(g) {
			this.animation = new _animation2.default(g);
		}
	}, {
		key: "update",
		value: function update() {}
	}]);

	return Head;
}();

exports.default = Head;

},{"./lib/animation2":7,"./lib/loadObj":8}],6:[function(require,module,exports){
'use strict';

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.OBJLoader = function (manager) {

	this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;

	this.materials = null;
};

THREE.OBJLoader.prototype = {

	constructor: THREE.OBJLoader,

	load: function load(url, onLoad, onProgress, onError) {

		var scope = this;

		var loader = new THREE.XHRLoader(scope.manager);
		loader.setPath(this.path);
		loader.load(url, function (text) {

			onLoad(scope.parse(text));
		}, onProgress, onError);
	},

	setPath: function setPath(value) {

		this.path = value;
	},

	setMaterials: function setMaterials(materials) {

		this.materials = materials;
	},

	parse: function parse(text) {

		console.time('OBJLoader');

		var objects = [];
		var object;
		var foundObjects = false;
		var vertices = [];
		var normals = [];
		var uvs = [];

		function addObject(name) {

			var geometry = {
				vertices: [],
				normals: [],
				uvs: []
			};

			var material = {
				name: '',
				smooth: true
			};

			object = {
				name: name,
				geometry: geometry,
				material: material
			};

			objects.push(object);
		}

		function parseVertexIndex(value) {

			var index = parseInt(value);

			return (index >= 0 ? index - 1 : index + vertices.length / 3) * 3;
		}

		function parseNormalIndex(value) {

			var index = parseInt(value);

			return (index >= 0 ? index - 1 : index + normals.length / 3) * 3;
		}

		function parseUVIndex(value) {

			var index = parseInt(value);

			return (index >= 0 ? index - 1 : index + uvs.length / 2) * 2;
		}

		function addVertex(a, b, c) {

			object.geometry.vertices.push(vertices[a], vertices[a + 1], vertices[a + 2], vertices[b], vertices[b + 1], vertices[b + 2], vertices[c], vertices[c + 1], vertices[c + 2]);
		}

		function addNormal(a, b, c) {

			object.geometry.normals.push(normals[a], normals[a + 1], normals[a + 2], normals[b], normals[b + 1], normals[b + 2], normals[c], normals[c + 1], normals[c + 2]);
		}

		function addUV(a, b, c) {

			object.geometry.uvs.push(uvs[a], uvs[a + 1], uvs[b], uvs[b + 1], uvs[c], uvs[c + 1]);
		}

		function addFace(a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {

			var ia = parseVertexIndex(a);
			var ib = parseVertexIndex(b);
			var ic = parseVertexIndex(c);
			var id;

			if (d === undefined) {

				addVertex(ia, ib, ic);
			} else {

				id = parseVertexIndex(d);

				addVertex(ia, ib, id);
				addVertex(ib, ic, id);
			}

			if (ua !== undefined) {

				ia = parseUVIndex(ua);
				ib = parseUVIndex(ub);
				ic = parseUVIndex(uc);

				if (d === undefined) {

					addUV(ia, ib, ic);
				} else {

					id = parseUVIndex(ud);

					addUV(ia, ib, id);
					addUV(ib, ic, id);
				}
			}

			if (na !== undefined) {

				ia = parseNormalIndex(na);
				ib = parseNormalIndex(nb);
				ic = parseNormalIndex(nc);

				if (d === undefined) {

					addNormal(ia, ib, ic);
				} else {

					id = parseNormalIndex(nd);

					addNormal(ia, ib, id);
					addNormal(ib, ic, id);
				}
			}
		}

		addObject('');

		// v float float float
		var vertex_pattern = /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

		// vn float float float
		var normal_pattern = /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

		// vt float float
		var uv_pattern = /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

		// f vertex vertex vertex ...
		var face_pattern1 = /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/;

		// f vertex/uv vertex/uv vertex/uv ...
		var face_pattern2 = /^f\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)))?/;

		// f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...
		var face_pattern3 = /^f\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)\/(-?\d+)))?/;

		// f vertex//normal vertex//normal vertex//normal ...
		var face_pattern4 = /^f\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))(?:\s+((-?\d+)\/\/(-?\d+)))?/;

		var object_pattern = /^[og]\s*(.+)?/;

		var smoothing_pattern = /^s\s+(\d+|on|off)/;

		//

		var lines = text.split('\n');

		for (var i = 0; i < lines.length; i++) {

			var line = lines[i];
			line = line.trim();

			var result;

			if (line.length === 0 || line.charAt(0) === '#') {

				continue;
			} else if ((result = vertex_pattern.exec(line)) !== null) {

				// ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

				vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
			} else if ((result = normal_pattern.exec(line)) !== null) {

				// ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

				normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
			} else if ((result = uv_pattern.exec(line)) !== null) {

				// ["vt 0.1 0.2", "0.1", "0.2"]

				uvs.push(parseFloat(result[1]), parseFloat(result[2]));
			} else if ((result = face_pattern1.exec(line)) !== null) {

				// ["f 1 2 3", "1", "2", "3", undefined]

				addFace(result[1], result[2], result[3], result[4]);
			} else if ((result = face_pattern2.exec(line)) !== null) {

				// ["f 1/1 2/2 3/3", " 1/1", "1", "1", " 2/2", "2", "2", " 3/3", "3", "3", undefined, undefined, undefined]

				addFace(result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);
			} else if ((result = face_pattern3.exec(line)) !== null) {

				// ["f 1/1/1 2/2/2 3/3/3", " 1/1/1", "1", "1", "1", " 2/2/2", "2", "2", "2", " 3/3/3", "3", "3", "3", undefined, undefined, undefined, undefined]

				addFace(result[2], result[6], result[10], result[14], result[3], result[7], result[11], result[15], result[4], result[8], result[12], result[16]);
			} else if ((result = face_pattern4.exec(line)) !== null) {

				// ["f 1//1 2//2 3//3", " 1//1", "1", "1", " 2//2", "2", "2", " 3//3", "3", "3", undefined, undefined, undefined]

				addFace(result[2], result[5], result[8], result[11], undefined, undefined, undefined, undefined, result[3], result[6], result[9], result[12]);
			} else if ((result = object_pattern.exec(line)) !== null) {

				// o object_name
				// or
				// g group_name

				var name = result[0].substr(1).trim();

				if (foundObjects === false) {

					foundObjects = true;
					object.name = name;
				} else {

					addObject(name);
				}
			} else if (/^usemtl /.test(line)) {

				// material

				object.material.name = line.substring(7).trim();
			} else if (/^mtllib /.test(line)) {

				// mtl file

			} else if ((result = smoothing_pattern.exec(line)) !== null) {

				// smooth shading

				object.material.smooth = result[1] === "1" || result[1] === "on";
			} else {

				throw new Error("Unexpected line: " + line);
			}
		}

		var container = new THREE.Group();

		for (var i = 0, l = objects.length; i < l; i++) {

			object = objects[i];
			var geometry = object.geometry;

			var buffergeometry = new THREE.BufferGeometry();

			buffergeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(geometry.vertices), 3));

			if (geometry.normals.length > 0) {

				buffergeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(geometry.normals), 3));
			} else {

				buffergeometry.computeVertexNormals();
			}

			if (geometry.uvs.length > 0) {

				buffergeometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(geometry.uvs), 2));
			}

			var material;

			if (this.materials !== null) {

				material = this.materials.create(object.material.name);
			}

			if (!material) {

				material = new THREE.MeshPhongMaterial();
				material.name = object.material.name;
			}

			material.shading = object.material.smooth ? THREE.SmoothShading : THREE.FlatShading;

			var mesh = new THREE.Mesh(buffergeometry, material);
			mesh.name = object.name;

			container.add(mesh);
		}

		console.timeEnd('OBJLoader');

		return container;
	}

};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
window.THREE = require("./three");
require("./three.bas");
require("gsap");

function Animation(model) {
  // create a geometry that will be used by THREE.BAS.ModelBufferGeometry

  model.computeBoundingBox();
  model.computeVertexNormals();
  THREE.BAS.Utils.separateFaces(model);

  var geometry = new THREE.BAS.ModelBufferGeometry(model, {
    localizeFaces: true,
    computeCentroids: true
  });

  var normal = geometry.createAttribute('normal', 3);

  for (var i = 0; i < model.faces.length; i++) {
    var face = model.faces[i];

    var ia = face.a * 3;
    normal.array[ia] = face.vertexNormals[0].x;
    normal.array[ia + 1] = face.vertexNormals[0].y;
    normal.array[ia + 2] = face.vertexNormals[0].z;

    var ib = face.b * 3;
    normal.array[ib] = face.vertexNormals[1].x;
    normal.array[ib + 1] = face.vertexNormals[1].y;
    normal.array[ib + 2] = face.vertexNormals[1].z;

    var ic = face.c * 3;
    normal.array[ic] = face.vertexNormals[2].x;
    normal.array[ic + 1] = face.vertexNormals[2].y;
    normal.array[ic + 2] = face.vertexNormals[2].z;
  }

  var maxDelayX = 0.5;
  var maxDelayY = 1.0;
  var minDuration = 0.5;
  var maxDuration = 1.0;
  var bounds = model.boundingBox;

  this.totalDuration = maxDelayX + maxDelayY + maxDuration;
  var aDelayDuration = geometry.createAttribute('aDelayDuration', 2);
  var offset = 0;

  for (i = 0; i < geometry.faceCount; i++) {
    var c = geometry.centroids[i];
    var delayX = mapEase(Power2.easeOut, Math.abs(c.x), 0, bounds.max.x, 0.0, maxDelayX);
    var delayY = mapEase(Power2.easeOut, c.y, bounds.max.y, bounds.min.y, 0.0, maxDelayY);

    var delay = (delayX + delayY) * THREE.Math.randFloat(0.9, 1.0);
    var duration = THREE.Math.randFloat(minDuration, maxDuration);

    for (var j = 0; j < 3; j++) {
      aDelayDuration.array[offset++] = delay + j * 0.015;
      aDelayDuration.array[offset++] = duration;
    }
  }

  var aStartPosition = geometry.createAttribute('aStartPosition', 3, function (data, i) {
    var c = geometry.centroids[i];

    data[0] = c.x - THREE.Math.randFloat(-4, 4);
    data[1] = 0;
    data[2] = c.z - THREE.Math.randFloat(-4, 4);
  });

  var aEndPosition = geometry.createAttribute('aEndPosition', 3, function (data, i) {
    geometry.centroids[i].toArray(data);
  });

  var aPivot = geometry.createAttribute('aPivot', 3, function (data, i) {
    var c = geometry.centroids[i];
    var l = THREE.Math.randFloat(0.5, 4.0);

    data[0] = 0;
    data[1] = c.y * l;
    data[2] = 0;
  });

  var axis = new THREE.Vector3();
  var aAxisAngle = geometry.createAttribute('aAxisAngle', 4, function (data, i) {
    axis.copy(geometry.centroids[i]).normalize().toArray(data);
    data[3] = Math.PI;
  });

  var material = new THREE.BAS.StandardAnimationMaterial({
    shading: THREE.SmoothShading,
    side: THREE.DoubleSide,
    uniforms: {
      uTime: { value: 0.0 }
    },
    uniformValues: {
      diffuse: new THREE.Color(0x555555),
      metalness: 1.0,
      roughness: 0.5
    },
    vertexFunctions: [THREE.BAS.ShaderChunk.cubic_bezier, THREE.BAS.ShaderChunk.quaternion_rotation, THREE.BAS.ShaderChunk.ease_back_out, THREE.BAS.ShaderChunk.ease_circ_in_out],
    vertexParameters: ['uniform float uTime;', 'attribute vec2 aDelayDuration;', 'attribute vec3 aStartPosition;', 'attribute vec3 aEndPosition;', 'attribute vec4 aAxisAngle;', 'attribute vec3 aPivot;'],
    varyingParameters: ['varying float vProgress;'],
    vertexInit: ['float progress = clamp(uTime - aDelayDuration.x, 0.0, aDelayDuration.y) / aDelayDuration.y;', 'float eased = easeCircInOut(progress);', 'vec4 quat = quatFromAxisAngle(aAxisAngle.xyz, aAxisAngle.w * (1.0 - eased));', 'vProgress = eased;'],
    vertexNormal: ['objectNormal = rotateVector(quat, objectNormal);'],
    vertexPosition: ['transformed *= progress;', 'transformed += aPivot;', 'transformed = rotateVector(quat, transformed);', 'transformed -= aPivot;', 'transformed += mix(aStartPosition, aEndPosition, easeBackOut(progress, 4.0));'],
    fragmentInit: ['if (vProgress == 0.0) discard;']
  });

  THREE.Mesh.call(this, geometry, material);

  this.frustumCulled = false;
}
Animation.prototype = Object.create(THREE.Mesh.prototype);
Animation.prototype.constructor = Animation;

Object.defineProperty(Animation.prototype, 'time', {
  get: function get() {
    return this.material.uniforms['uTime'].value;
  },
  set: function set(v) {
    this.material.uniforms['uTime'].value = v;
  }
});

Animation.prototype.animate = function (duration, options) {
  options = options || {};
  options.time = 0.0;

  var timeline = new TimelineMax({ repeat: -1, yoyo: true });
  timeline.add(TweenMax.fromTo(this, duration, { time: this.totalDuration }, options));
};

function ease(e, t, b, c, d) {
  return b + e.getRatio(t / d) * c;
}

function mapEase(e, v, a1, a2, b1, b2) {
  var t = v - a1;
  var b = b1;
  var c = b2 - b1;
  var d = a2 - a1;

  return ease(e, t, b, c, d);
}

exports.default = Animation;

},{"./three":10,"./three.bas":9,"gsap":2}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (path, done) {
  loader = new window.THREE.OBJLoader();
  loader.load(path, function (object) {
    object.traverse(function (child) {
      if (child instanceof THREE.Mesh) {
        var geometry = new THREE.Geometry().fromBufferGeometry(child.geometry);
        done(geometry);
      }
    });
  });
};

window.THREE = require("./three");
require("./OBJLoader");

var loader = undefined;

},{"./OBJLoader":6,"./three":10}],9:[function(require,module,exports){
'use strict';

THREE.BAS = {};

THREE.BAS.BaseAnimationMaterial = function (parameters, uniforms) {
  THREE.ShaderMaterial.call(this);

  var uniformValues = parameters.uniformValues;

  delete parameters.uniformValues;

  this.setValues(parameters);

  this.uniforms = THREE.UniformsUtils.merge([uniforms, this.uniforms]);

  this.setUniformValues(uniformValues);

  if (uniformValues) {
    uniformValues.map && (this.defines['USE_MAP'] = '');
    uniformValues.normalMap && (this.defines['USE_NORMALMAP'] = '');
    uniformValues.envMap && (this.defines['USE_ENVMAP'] = '');
    uniformValues.aoMap && (this.defines['USE_AOMAP'] = '');
    uniformValues.specularMap && (this.defines['USE_SPECULARMAP'] = '');
    uniformValues.alphaMap && (this.defines['USE_ALPHAMAP'] = '');
    uniformValues.lightMap && (this.defines['USE_LIGHTMAP'] = '');
    uniformValues.emissiveMap && (this.defines['USE_EMISSIVEMAP'] = '');
    uniformValues.bumpMap && (this.defines['USE_BUMPMAP'] = '');
    uniformValues.displacementMap && (this.defines['USE_DISPLACEMENTMAP'] = '');
    uniformValues.roughnessMap && (this.defines['USE_DISPLACEMENTMAP'] = '');
    uniformValues.roughnessMap && (this.defines['USE_ROUGHNESSMAP'] = '');
    uniformValues.metalnessMap && (this.defines['USE_METALNESSMAP'] = '');

    if (uniformValues.envMap) {
      this.defines['USE_ENVMAP'] = '';

      var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
      var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
      var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

      switch (uniformValues.envMap.mapping) {
        case THREE.CubeReflectionMapping:
        case THREE.CubeRefractionMapping:
          envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
          break;
        case THREE.CubeUVReflectionMapping:
        case THREE.CubeUVRefractionMapping:
          envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
          break;
        case THREE.EquirectangularReflectionMapping:
        case THREE.EquirectangularRefractionMapping:
          envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
          break;
        case THREE.SphericalReflectionMapping:
          envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
          break;
      }

      switch (uniformValues.envMap.mapping) {
        case THREE.CubeRefractionMapping:
        case THREE.EquirectangularRefractionMapping:
          envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
          break;
      }

      switch (uniformValues.combine) {
        case THREE.MixOperation:
          envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
          break;
        case THREE.AddOperation:
          envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
          break;
        case THREE.MultiplyOperation:
        default:
          envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
          break;
      }

      this.defines[envMapTypeDefine] = '';
      this.defines[envMapBlendingDefine] = '';
      this.defines[envMapModeDefine] = '';
    }
  }
};
THREE.BAS.BaseAnimationMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);
THREE.BAS.BaseAnimationMaterial.prototype.constructor = THREE.BAS.BaseAnimationMaterial;

THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues = function (values) {
  for (var key in values) {
    if (key in this.uniforms) {
      var uniform = this.uniforms[key];
      var value = values[key];

      uniform.value = value;
    }
  }
};

THREE.BAS.BaseAnimationMaterial.prototype._stringifyChunk = function (name) {
  return this[name] ? this[name].join('\n') : '';
};

/**
 * A utility class to create an animation timeline which can be baked into a (vertex) shader.
 * By default the timeline supports translation, scale and rotation. This can be extended or overridden.
 * @constructor
 */
THREE.BAS.Timeline = function () {
  /**
   * The total duration of the timeline in seconds.
   * @type {number}
   */
  this.duration = 0;

  /**
   * The name of the value that segments will use to read the time. Defaults to 'tTime'.
   * @type {string}
   */
  this.timeKey = 'tTime';

  this.segments = {};
  this.__key = 0;
};

// static definitions map
THREE.BAS.Timeline.segmentDefinitions = {};

/**
 * Registers a transition definition for use with {@link THREE.BAS.Timeline.add}.
 * @param {String} key Name of the transition. Defaults include 'scale', 'rotate' and 'translate'.
 * @param {Object} definition
 * @param {Function} definition.compiler A function that generates a glsl string for a transition segment. Accepts a THREE.BAS.TimelineSegment as the sole argument.
 * @param {*} definition.defaultFrom The initial value for a transform.from. For example, the defaultFrom for a translation is THREE.Vector3(0, 0, 0).
 * @static
 */
THREE.BAS.Timeline.register = function (key, definition) {
  THREE.BAS.Timeline.segmentDefinitions[key] = definition;
};

/**
 * Add a transition to the timeline.
 * @param {number} duration Duration in seconds
 * @param {object} transitions An object containing one or several transitions. The keys should match transform definitions.
 * The transition object for each key will be passed to the matching definition's compiler. It can have arbitrary properties, but the Timeline expects at least a 'to', 'from' and an optional 'ease'.
 * @param {number|string} [positionOffset] Position in the timeline. Defaults to the end of the timeline. If a number is provided, the transition will be inserted at that time in seconds. Strings ('+=x' or '-=x') can be used for a value relative to the end of timeline.
 */
THREE.BAS.Timeline.prototype.add = function (duration, transitions, positionOffset) {
  var start = this.duration;

  if (positionOffset !== undefined) {
    if (typeof positionOffset === 'number') {
      start = positionOffset;
    } else if (typeof positionOffset === 'string') {
      eval('start' + positionOffset);
    }

    this.duration = Math.max(this.duration, start + duration);
  } else {
    this.duration += duration;
  }

  var keys = Object.keys(transitions),
      key;

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];

    this.processTransition(key, transitions[key], start, duration);
  }
};

THREE.BAS.Timeline.prototype.processTransition = function (key, transition, start, duration) {
  var definition = THREE.BAS.Timeline.segmentDefinitions[key];

  var segments = this.segments[key];
  if (!segments) segments = this.segments[key] = [];

  if (transition.from === undefined) {
    if (segments.length === 0) {
      transition.from = definition.defaultFrom;
    } else {
      transition.from = segments[segments.length - 1].transition.to;
    }
  }

  segments.push(new THREE.BAS.TimelineSegment((this.__key++).toString(), start, duration, transition, definition.compiler));
};

/**
 * Compiles the timeline into a glsl string array that can be injected into a (vertex) shader.
 * @returns {Array}
 */
THREE.BAS.Timeline.prototype.compile = function () {
  var c = [];

  var keys = Object.keys(this.segments);
  var segments;

  for (var i = 0; i < keys.length; i++) {
    segments = this.segments[keys[i]];

    this.fillGaps(segments);

    segments.forEach(function (s) {
      c.push(s.compile());
    });
  }

  return c;
};
THREE.BAS.Timeline.prototype.fillGaps = function (segments) {
  if (segments.length === 0) return;

  var s0, s1;

  for (var i = 0; i < segments.length - 1; i++) {
    s0 = segments[i];
    s1 = segments[i + 1];

    s0.trail = s1.start - s0.end;
  }

  // pad last segment until end of timeline
  s0 = segments[segments.length - 1];
  s0.trail = this.duration - s0.end;
};

/**
 * Get a compiled glsl string with calls to transform functions for a given key.
 * The order in which these transitions are applied matters because they all operate on the same value.
 * @param {string} key A key matching a transform definition.
 * @returns {string}
 */
THREE.BAS.Timeline.prototype.getTransformCalls = function (key) {
  var t = this.timeKey;

  return this.segments[key] ? this.segments[key].map(function (s) {
    return 'applyTransform' + s.key + '(' + t + ', transformed);';
  }).join('\n') : '';
};

THREE.BAS.ShaderChunk = {};

THREE.BAS.ShaderChunk["catmull_rom_spline"] = "vec4 catmullRomSpline(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t, vec2 c) {\n    vec4 v0 = (p2 - p0) * c.x;\n    vec4 v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec4((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\nvec4 catmullRomSpline(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t) {\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\n}\n\nvec3 catmullRomSpline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t, vec2 c) {\n    vec3 v0 = (p2 - p0) * c.x;\n    vec3 v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\nvec3 catmullRomSpline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t) {\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\n}\n\nvec2 catmullRomSpline(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t, vec2 c) {\n    vec2 v0 = (p2 - p0) * c.x;\n    vec2 v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec2((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\nvec2 catmullRomSpline(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t) {\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\n}\n\nfloat catmullRomSpline(float p0, float p1, float p2, float p3, float t, vec2 c) {\n    float v0 = (p2 - p0) * c.x;\n    float v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return float((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\nfloat catmullRomSpline(float p0, float p1, float p2, float p3, float t) {\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\n}\n\nivec4 getCatmullRomSplineIndices(float l, float p) {\n    float index = floor(p);\n    int i0 = int(max(0.0, index - 1.0));\n    int i1 = int(index);\n    int i2 = int(min(index + 1.0, l));\n    int i3 = int(min(index + 2.0, l));\n\n    return ivec4(i0, i1, i2, i3);\n}\n\nivec4 getCatmullRomSplineIndicesClosed(float l, float p) {\n    float index = floor(p);\n    int i0 = int(index == 0.0 ? l : index - 1.0);\n    int i1 = int(index);\n    int i2 = int(mod(index + 1.0, l));\n    int i3 = int(mod(index + 2.0, l));\n\n    return ivec4(i0, i1, i2, i3);\n}\n";

THREE.BAS.ShaderChunk["cubic_bezier"] = "vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t) {\n    float tn = 1.0 - t;\n\n    return tn * tn * tn * p0 + 3.0 * tn * tn * t * c0 + 3.0 * tn * t * t * c1 + t * t * t * p1;\n}\n\nvec2 cubicBezier(vec2 p0, vec2 c0, vec2 c1, vec2 p1, float t) {\n    float tn = 1.0 - t;\n\n    return tn * tn * tn * p0 + 3.0 * tn * tn * t * c0 + 3.0 * tn * t * t * c1 + t * t * t * p1;\n}\n";

THREE.BAS.ShaderChunk["ease_back_in"] = "float easeBackIn(float p, float amplitude) {\n    return p * p * ((amplitude + 1.0) * p - amplitude);\n}\n\nfloat easeBackIn(float p) {\n    return easeBackIn(p, 1.70158);\n}\n\nfloat easeBackIn(float t, float b, float c, float d, float amplitude) {\n    return b + easeBackIn(t / d, amplitude) * c;\n}\n\nfloat easeBackIn(float t, float b, float c, float d) {\n    return b + easeBackIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_back_in_out"] = "float easeBackInOut(float p, float amplitude) {\n    amplitude *= 1.525;\n\n    return ((p *= 2.0) < 1.0) ? 0.5 * p * p * ((amplitude + 1.0) * p - amplitude) : 0.5 * ((p -= 2.0) * p * ((amplitude + 1.0) * p + amplitude) + 2.0);\n}\n\nfloat easeBackInOut(float p) {\n    return easeBackInOut(p, 1.70158);\n}\n\nfloat easeBackInOut(float t, float b, float c, float d, float amplitude) {\n    return b + easeBackInOut(t / d, amplitude) * c;\n}\n\nfloat easeBackInOut(float t, float b, float c, float d) {\n    return b + easeBackInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_back_out"] = "float easeBackOut(float p, float amplitude) {\n    return ((p = p - 1.0) * p * ((amplitude + 1.0) * p + amplitude) + 1.0);\n}\n\nfloat easeBackOut(float p) {\n    return easeBackOut(p, 1.70158);\n}\n\nfloat easeBackOut(float t, float b, float c, float d, float amplitude) {\n    return b + easeBackOut(t / d, amplitude) * c;\n}\n\nfloat easeBackOut(float t, float b, float c, float d) {\n    return b + easeBackOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_bezier"] = "float easeBezier(float p, vec4 curve) {\n    float ip = 1.0 - p;\n    return (3.0 * ip * ip * p * curve.xy + 3.0 * ip * p * p * curve.zw + p * p * p).y;\n}\n\nfloat easeBezier(float t, float b, float c, float d, vec4 curve) {\n    return b + easeBezier(t / d, curve) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_bounce_in"] = "float easeBounceIn(float p) {\n    if ((p = 1.0 - p) < 1.0 / 2.75) {\n        return 1.0 - (7.5625 * p * p);\n    } else if (p < 2.0 / 2.75) {\n        return 1.0 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n    } else if (p < 2.5 / 2.75) {\n        return 1.0 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n    }\n    return 1.0 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n}\n\nfloat easeBounceIn(float t, float b, float c, float d) {\n    return b + easeBounceIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_bounce_in_out"] = "float easeBounceInOut(float p) {\n    bool invert = (p < 0.5);\n\n    p = invert ? (1.0 - (p * 2.0)) : ((p * 2.0) - 1.0);\n\n    if (p < 1.0 / 2.75) {\n        p = 7.5625 * p * p;\n    } else if (p < 2.0 / 2.75) {\n        p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n    } else if (p < 2.5 / 2.75) {\n        p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n    } else {\n        p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n    }\n\n    return invert ? (1.0 - p) * 0.5 : p * 0.5 + 0.5;\n}\n\nfloat easeBounceInOut(float t, float b, float c, float d) {\n    return b + easeBounceInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_bounce_out"] = "float easeBounceOut(float p) {\n    if (p < 1.0 / 2.75) {\n        return 7.5625 * p * p;\n    } else if (p < 2.0 / 2.75) {\n        return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n    } else if (p < 2.5 / 2.75) {\n        return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n    }\n    return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n}\n\nfloat easeBounceOut(float t, float b, float c, float d) {\n    return b + easeBounceOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_circ_in"] = "float easeCircIn(float p) {\n    return -(sqrt(1.0 - p * p) - 1.0);\n}\n\nfloat easeCircIn(float t, float b, float c, float d) {\n    return b + easeCircIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_circ_in_out"] = "float easeCircInOut(float p) {\n    return ((p *= 2.0) < 1.0) ? -0.5 * (sqrt(1.0 - p * p) - 1.0) : 0.5 * (sqrt(1.0 - (p -= 2.0) * p) + 1.0);\n}\n\nfloat easeCircInOut(float t, float b, float c, float d) {\n    return b + easeCircInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_circ_out"] = "float easeCircOut(float p) {\n  return sqrt(1.0 - (p = p - 1.0) * p);\n}\n\nfloat easeCircOut(float t, float b, float c, float d) {\n  return b + easeCircOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_cubic_in"] = "float easeCubicIn(float t) {\n  return t * t * t;\n}\n\nfloat easeCubicIn(float t, float b, float c, float d) {\n  return b + easeCubicIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_cubic_in_out"] = "float easeCubicInOut(float t) {\n  return (t /= 0.5) < 1.0 ? 0.5 * t * t * t : 0.5 * ((t-=2.0) * t * t + 2.0);\n}\n\nfloat easeCubicInOut(float t, float b, float c, float d) {\n  return b + easeCubicInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_cubic_out"] = "float easeCubicOut(float t) {\n  float f = t - 1.0;\n  return f * f * f + 1.0;\n}\n\nfloat easeCubicOut(float t, float b, float c, float d) {\n  return b + easeCubicOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_elastic_in"] = "float easeElasticIn(float p, float amplitude, float period) {\n    float p1 = max(amplitude, 1.0);\n    float p2 = period / min(amplitude, 1.0);\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\n\n    return -(p1 * pow(2.0, 10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2));\n}\n\nfloat easeElasticIn(float p) {\n    return easeElasticIn(p, 1.0, 0.3);\n}\n\nfloat easeElasticIn(float t, float b, float c, float d, float amplitude, float period) {\n    return b + easeElasticIn(t / d, amplitude, period) * c;\n}\n\nfloat easeElasticIn(float t, float b, float c, float d) {\n    return b + easeElasticIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_elastic_in_out"] = "float easeElasticInOut(float p, float amplitude, float period) {\n    float p1 = max(amplitude, 1.0);\n    float p2 = period / min(amplitude, 1.0);\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\n\n    return ((p *= 2.0) < 1.0) ? -0.5 * (p1 * pow(2.0, 10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2)) : p1 * pow(2.0, -10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2) * 0.5 + 1.0;\n}\n\nfloat easeElasticInOut(float p) {\n    return easeElasticInOut(p, 1.0, 0.3);\n}\n\nfloat easeElasticInOut(float t, float b, float c, float d, float amplitude, float period) {\n    return b + easeElasticInOut(t / d, amplitude, period) * c;\n}\n\nfloat easeElasticInOut(float t, float b, float c, float d) {\n    return b + easeElasticInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_elastic_out"] = "float easeElasticOut(float p, float amplitude, float period) {\n    float p1 = max(amplitude, 1.0);\n    float p2 = period / min(amplitude, 1.0);\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\n\n    return p1 * pow(2.0, -10.0 * p) * sin((p - p3) * PI2 / p2) + 1.0;\n}\n\nfloat easeElasticOut(float p) {\n    return easeElasticOut(p, 1.0, 0.3);\n}\n\nfloat easeElasticOut(float t, float b, float c, float d, float amplitude, float period) {\n    return b + easeElasticOut(t / d, amplitude, period) * c;\n}\n\nfloat easeElasticOut(float t, float b, float c, float d) {\n    return b + easeElasticOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_expo_in"] = "float easeExpoIn(float p) {\n    return pow(2.0, 10.0 * (p - 1.0));\n}\n\nfloat easeExpoIn(float t, float b, float c, float d) {\n    return b + easeExpoIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_expo_in_out"] = "float easeExpoInOut(float p) {\n    return ((p *= 2.0) < 1.0) ? 0.5 * pow(2.0, 10.0 * (p - 1.0)) : 0.5 * (2.0 - pow(2.0, -10.0 * (p - 1.0)));\n}\n\nfloat easeExpoInOut(float t, float b, float c, float d) {\n    return b + easeExpoInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_expo_out"] = "float easeExpoOut(float p) {\n  return 1.0 - pow(2.0, -10.0 * p);\n}\n\nfloat easeExpoOut(float t, float b, float c, float d) {\n  return b + easeExpoOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quad_in"] = "float easeQuadIn(float t) {\n    return t * t;\n}\n\nfloat easeQuadIn(float t, float b, float c, float d) {\n  return b + easeQuadIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quad_in_out"] = "float easeQuadInOut(float t) {\n    float p = 2.0 * t * t;\n    return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nfloat easeQuadInOut(float t, float b, float c, float d) {\n    return b + easeQuadInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quad_out"] = "float easeQuadOut(float t) {\n  return -t * (t - 2.0);\n}\n\nfloat easeQuadOut(float t, float b, float c, float d) {\n  return b + easeQuadOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quart_in"] = "float easeQuartIn(float t) {\n  return t * t * t * t;\n}\n\nfloat easeQuartIn(float t, float b, float c, float d) {\n  return b + easeQuartIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quart_in_out"] = "float easeQuartInOut(float t) {\n    return t < 0.5 ? 8.0 * pow(t, 4.0) : -8.0 * pow(t - 1.0, 4.0) + 1.0;\n}\n\nfloat easeQuartInOut(float t, float b, float c, float d) {\n    return b + easeQuartInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quart_out"] = "float easeQuartOut(float t) {\n  return 1.0 - pow(1.0 - t, 4.0);\n}\n\nfloat easeQuartOut(float t, float b, float c, float d) {\n  return b + easeQuartOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quint_in"] = "float easeQuintIn(float t) {\n    return pow(t, 5.0);\n}\n\nfloat easeQuintIn(float t, float b, float c, float d) {\n    return b + easeQuintIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quint_in_out"] = "float easeQuintInOut(float t) {\n    return (t /= 0.5) < 1.0 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2.0) * t * t * t * t + 2.0);\n}\n\nfloat easeQuintInOut(float t, float b, float c, float d) {\n    return b + easeQuintInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_quint_out"] = "float easeQuintOut(float t) {\n    return (t -= 1.0) * t * t * t * t + 1.0;\n}\n\nfloat easeQuintOut(float t, float b, float c, float d) {\n    return b + easeQuintOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_sine_in"] = "float easeSineIn(float p) {\n  return -cos(p * 1.57079632679) + 1.0;\n}\n\nfloat easeSineIn(float t, float b, float c, float d) {\n  return b + easeSineIn(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_sine_in_out"] = "float easeSineInOut(float p) {\n  return -0.5 * (cos(PI * p) - 1.0);\n}\n\nfloat easeSineInOut(float t, float b, float c, float d) {\n  return b + easeSineInOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["ease_sine_out"] = "float easeSineOut(float p) {\n  return sin(p * 1.57079632679);\n}\n\nfloat easeSineOut(float t, float b, float c, float d) {\n  return b + easeSineOut(t / d) * c;\n}\n";

THREE.BAS.ShaderChunk["quaternion_rotation"] = "vec3 rotateVector(vec4 q, vec3 v) {\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle) {\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n";

THREE.BAS.ShaderChunk["quaternion_slerp"] = "vec4 quatSlerp(vec4 q0, vec4 q1, float t) {\n    float s = 1.0 - t;\n    float c = dot(q0, q1);\n    float dir = -1.0; //c >= 0.0 ? 1.0 : -1.0;\n    float sqrSn = 1.0 - c * c;\n\n    if (sqrSn > 2.220446049250313e-16) {\n        float sn = sqrt(sqrSn);\n        float len = atan(sn, c * dir);\n\n        s = sin(s * len) / sn;\n        t = sin(t * len) / sn;\n    }\n\n    float tDir = t * dir;\n\n    return normalize(q0 * s + q1 * tDir);\n}\n";

/**
 * Collection of utility functions.
 * @namespace
 */
THREE.BAS.Utils = {
  /**
   * Duplicates vertices so each face becomes separate.
   * Same as THREE.ExplodeModifier.
   *
   * @param {THREE.Geometry} geometry Geometry instance to modify.
   */
  separateFaces: function separateFaces(geometry) {
    var vertices = [];

    for (var i = 0, il = geometry.faces.length; i < il; i++) {
      var n = vertices.length;
      var face = geometry.faces[i];

      var a = face.a;
      var b = face.b;
      var c = face.c;

      var va = geometry.vertices[a];
      var vb = geometry.vertices[b];
      var vc = geometry.vertices[c];

      vertices.push(va.clone());
      vertices.push(vb.clone());
      vertices.push(vc.clone());

      face.a = n;
      face.b = n + 1;
      face.c = n + 2;
    }

    geometry.vertices = vertices;
  },

  /**
   * Compute the centroid (center) of a THREE.Face3.
   *
   * @param {THREE.Geometry} geometry Geometry instance the face is in.
   * @param {THREE.Face3} face Face object from the THREE.Geometry.faces array
   * @param {THREE.Vector3=} v Optional vector to store result in.
   * @returns {THREE.Vector3}
   */
  computeCentroid: function computeCentroid(geometry, face, v) {
    var a = geometry.vertices[face.a];
    var b = geometry.vertices[face.b];
    var c = geometry.vertices[face.c];

    v = v || new THREE.Vector3();

    v.x = (a.x + b.x + c.x) / 3;
    v.y = (a.y + b.y + c.y) / 3;
    v.z = (a.z + b.z + c.z) / 3;

    return v;
  },

  /**
   * Get a random vector between box.min and box.max.
   *
   * @param {THREE.Box3} box THREE.Box3 instance.
   * @param {THREE.Vector3=} v Optional vector to store result in.
   * @returns {THREE.Vector3}
   */
  randomInBox: function randomInBox(box, v) {
    v = v || new THREE.Vector3();

    v.x = THREE.Math.randFloat(box.min.x, box.max.x);
    v.y = THREE.Math.randFloat(box.min.y, box.max.y);
    v.z = THREE.Math.randFloat(box.min.z, box.max.z);

    return v;
  },

  /**
   * Get a random axis for quaternion rotation.
   *
   * @param {THREE.Vector3=} v Option vector to store result in.
   * @returns {THREE.Vector3}
   */
  randomAxis: function randomAxis(v) {
    v = v || new THREE.Vector3();

    v.x = THREE.Math.randFloatSpread(2.0);
    v.y = THREE.Math.randFloatSpread(2.0);
    v.z = THREE.Math.randFloatSpread(2.0);
    v.normalize();

    return v;
  },

  /**
   * Create a THREE.BAS.DepthAnimationMaterial for shadows from a THREE.SpotLight or THREE.DirectionalLight by copying relevant shader chunks.
   * Uniform values must be manually synced between the source material and the depth material.
   *
   * @see {@link http://three-bas-examples.surge.sh/examples/shadows/}
   *
   * @param {THREE.BAS.BaseAnimationMaterial} sourceMaterial Instance to get the shader chunks from.
   * @returns {THREE.BAS.DepthAnimationMaterial}
   */
  createDepthAnimationMaterial: function createDepthAnimationMaterial(sourceMaterial) {
    return new THREE.BAS.DepthAnimationMaterial({
      uniforms: sourceMaterial.uniforms,
      vertexFunctions: sourceMaterial.vertexFunctions,
      vertexParameters: sourceMaterial.vertexParameters,
      vertexInit: sourceMaterial.vertexInit,
      vertexPosition: sourceMaterial.vertexPosition
    });
  },

  /**
   * Create a THREE.BAS.DistanceAnimationMaterial for shadows from a THREE.PointLight by copying relevant shader chunks.
   * Uniform values must be manually synced between the source material and the distance material.
   *
   * @see {@link http://three-bas-examples.surge.sh/examples/shadows/}
   *
   * @param {THREE.BAS.BaseAnimationMaterial} sourceMaterial Instance to get the shader chunks from.
   * @returns {THREE.BAS.DistanceAnimationMaterial}
   */
  createDistanceAnimationMaterial: function createDistanceAnimationMaterial(sourceMaterial) {
    return new THREE.BAS.DistanceAnimationMaterial({
      uniforms: sourceMaterial.uniforms,
      vertexFunctions: sourceMaterial.vertexFunctions,
      vertexParameters: sourceMaterial.vertexParameters,
      vertexInit: sourceMaterial.vertexInit,
      vertexPosition: sourceMaterial.vertexPosition
    });
  }
};

/**
 * A THREE.BufferGeometry for animating individual faces of a THREE.Geometry.
 *
 * @param {THREE.Geometry} model The THREE.Geometry to base this geometry on.
 * @param {Object=} options
 * @param {Boolean=} options.computeCentroids If true, a centroids will be computed for each face and stored in THREE.BAS.ModelBufferGeometry.centroids.
 * @param {Boolean=} options.localizeFaces If true, the positions for each face will be stored relative to the centroid. This is useful if you want to rotate or scale faces around their center.
 * @constructor
 */
THREE.BAS.ModelBufferGeometry = function (model, options) {
  THREE.BufferGeometry.call(this);

  /**
   * A reference to the geometry used to create this instance.
   * @type {THREE.Geometry}
   */
  this.modelGeometry = model;

  /**
   * Number of faces of the model.
   * @type {Number}
   */
  this.faceCount = this.modelGeometry.faces.length;

  /**
   * Number of vertices of the model.
   * @type {Number}
   */
  this.vertexCount = this.modelGeometry.vertices.length;

  options = options || {};
  options.computeCentroids && this.computeCentroids();

  this.bufferIndices();
  this.bufferPositions(options.localizeFaces);
};
THREE.BAS.ModelBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
THREE.BAS.ModelBufferGeometry.prototype.constructor = THREE.BAS.ModelBufferGeometry;

/**
 * Computes a centroid for each face and stores it in THREE.BAS.ModelBufferGeometry.centroids.
 */
THREE.BAS.ModelBufferGeometry.prototype.computeCentroids = function () {
  /**
   * An array of centroids corresponding to the faces of the model.
   *
   * @type {Array}
   */
  this.centroids = [];

  for (var i = 0; i < this.faceCount; i++) {
    this.centroids[i] = THREE.BAS.Utils.computeCentroid(this.modelGeometry, this.modelGeometry.faces[i]);
  }
};

THREE.BAS.ModelBufferGeometry.prototype.bufferIndices = function () {
  var indexBuffer = new Uint32Array(this.faceCount * 3);

  this.setIndex(new THREE.BufferAttribute(indexBuffer, 1));

  for (var i = 0, offset = 0; i < this.faceCount; i++, offset += 3) {
    var face = this.modelGeometry.faces[i];

    indexBuffer[offset] = face.a;
    indexBuffer[offset + 1] = face.b;
    indexBuffer[offset + 2] = face.c;
  }
};

THREE.BAS.ModelBufferGeometry.prototype.bufferPositions = function (localizeFaces) {
  var positionBuffer = this.createAttribute('position', 3).array;
  var i, offset;

  if (localizeFaces === true) {
    for (i = 0; i < this.faceCount; i++) {
      var face = this.modelGeometry.faces[i];
      var centroid = this.centroids ? this.centroids[i] : THREE.BAS.Utils.computeCentroid(this.modelGeometry, face);

      var a = this.modelGeometry.vertices[face.a];
      var b = this.modelGeometry.vertices[face.b];
      var c = this.modelGeometry.vertices[face.c];

      positionBuffer[face.a * 3] = a.x - centroid.x;
      positionBuffer[face.a * 3 + 1] = a.y - centroid.y;
      positionBuffer[face.a * 3 + 2] = a.z - centroid.z;

      positionBuffer[face.b * 3] = b.x - centroid.x;
      positionBuffer[face.b * 3 + 1] = b.y - centroid.y;
      positionBuffer[face.b * 3 + 2] = b.z - centroid.z;

      positionBuffer[face.c * 3] = c.x - centroid.x;
      positionBuffer[face.c * 3 + 1] = c.y - centroid.y;
      positionBuffer[face.c * 3 + 2] = c.z - centroid.z;
    }
  } else {
    for (i = 0, offset = 0; i < this.vertexCount; i++, offset += 3) {
      var vertex = this.modelGeometry.vertices[i];

      positionBuffer[offset] = vertex.x;
      positionBuffer[offset + 1] = vertex.y;
      positionBuffer[offset + 2] = vertex.z;
    }
  }
};

/**
 * Creates a THREE.BufferAttribute with UV coordinates.
 */
THREE.BAS.ModelBufferGeometry.prototype.bufferUVs = function () {
  var uvBuffer = this.createAttribute('uv', 2).array;

  for (var i = 0; i < this.faceCount; i++) {

    var face = this.modelGeometry.faces[i];
    var uv;

    uv = this.modelGeometry.faceVertexUvs[0][i][0];
    uvBuffer[face.a * 2] = uv.x;
    uvBuffer[face.a * 2 + 1] = uv.y;

    uv = this.modelGeometry.faceVertexUvs[0][i][1];
    uvBuffer[face.b * 2] = uv.x;
    uvBuffer[face.b * 2 + 1] = uv.y;

    uv = this.modelGeometry.faceVertexUvs[0][i][2];
    uvBuffer[face.c * 2] = uv.x;
    uvBuffer[face.c * 2 + 1] = uv.y;
  }
};

/**
 * Creates a THREE.BufferAttribute on this geometry instance.
 *
 * @param {String} name Name of the attribute.
 * @param {int} itemSize Number of floats per vertex (typically 1, 2, 3 or 4).
 * @param {function=} factory Function that will be called for each face upon creation. Accepts 3 arguments: data[], index and faceCount. Calls setFaceData.
 *
 * @returns {THREE.BufferAttribute}
 */
THREE.BAS.ModelBufferGeometry.prototype.createAttribute = function (name, itemSize, factory) {
  var buffer = new Float32Array(this.vertexCount * itemSize);
  var attribute = new THREE.BufferAttribute(buffer, itemSize);

  this.addAttribute(name, attribute);

  if (factory) {
    var data = [];

    for (var i = 0; i < this.faceCount; i++) {
      factory(data, i, this.faceCount);
      this.setFaceData(attribute, i, data);
    }
  }

  return attribute;
};

/**
 * Sets data for all vertices of a face at a given index.
 * Usually called in a loop.
 *
 * @param {String|THREE.BufferAttribute} attribute The attribute or attribute name where the data is to be stored.
 * @param {int} faceIndex Index of the face in the buffer geometry.
 * @param {Array} data Array of data. Length should be equal to item size of the attribute.
 */
THREE.BAS.ModelBufferGeometry.prototype.setFaceData = function (attribute, faceIndex, data) {
  attribute = typeof attribute === 'string' ? this.attributes[attribute] : attribute;

  var offset = faceIndex * 3 * attribute.itemSize;

  for (var i = 0; i < 3; i++) {
    for (var j = 0; j < attribute.itemSize; j++) {
      attribute.array[offset++] = data[j];
    }
  }
};

/**
 * A THREE.BufferGeometry where a 'prefab' geometry is repeated a number of times.
 *
 * @param {THREE.Geometry} prefab The THREE.Geometry instance to repeat.
 * @param {Number} count The number of times to repeat the geometry.
 * @constructor
 */
THREE.BAS.PrefabBufferGeometry = function (prefab, count) {
  THREE.BufferGeometry.call(this);

  /**
   * A reference to the prefab geometry used to create this instance.
   * @type {THREE.Geometry}
   */
  this.prefabGeometry = prefab;

  /**
   * Number of prefabs.
   * @type {Number}
   */
  this.prefabCount = count;

  /**
   * Number of vertices of the prefab.
   * @type {Number}
   */
  this.prefabVertexCount = prefab.vertices.length;

  this.bufferIndices();
  this.bufferPositions();
};
THREE.BAS.PrefabBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
THREE.BAS.PrefabBufferGeometry.prototype.constructor = THREE.BAS.PrefabBufferGeometry;

THREE.BAS.PrefabBufferGeometry.prototype.bufferIndices = function () {
  var prefabFaceCount = this.prefabGeometry.faces.length;
  var prefabIndexCount = this.prefabGeometry.faces.length * 3;
  var prefabIndices = [];

  for (var h = 0; h < prefabFaceCount; h++) {
    var face = this.prefabGeometry.faces[h];
    prefabIndices.push(face.a, face.b, face.c);
  }

  var indexBuffer = new Uint32Array(this.prefabCount * prefabIndexCount);

  this.setIndex(new THREE.BufferAttribute(indexBuffer, 1));

  for (var i = 0; i < this.prefabCount; i++) {
    for (var k = 0; k < prefabIndexCount; k++) {
      indexBuffer[i * prefabIndexCount + k] = prefabIndices[k] + i * this.prefabVertexCount;
    }
  }
};

THREE.BAS.PrefabBufferGeometry.prototype.bufferPositions = function () {
  var positionBuffer = this.createAttribute('position', 3).array;

  for (var i = 0, offset = 0; i < this.prefabCount; i++) {
    for (var j = 0; j < this.prefabVertexCount; j++, offset += 3) {
      var prefabVertex = this.prefabGeometry.vertices[j];

      positionBuffer[offset] = prefabVertex.x;
      positionBuffer[offset + 1] = prefabVertex.y;
      positionBuffer[offset + 2] = prefabVertex.z;
    }
  }
};

/**
 * Creates a THREE.BufferAttribute with UV coordinates.
 */
THREE.BAS.PrefabBufferGeometry.prototype.bufferUvs = function () {
  var prefabFaceCount = this.prefabGeometry.faces.length;
  var prefabVertexCount = this.prefabVertexCount = this.prefabGeometry.vertices.length;
  var prefabUvs = [];

  for (var h = 0; h < prefabFaceCount; h++) {
    var face = this.prefabGeometry.faces[h];
    var uv = this.prefabGeometry.faceVertexUvs[0][h];

    prefabUvs[face.a] = uv[0];
    prefabUvs[face.b] = uv[1];
    prefabUvs[face.c] = uv[2];
  }

  var uvBuffer = this.createAttribute('uv', 2);

  for (var i = 0, offset = 0; i < this.prefabCount; i++) {
    for (var j = 0; j < prefabVertexCount; j++, offset += 2) {
      var prefabUv = prefabUvs[j];

      uvBuffer.array[offset] = prefabUv.x;
      uvBuffer.array[offset + 1] = prefabUv.y;
    }
  }
};

/**
 * Creates a THREE.BufferAttribute on this geometry instance.
 *
 * @param {String} name Name of the attribute.
 * @param {Number} itemSize Number of floats per vertex (typically 1, 2, 3 or 4).
 * @param {function=} factory Function that will be called for each prefab upon creation. Accepts 3 arguments: data[], index and prefabCount. Calls setPrefabData.
 *
 * @returns {THREE.BufferAttribute}
 */
THREE.BAS.PrefabBufferGeometry.prototype.createAttribute = function (name, itemSize, factory) {
  var buffer = new Float32Array(this.prefabCount * this.prefabVertexCount * itemSize);
  var attribute = new THREE.BufferAttribute(buffer, itemSize);

  this.addAttribute(name, attribute);

  if (factory) {
    var data = [];

    for (var i = 0; i < this.prefabCount; i++) {
      factory(data, i, this.prefabCount);
      this.setPrefabData(attribute, i, data);
    }
  }

  return attribute;
};

/**
 * Sets data for all vertices of a prefab at a given index.
 * Usually called in a loop.
 *
 * @param {String|THREE.BufferAttribute} attribute The attribute or attribute name where the data is to be stored.
 * @param {Number} prefabIndex Index of the prefab in the buffer geometry.
 * @param {Array} data Array of data. Length should be equal to item size of the attribute.
 */
THREE.BAS.PrefabBufferGeometry.prototype.setPrefabData = function (attribute, prefabIndex, data) {
  attribute = typeof attribute === 'string' ? this.attributes[attribute] : attribute;

  var offset = prefabIndex * this.prefabVertexCount * attribute.itemSize;

  for (var i = 0; i < this.prefabVertexCount; i++) {
    for (var j = 0; j < attribute.itemSize; j++) {
      attribute.array[offset++] = data[j];
    }
  }
};

/**
 * Extends THREE.MeshBasicMaterial with custom shader chunks.
 *
 * @see http://three-bas-examples.surge.sh/examples/materials_basic/
 *
 * @param {Object} parameters Object containing material properties and custom shader chunks.
 * @constructor
 */
THREE.BAS.BasicAnimationMaterial = function (parameters) {
  this.varyingParameters = [];

  this.vertexFunctions = [];
  this.vertexParameters = [];
  this.vertexInit = [];
  this.vertexNormal = [];
  this.vertexPosition = [];
  this.vertexColor = [];

  this.fragmentFunctions = [];
  this.fragmentParameters = [];
  this.fragmentInit = [];
  this.fragmentMap = [];
  this.fragmentDiffuse = [];

  var basicShader = THREE.ShaderLib['basic'];

  THREE.BAS.BaseAnimationMaterial.call(this, parameters, basicShader.uniforms);

  this.lights = false;
  this.vertexShader = this._concatVertexShader();
  this.fragmentShader = this._concatFragmentShader();
};
THREE.BAS.BasicAnimationMaterial.prototype = Object.create(THREE.BAS.BaseAnimationMaterial.prototype);
THREE.BAS.BasicAnimationMaterial.prototype.constructor = THREE.BAS.BasicAnimationMaterial;

THREE.BAS.BasicAnimationMaterial.prototype._concatVertexShader = function () {
  // based on THREE.ShaderLib.basic
  return ['#include <common>', '#include <uv_pars_vertex>', '#include <uv2_pars_vertex>', '#include <envmap_pars_vertex>', '#include <color_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', this._stringifyChunk('vertexFunctions'), this._stringifyChunk('vertexParameters'), this._stringifyChunk('varyingParameters'), "void main() {", this._stringifyChunk('vertexInit'), '#include <uv_vertex>', '#include <uv2_vertex>', '#include <color_vertex>', '#include <skinbase_vertex>', "	#ifdef USE_ENVMAP", '#include <beginnormal_vertex>', this._stringifyChunk('vertexNormal'), '#include <morphnormal_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', "	#endif", '#include <begin_vertex>', this._stringifyChunk('vertexPosition'), this._stringifyChunk('vertexColor'), '#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <logdepthbuf_vertex>', '#include <worldpos_vertex>', '#include <clipping_planes_vertex>', '#include <envmap_vertex>', "}"].join("\n");
};

THREE.BAS.BasicAnimationMaterial.prototype._concatFragmentShader = function () {
  return ["uniform vec3 diffuse;", "uniform float opacity;", this._stringifyChunk('fragmentFunctions'), this._stringifyChunk('fragmentParameters'), this._stringifyChunk('varyingParameters'), "#ifndef FLAT_SHADED", "	varying vec3 vNormal;", "#endif", '#include <common>', '#include <color_pars_fragment>', '#include <uv_pars_fragment>', '#include <uv2_pars_fragment>', '#include <map_pars_fragment>', '#include <alphamap_pars_fragment>', '#include <aomap_pars_fragment>', '#include <envmap_pars_fragment>', '#include <fog_pars_fragment>', '#include <specularmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', "void main() {", '#include <clipping_planes_fragment>', this._stringifyChunk('fragmentInit'), "	vec4 diffuseColor = vec4( diffuse, opacity );", this._stringifyChunk('fragmentDiffuse'), '#include <logdepthbuf_fragment>', this._stringifyChunk('fragmentMap') || '#include <map_fragment>', '#include <color_fragment>', '#include <alphamap_fragment>', '#include <alphatest_fragment>', '#include <specularmap_fragment>', "	ReflectedLight reflectedLight;", "	reflectedLight.directDiffuse = vec3( 0.0 );", "	reflectedLight.directSpecular = vec3( 0.0 );", "	reflectedLight.indirectDiffuse = diffuseColor.rgb;", "	reflectedLight.indirectSpecular = vec3( 0.0 );", '#include <aomap_fragment>', "	vec3 outgoingLight = reflectedLight.indirectDiffuse;", '#include <normal_flip>', '#include <envmap_fragment>', "	gl_FragColor = vec4( outgoingLight, diffuseColor.a );", '#include <premultiplied_alpha_fragment>', '#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', "}"].join('\n');
};

THREE.BAS.DepthAnimationMaterial = function (parameters) {
  this.depthPacking = THREE.RGBADepthPacking;
  this.clipping = true;

  this.vertexFunctions = [];
  this.vertexParameters = [];
  this.vertexInit = [];
  this.vertexPosition = [];

  THREE.BAS.BaseAnimationMaterial.call(this, parameters);

  var depthShader = THREE.ShaderLib['depth'];

  this.uniforms = THREE.UniformsUtils.merge([depthShader.uniforms, this.uniforms]);
  this.vertexShader = this._concatVertexShader();
  this.fragmentShader = depthShader.fragmentShader;
};
THREE.BAS.DepthAnimationMaterial.prototype = Object.create(THREE.BAS.BaseAnimationMaterial.prototype);
THREE.BAS.DepthAnimationMaterial.prototype.constructor = THREE.BAS.DepthAnimationMaterial;

THREE.BAS.DepthAnimationMaterial.prototype._concatVertexShader = function () {
  return [THREE.ShaderChunk["common"], THREE.ShaderChunk["uv_pars_vertex"], THREE.ShaderChunk["displacementmap_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["logdepthbuf_pars_vertex"], THREE.ShaderChunk["clipping_planes_pars_vertex"], this._stringifyChunk('vertexFunctions'), this._stringifyChunk('vertexParameters'), 'void main() {', this._stringifyChunk('vertexInit'), THREE.ShaderChunk["uv_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["begin_vertex"], this._stringifyChunk('vertexPosition'), THREE.ShaderChunk["displacementmap_vertex"], THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["project_vertex"], THREE.ShaderChunk["logdepthbuf_vertex"], THREE.ShaderChunk["clipping_planes_vertex"], '}'].join('\n');
};

THREE.BAS.DistanceAnimationMaterial = function (parameters) {
  this.depthPacking = THREE.RGBADepthPacking;
  this.clipping = true;

  this.vertexFunctions = [];
  this.vertexParameters = [];
  this.vertexInit = [];
  this.vertexPosition = [];

  THREE.BAS.BaseAnimationMaterial.call(this, parameters);

  var distanceShader = THREE.ShaderLib['distanceRGBA'];

  this.uniforms = THREE.UniformsUtils.merge([distanceShader.uniforms, this.uniforms]);
  this.vertexShader = this._concatVertexShader();
  this.fragmentShader = distanceShader.fragmentShader;
};
THREE.BAS.DistanceAnimationMaterial.prototype = Object.create(THREE.BAS.BaseAnimationMaterial.prototype);
THREE.BAS.DistanceAnimationMaterial.prototype.constructor = THREE.BAS.DistanceAnimationMaterial;

THREE.BAS.DistanceAnimationMaterial.prototype._concatVertexShader = function () {
  return ['varying vec4 vWorldPosition;', THREE.ShaderChunk["common"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["clipping_planes_pars_vertex"], this._stringifyChunk('vertexFunctions'), this._stringifyChunk('vertexParameters'), 'void main() {', this._stringifyChunk('vertexInit'), THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["begin_vertex"], this._stringifyChunk('vertexPosition'), THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["project_vertex"], THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["clipping_planes_vertex"], 'vWorldPosition = worldPosition;', '}'].join('\n');
};

/**
 * Extends THREE.MeshPhongMaterial with custom shader chunks.
 *
 * @see http://three-bas-examples.surge.sh/examples/materials_phong/
 *
 * @param {Object} parameters Object containing material properties and custom shader chunks.
 * @constructor
 */
THREE.BAS.PhongAnimationMaterial = function (parameters) {
  this.varyingParameters = [];

  this.vertexFunctions = [];
  this.vertexParameters = [];
  this.vertexInit = [];
  this.vertexNormal = [];
  this.vertexPosition = [];
  this.vertexColor = [];

  this.fragmentFunctions = [];
  this.fragmentParameters = [];
  this.fragmentInit = [];
  this.fragmentMap = [];
  this.fragmentDiffuse = [];
  this.fragmentEmissive = [];
  this.fragmentSpecular = [];

  var phongShader = THREE.ShaderLib['phong'];

  THREE.BAS.BaseAnimationMaterial.call(this, parameters, phongShader.uniforms);

  this.lights = true;
  this.vertexShader = this._concatVertexShader();
  this.fragmentShader = this._concatFragmentShader();
};
THREE.BAS.PhongAnimationMaterial.prototype = Object.create(THREE.BAS.BaseAnimationMaterial.prototype);
THREE.BAS.PhongAnimationMaterial.prototype.constructor = THREE.BAS.PhongAnimationMaterial;

THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader = function () {
  // based on THREE.ShaderLib.phong
  return ["#define PHONG", "varying vec3 vViewPosition;", "#ifndef FLAT_SHADED", "	varying vec3 vNormal;", "#endif", '#include <common>', '#include <uv_pars_vertex>', '#include <uv2_pars_vertex>', '#include <displacementmap_pars_vertex>', '#include <envmap_pars_vertex>', '#include <color_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', this._stringifyChunk('vertexFunctions'), this._stringifyChunk('vertexParameters'), this._stringifyChunk('varyingParameters'), "void main() {", this._stringifyChunk('vertexInit'), '#include <uv_vertex>', '#include <uv2_vertex>', '#include <color_vertex>', '#include <beginnormal_vertex>', this._stringifyChunk('vertexNormal'), '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', "#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

  "	vNormal = normalize( transformedNormal );", "#endif", '#include <begin_vertex>', this._stringifyChunk('vertexPosition'), this._stringifyChunk('vertexColor'), '#include <displacementmap_vertex>', '#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', "	vViewPosition = - mvPosition.xyz;", '#include <worldpos_vertex>', '#include <envmap_vertex>', '#include <shadowmap_vertex>', "}"].join("\n");
};

THREE.BAS.PhongAnimationMaterial.prototype._concatFragmentShader = function () {
  return ["#define PHONG", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", "uniform float opacity;", this._stringifyChunk('fragmentFunctions'), this._stringifyChunk('fragmentParameters'), this._stringifyChunk('varyingParameters'), '#include <common>', '#include <packing>', '#include <color_pars_fragment>', '#include <uv_pars_fragment>', '#include <uv2_pars_fragment>', '#include <map_pars_fragment>', '#include <alphamap_pars_fragment>', '#include <aomap_pars_fragment>', '#include <lightmap_pars_fragment>', '#include <emissivemap_pars_fragment>', '#include <envmap_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars>', '#include <lights_phong_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <bumpmap_pars_fragment>', '#include <normalmap_pars_fragment>', '#include <specularmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', "void main() {", '#include <clipping_planes_fragment>', this._stringifyChunk('fragmentInit'), "	vec4 diffuseColor = vec4( diffuse, opacity );", "	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );", "	vec3 totalEmissiveRadiance = emissive;", this._stringifyChunk('fragmentDiffuse'), '#include <logdepthbuf_fragment>', this._stringifyChunk('fragmentMap') || '#include <map_fragment>', '#include <color_fragment>', '#include <alphamap_fragment>', '#include <alphatest_fragment>', '#include <specularmap_fragment>', '#include <normal_flip>', '#include <normal_fragment>', this._stringifyChunk('fragmentEmissive'), '#include <emissivemap_fragment>',

  // accumulation
  '#include <lights_phong_fragment>', this._stringifyChunk('fragmentSpecular'), '#include <lights_template>',

  // modulation
  '#include <aomap_fragment>', "vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;", '#include <envmap_fragment>', "	gl_FragColor = vec4( outgoingLight, diffuseColor.a );", '#include <premultiplied_alpha_fragment>', '#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', "}"].join("\n");
};

/**
 * Extends THREE.MeshStandardMaterial with custom shader chunks.
 *
 * @see http://three-bas-examples.surge.sh/examples/materials_standard/
 *
 * @param {Object} parameters Object containing material properties and custom shader chunks.
 * @constructor
 */
THREE.BAS.StandardAnimationMaterial = function (parameters) {
  this.varyingParameters = [];

  this.vertexFunctions = [];
  this.vertexParameters = [];
  this.vertexInit = [];
  this.vertexNormal = [];
  this.vertexPosition = [];
  this.vertexColor = [];

  this.fragmentFunctions = [];
  this.fragmentParameters = [];
  this.fragmentInit = [];
  this.fragmentMap = [];
  this.fragmentDiffuse = [];
  this.fragmentRoughness = [];
  this.fragmentMetalness = [];
  this.fragmentEmissive = [];

  var standardShader = THREE.ShaderLib['standard'];

  THREE.BAS.BaseAnimationMaterial.call(this, parameters, standardShader.uniforms);

  this.lights = true;
  this.vertexShader = this._concatVertexShader();
  this.fragmentShader = this._concatFragmentShader();
};
THREE.BAS.StandardAnimationMaterial.prototype = Object.create(THREE.BAS.BaseAnimationMaterial.prototype);
THREE.BAS.StandardAnimationMaterial.prototype.constructor = THREE.BAS.StandardAnimationMaterial;

THREE.BAS.StandardAnimationMaterial.prototype._concatVertexShader = function () {
  // based on THREE.ShaderLib.physical
  return ["#define PHYSICAL", "varying vec3 vViewPosition;", "#ifndef FLAT_SHADED", "	varying vec3 vNormal;", "#endif", '#include <common>', '#include <uv_pars_vertex>', '#include <uv2_pars_vertex>', '#include <displacementmap_pars_vertex>', '#include <color_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <specularmap_pars_fragment>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', this._stringifyChunk('vertexFunctions'), this._stringifyChunk('vertexParameters'), this._stringifyChunk('varyingParameters'), "void main() {", this._stringifyChunk('vertexInit'), '#include <uv_vertex>', '#include <uv2_vertex>', '#include <color_vertex>', '#include <beginnormal_vertex>', this._stringifyChunk('vertexNormal'), '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', "#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

  "	vNormal = normalize( transformedNormal );", "#endif", '#include <begin_vertex>', this._stringifyChunk('vertexPosition'), this._stringifyChunk('vertexColor'), '#include <displacementmap_vertex>', '#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', "	vViewPosition = - mvPosition.xyz;", '#include <worldpos_vertex>', '#include <shadowmap_vertex>', "}"].join("\n");
};

THREE.BAS.StandardAnimationMaterial.prototype._concatFragmentShader = function () {
  return ["#define PHYSICAL", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform float roughness;", "uniform float metalness;", "uniform float opacity;", '#ifndef STANDARD', 'uniform float clearCoat;', 'uniform float clearCoatRoughness;', '#endif', "uniform float envMapIntensity;", 'varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', 'varying vec3 vNormal;', '#endif', this._stringifyChunk('fragmentFunctions'), this._stringifyChunk('fragmentParameters'), this._stringifyChunk('varyingParameters'), '#include <common>', '#include <packing>', '#include <color_pars_fragment>', '#include <uv_pars_fragment>', '#include <uv2_pars_fragment>', '#include <map_pars_fragment>', '#include <alphamap_pars_fragment>', '#include <aomap_pars_fragment>', '#include <lightmap_pars_fragment>', '#include <emissivemap_pars_fragment>', '#include <envmap_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <cube_uv_reflection_fragment>', '#include <lights_pars>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <bumpmap_pars_fragment>', '#include <normalmap_pars_fragment>', '#include <roughnessmap_pars_fragment>', '#include <metalnessmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', "void main() {", '#include <clipping_planes_fragment>', this._stringifyChunk('fragmentInit'), "	vec4 diffuseColor = vec4( diffuse, opacity );", "	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );", "	vec3 totalEmissiveRadiance = emissive;", this._stringifyChunk('fragmentDiffuse'), '#include <logdepthbuf_fragment>', this._stringifyChunk('fragmentMap') || '#include <map_fragment>', '#include <color_fragment>', '#include <alphamap_fragment>', '#include <alphatest_fragment>', '#include <specularmap_fragment>',

  //'#include <roughnessmap_fragment>',
  'float roughnessFactor = roughness;', this._stringifyChunk('fragmentRoughness'), '#ifdef USE_ROUGHNESSMAP', ' roughnessFactor *= texture2D( roughnessMap, vUv ).r;', '#endif',

  //'#include <metalnessmap_fragment>',
  'float metalnessFactor = metalness;', this._stringifyChunk('fragmentMetalness'), '#ifdef USE_METALNESSMAP', ' metalnessFactor *= texture2D( metalnessMap, vUv ).r;', '#endif', '#include <normal_flip>', '#include <normal_fragment>', this._stringifyChunk('fragmentEmissive'), '#include <emissivemap_fragment>',

  // accumulation
  '#include <lights_physical_fragment>', '#include <lights_template>',

  // modulation
  '#include <aomap_fragment>', "vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;", "	gl_FragColor = vec4( outgoingLight, diffuseColor.a );", '#include <premultiplied_alpha_fragment>', '#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', "}"].join("\n");
};

THREE.BAS.Timeline.register('rotate', {
  compiler: function compiler(segment) {
    var fromAxisAngle = new THREE.Vector4(segment.transition.from.axis.x, segment.transition.from.axis.y, segment.transition.from.axis.z, segment.transition.from.angle);

    var toAxis = segment.transition.to.axis || segment.transition.from.axis;
    var toAxisAngle = new THREE.Vector4(toAxis.x, toAxis.y, toAxis.z, segment.transition.to.angle);

    var origin = segment.transition.origin;

    return [THREE.BAS.TimelineChunks.delayDuration(segment), THREE.BAS.TimelineChunks.vec4('cRotationFrom' + segment.key, fromAxisAngle, 8), THREE.BAS.TimelineChunks.vec4('cRotationTo' + segment.key, toAxisAngle, 8), origin && THREE.BAS.TimelineChunks.vec3('cOrigin' + segment.key, origin, 2), 'void applyTransform' + segment.key + '(float time, inout vec3 v) {', THREE.BAS.TimelineChunks.renderCheck(segment), THREE.BAS.TimelineChunks.progress(segment), origin && 'v -= cOrigin' + segment.key + ';', 'vec3 axis = normalize(mix(cRotationFrom' + segment.key + '.xyz, cRotationTo' + segment.key + '.xyz, progress));', 'float angle = mix(cRotationFrom' + segment.key + '.w, cRotationTo' + segment.key + '.w, progress);', 'vec4 q = quatFromAxisAngle(axis, angle);', 'v = rotateVector(q, v);', origin && 'v += cOrigin' + segment.key + ';', '}'].join('\n');
  },
  defaultFrom: { axis: new THREE.Vector3(), angle: 0 }
});

THREE.BAS.Timeline.register('scale', {
  compiler: function compiler(segment) {
    var origin = segment.transition.origin;

    return [THREE.BAS.TimelineChunks.delayDuration(segment), THREE.BAS.TimelineChunks.vec3('cScaleFrom' + segment.key, segment.transition.from, 2), THREE.BAS.TimelineChunks.vec3('cScaleTo' + segment.key, segment.transition.to, 2), origin && THREE.BAS.TimelineChunks.vec3('cOrigin' + segment.key, origin, 2), 'void applyTransform' + segment.key + '(float time, inout vec3 v) {', THREE.BAS.TimelineChunks.renderCheck(segment), THREE.BAS.TimelineChunks.progress(segment), origin && 'v -= cOrigin' + segment.key + ';', 'v *= mix(cScaleFrom' + segment.key + ', cScaleTo' + segment.key + ', progress);', origin && 'v += cOrigin' + segment.key + ';', '}'].join('\n');
  },
  defaultFrom: new THREE.Vector3(1, 1, 1)
});

THREE.BAS.TimelineChunks = {
  vec3: function vec3(n, v, p) {
    var x = (v.x || 0).toPrecision(p);
    var y = (v.y || 0).toPrecision(p);
    var z = (v.z || 0).toPrecision(p);

    return 'vec3 ' + n + ' = vec3(' + x + ',' + y + ',' + z + ');';
  },
  vec4: function vec4(n, v, p) {
    var x = (v.x || 0).toPrecision(p);
    var y = (v.y || 0).toPrecision(p);
    var z = (v.z || 0).toPrecision(p);
    var w = (v.w || 0).toPrecision(p);

    return 'vec4 ' + n + ' = vec4(' + x + ',' + y + ',' + z + ',' + w + ');';
  },
  delayDuration: function delayDuration(segment) {
    return ['float cDelay' + segment.key + ' = ' + segment.start.toPrecision(4) + ';', 'float cDuration' + segment.key + ' = ' + segment.duration.toPrecision(4) + ';'].join('\n');
  },
  progress: function progress(segment) {
    // zero duration segments should always render complete
    if (segment.duration === 0) {
      return 'float progress = 1.0;';
    } else {
      return ['float progress = clamp(time - cDelay' + segment.key + ', 0.0, cDuration' + segment.key + ') / cDuration' + segment.key + ';', segment.transition.ease ? 'progress = ' + segment.transition.ease + '(progress' + (segment.transition.easeParams ? ',' + segment.transition.easeParams.map(function (v) {
        return v.toPrecision(4);
      }).join(',') : '') + ');' : ''].join('\n');
    }
  },
  renderCheck: function renderCheck(segment) {
    var startTime = segment.start.toPrecision(4);
    var endTime = (segment.end + segment.trail).toPrecision(4);

    return 'if (time < ' + startTime + ' || time > ' + endTime + ') return;';
  }
};

/**
 * A timeline transition segment. An instance of this class is created internally when calling {@link THREE.BAS.Timeline.add}, so you should not use this class directly.
 * The instance is also passed the the compiler function if you register a transition through {@link THREE.BAS.Timeline.register}. There you can use the public properties of the segment to compile the glsl string.
 * @param {string} key A string key generated by the timeline to which this segment belongs. Keys are unique.
 * @param {number} start Start time of this segment in a timeline in seconds.
 * @param {number} duration Duration of this segment in seconds.
 * @param {object} transition Object describing the transition.
 * @param {function} compiler A reference to the compiler function from a transition definition.
 * @constructor
 */
THREE.BAS.TimelineSegment = function (key, start, duration, transition, compiler) {
  this.key = key;
  this.start = start;
  this.duration = duration;
  this.transition = transition;
  this.compiler = compiler;

  this.trail = 0;
};

THREE.BAS.TimelineSegment.prototype.compile = function () {
  return this.compiler(this);
};

Object.defineProperty(THREE.BAS.TimelineSegment.prototype, 'end', {
  get: function get() {
    return this.start + this.duration;
  }
});

THREE.BAS.Timeline.register('translate', {
  compiler: function compiler(segment) {
    return [THREE.BAS.TimelineChunks.delayDuration(segment), THREE.BAS.TimelineChunks.vec3('cTranslateFrom' + segment.key, segment.transition.from, 2), THREE.BAS.TimelineChunks.vec3('cTranslateTo' + segment.key, segment.transition.to, 2), 'void applyTransform' + segment.key + '(float time, inout vec3 v) {', THREE.BAS.TimelineChunks.renderCheck(segment), THREE.BAS.TimelineChunks.progress(segment), 'v += mix(cTranslateFrom' + segment.key + ', cTranslateTo' + segment.key + ', progress);', '}'].join('\n');
  },
  defaultFrom: new THREE.Vector3(0, 0, 0)
});

},{}],10:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// threejs.org/license
(function (l, sa) {
  "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? sa(exports) : "function" === typeof define && define.amd ? define(["exports"], sa) : sa(l.THREE = l.THREE || {});
})(undefined, function (l) {
  function sa() {}function B(a, b) {
    this.x = a || 0;this.y = b || 0;
  }function da(a, b, c, d, e, f, g, h, k, m) {
    Object.defineProperty(this, "id", { value: ee++ });this.uuid = T.generateUUID();this.sourceFile = this.name = "";this.image = void 0 !== a ? a : da.DEFAULT_IMAGE;this.mipmaps = [];this.mapping = void 0 !== b ? b : da.DEFAULT_MAPPING;this.wrapS = void 0 !== c ? c : 1001;this.wrapT = void 0 !== d ? d : 1001;this.magFilter = void 0 !== e ? e : 1006;this.minFilter = void 0 !== f ? f : 1008;this.anisotropy = void 0 !== k ? k : 1;this.format = void 0 !== g ? g : 1023;this.type = void 0 !== h ? h : 1009;this.offset = new B(0, 0);this.repeat = new B(1, 1);this.generateMipmaps = !0;this.premultiplyAlpha = !1;this.flipY = !0;this.unpackAlignment = 4;this.encoding = void 0 !== m ? m : 3E3;this.version = 0;this.onUpdate = null;
  }function ga(a, b, c, d) {
    this.x = a || 0;this.y = b || 0;this.z = c || 0;this.w = void 0 !== d ? d : 1;
  }function Db(a, b, c) {
    this.uuid = T.generateUUID();
    this.width = a;this.height = b;this.scissor = new ga(0, 0, a, b);this.scissorTest = !1;this.viewport = new ga(0, 0, a, b);c = c || {};void 0 === c.minFilter && (c.minFilter = 1006);this.texture = new da(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy, c.encoding);this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;this.depthTexture = void 0 !== c.depthTexture ? c.depthTexture : null;
  }function Eb(a, b, c) {
    Db.call(this, a, b, c);this.activeMipMapLevel = this.activeCubeFace = 0;
  }function ba(a, b, c, d) {
    this._x = a || 0;this._y = b || 0;this._z = c || 0;this._w = void 0 !== d ? d : 1;
  }function q(a, b, c) {
    this.x = a || 0;this.y = b || 0;this.z = c || 0;
  }function J() {
    this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }function Xa(a, b, c, d, e, f, g, h, k, m) {
    a = void 0 !== a ? a : [];da.call(this, a, void 0 !== b ? b : 301, c, d, e, f, g, h, k, m);this.flipY = !1;
  }function Fb(a, b, c) {
    var d = a[0];if (0 >= d || 0 < d) return a;var e = b * c,
        f = fe[e];void 0 === f && (f = new Float32Array(e), fe[e] = f);if (0 !== b) for (d.toArray(f, 0), d = 1, e = 0; d !== b; ++d) {
      e += c, a[d].toArray(f, e);
    }return f;
  }function ge(a, b) {
    var c = he[b];void 0 === c && (c = new Int32Array(b), he[b] = c);for (var d = 0; d !== b; ++d) {
      c[d] = a.allocTextureUnit();
    }return c;
  }function Ie(a, b) {
    a.uniform1f(this.addr, b);
  }function Je(a, b) {
    a.uniform1i(this.addr, b);
  }function Ke(a, b) {
    void 0 === b.x ? a.uniform2fv(this.addr, b) : a.uniform2f(this.addr, b.x, b.y);
  }function Le(a, b) {
    void 0 !== b.x ? a.uniform3f(this.addr, b.x, b.y, b.z) : void 0 !== b.r ? a.uniform3f(this.addr, b.r, b.g, b.b) : a.uniform3fv(this.addr, b);
  }function Me(a, b) {
    void 0 === b.x ? a.uniform4fv(this.addr, b) : a.uniform4f(this.addr, b.x, b.y, b.z, b.w);
  }function Ne(a, b) {
    a.uniformMatrix2fv(this.addr, !1, b.elements || b);
  }function Oe(a, b) {
    a.uniformMatrix3fv(this.addr, !1, b.elements || b);
  }function Pe(a, b) {
    a.uniformMatrix4fv(this.addr, !1, b.elements || b);
  }function Qe(a, b, c) {
    var d = c.allocTextureUnit();a.uniform1i(this.addr, d);c.setTexture2D(b || ie, d);
  }function Re(a, b, c) {
    var d = c.allocTextureUnit();
    a.uniform1i(this.addr, d);c.setTextureCube(b || je, d);
  }function ke(a, b) {
    a.uniform2iv(this.addr, b);
  }function le(a, b) {
    a.uniform3iv(this.addr, b);
  }function me(a, b) {
    a.uniform4iv(this.addr, b);
  }function Se(a) {
    switch (a) {case 5126:
        return Ie;case 35664:
        return Ke;case 35665:
        return Le;case 35666:
        return Me;case 35674:
        return Ne;case 35675:
        return Oe;case 35676:
        return Pe;case 35678:
        return Qe;case 35680:
        return Re;case 5124:case 35670:
        return Je;case 35667:case 35671:
        return ke;case 35668:case 35672:
        return le;case 35669:case 35673:
        return me;}
  }
  function Te(a, b) {
    a.uniform1fv(this.addr, b);
  }function Ue(a, b) {
    a.uniform1iv(this.addr, b);
  }function Ve(a, b) {
    a.uniform2fv(this.addr, Fb(b, this.size, 2));
  }function We(a, b) {
    a.uniform3fv(this.addr, Fb(b, this.size, 3));
  }function Xe(a, b) {
    a.uniform4fv(this.addr, Fb(b, this.size, 4));
  }function Ye(a, b) {
    a.uniformMatrix2fv(this.addr, !1, Fb(b, this.size, 4));
  }function Ze(a, b) {
    a.uniformMatrix3fv(this.addr, !1, Fb(b, this.size, 9));
  }function $e(a, b) {
    a.uniformMatrix4fv(this.addr, !1, Fb(b, this.size, 16));
  }function af(a, b, c) {
    var d = b.length,
        e = ge(c, d);a.uniform1iv(this.addr, e);for (a = 0; a !== d; ++a) {
      c.setTexture2D(b[a] || ie, e[a]);
    }
  }function bf(a, b, c) {
    var d = b.length,
        e = ge(c, d);a.uniform1iv(this.addr, e);for (a = 0; a !== d; ++a) {
      c.setTextureCube(b[a] || je, e[a]);
    }
  }function cf(a) {
    switch (a) {case 5126:
        return Te;case 35664:
        return Ve;case 35665:
        return We;case 35666:
        return Xe;case 35674:
        return Ye;case 35675:
        return Ze;case 35676:
        return $e;case 35678:
        return af;case 35680:
        return bf;case 5124:case 35670:
        return Ue;case 35667:case 35671:
        return ke;case 35668:case 35672:
        return le;
      case 35669:case 35673:
        return me;}
  }function df(a, b, c) {
    this.id = a;this.addr = c;this.setValue = Se(b.type);
  }function ef(a, b, c) {
    this.id = a;this.addr = c;this.size = b.size;this.setValue = cf(b.type);
  }function ne(a) {
    this.id = a;this.seq = [];this.map = {};
  }function Ya(a, b, c) {
    this.seq = [];this.map = {};this.renderer = c;c = a.getProgramParameter(b, a.ACTIVE_UNIFORMS);for (var d = 0; d !== c; ++d) {
      var e = a.getActiveUniform(b, d),
          f = a.getUniformLocation(b, e.name),
          g = this,
          h = e.name,
          k = h.length;for (zd.lastIndex = 0;;) {
        var m = zd.exec(h),
            w = zd.lastIndex,
            n = m[1],
            p = m[3];"]" === m[2] && (n |= 0);if (void 0 === p || "[" === p && w + 2 === k) {
          h = g;e = void 0 === p ? new df(n, e, f) : new ef(n, e, f);h.seq.push(e);h.map[e.id] = e;break;
        } else p = g.map[n], void 0 === p && (p = new ne(n), n = g, g = p, n.seq.push(g), n.map[g.id] = g), g = p;
      }
    }
  }function O(a, b, c) {
    return void 0 === b && void 0 === c ? this.set(a) : this.setRGB(a, b, c);
  }function ic(a, b) {
    this.min = void 0 !== a ? a : new B(Infinity, Infinity);this.max = void 0 !== b ? b : new B(-Infinity, -Infinity);
  }function ff(a, b) {
    var c,
        d,
        e,
        f,
        g,
        h,
        k,
        m,
        w,
        n,
        p = a.context,
        r = a.state,
        x,
        l,
        D,
        u,
        v,
        I;this.render = function (y, E, H) {
      if (0 !== b.length) {
        y = new q();var F = H.w / H.z,
            M = .5 * H.z,
            ca = .5 * H.w,
            K = 16 / H.w,
            ja = new B(K * F, K),
            Aa = new q(1, 1, 0),
            eb = new B(1, 1),
            Ka = new ic();Ka.min.set(H.x, H.y);Ka.max.set(H.x + (H.z - 16), H.y + (H.w - 16));if (void 0 === u) {
          var K = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]),
              N = new Uint16Array([0, 1, 2, 0, 2, 3]);x = p.createBuffer();l = p.createBuffer();p.bindBuffer(p.ARRAY_BUFFER, x);p.bufferData(p.ARRAY_BUFFER, K, p.STATIC_DRAW);p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, l);p.bufferData(p.ELEMENT_ARRAY_BUFFER, N, p.STATIC_DRAW);
          v = p.createTexture();I = p.createTexture();r.bindTexture(p.TEXTURE_2D, v);p.texImage2D(p.TEXTURE_2D, 0, p.RGB, 16, 16, 0, p.RGB, p.UNSIGNED_BYTE, null);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST);r.bindTexture(p.TEXTURE_2D, I);p.texImage2D(p.TEXTURE_2D, 0, p.RGBA, 16, 16, 0, p.RGBA, p.UNSIGNED_BYTE, null);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST);p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST);var K = D = { vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
            fragmentShader: "uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}" },
              N = p.createProgram(),
              P = p.createShader(p.FRAGMENT_SHADER),
              R = p.createShader(p.VERTEX_SHADER),
              S = "precision " + a.getPrecision() + " float;\n";p.shaderSource(P, S + K.fragmentShader);p.shaderSource(R, S + K.vertexShader);p.compileShader(P);p.compileShader(R);p.attachShader(N, P);p.attachShader(N, R);p.linkProgram(N);u = N;w = p.getAttribLocation(u, "position");n = p.getAttribLocation(u, "uv");c = p.getUniformLocation(u, "renderType");d = p.getUniformLocation(u, "map");e = p.getUniformLocation(u, "occlusionMap");f = p.getUniformLocation(u, "opacity");g = p.getUniformLocation(u, "color");h = p.getUniformLocation(u, "scale");k = p.getUniformLocation(u, "rotation");m = p.getUniformLocation(u, "screenPosition");
        }p.useProgram(u);r.initAttributes();r.enableAttribute(w);r.enableAttribute(n);r.disableUnusedAttributes();p.uniform1i(e, 0);p.uniform1i(d, 1);p.bindBuffer(p.ARRAY_BUFFER, x);p.vertexAttribPointer(w, 2, p.FLOAT, !1, 16, 0);p.vertexAttribPointer(n, 2, p.FLOAT, !1, 16, 8);p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, l);r.disable(p.CULL_FACE);r.setDepthWrite(!1);N = 0;for (P = b.length; N < P; N++) {
          if (K = 16 / H.w, ja.set(K * F, K), R = b[N], y.set(R.matrixWorld.elements[12], R.matrixWorld.elements[13], R.matrixWorld.elements[14]), y.applyMatrix4(E.matrixWorldInverse), y.applyProjection(E.projectionMatrix), Aa.copy(y), eb.x = H.x + Aa.x * M + M - 8, eb.y = H.y + Aa.y * ca + ca - 8, !0 === Ka.containsPoint(eb)) {
            r.activeTexture(p.TEXTURE0);r.bindTexture(p.TEXTURE_2D, null);r.activeTexture(p.TEXTURE1);r.bindTexture(p.TEXTURE_2D, v);p.copyTexImage2D(p.TEXTURE_2D, 0, p.RGB, eb.x, eb.y, 16, 16, 0);p.uniform1i(c, 0);p.uniform2f(h, ja.x, ja.y);p.uniform3f(m, Aa.x, Aa.y, Aa.z);r.disable(p.BLEND);r.enable(p.DEPTH_TEST);p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0);r.activeTexture(p.TEXTURE0);r.bindTexture(p.TEXTURE_2D, I);p.copyTexImage2D(p.TEXTURE_2D, 0, p.RGBA, eb.x, eb.y, 16, 16, 0);p.uniform1i(c, 1);r.disable(p.DEPTH_TEST);r.activeTexture(p.TEXTURE1);r.bindTexture(p.TEXTURE_2D, v);p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0);R.positionScreen.copy(Aa);R.customUpdateCallback ? R.customUpdateCallback(R) : R.updateLensFlares();p.uniform1i(c, 2);r.enable(p.BLEND);for (var S = 0, gf = R.lensFlares.length; S < gf; S++) {
              var V = R.lensFlares[S];.001 < V.opacity && .001 < V.scale && (Aa.x = V.x, Aa.y = V.y, Aa.z = V.z, K = V.size * V.scale / H.w, ja.x = K * F, ja.y = K, p.uniform3f(m, Aa.x, Aa.y, Aa.z), p.uniform2f(h, ja.x, ja.y), p.uniform1f(k, V.rotation), p.uniform1f(f, V.opacity), p.uniform3f(g, V.color.r, V.color.g, V.color.b), r.setBlending(V.blending, V.blendEquation, V.blendSrc, V.blendDst), a.setTexture2D(V.texture, 1), p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0));
            }
          }
        }r.enable(p.CULL_FACE);r.enable(p.DEPTH_TEST);r.setDepthWrite(!0);a.resetGLState();
      }
    };
  }function hf(a, b) {
    var c, d, e, f, g, h, k, m, w, n, p, r, x, l, D, u, v;function I(a, b) {
      return a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : b.id - a.id;
    }var y = a.context,
        E = a.state,
        H,
        F,
        M,
        ca,
        K = new q(),
        ja = new ba(),
        Aa = new q();this.render = function (q, Ka) {
      if (0 !== b.length) {
        if (void 0 === M) {
          var N = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1]),
              P = new Uint16Array([0, 1, 2, 0, 2, 3]);H = y.createBuffer();F = y.createBuffer();y.bindBuffer(y.ARRAY_BUFFER, H);y.bufferData(y.ARRAY_BUFFER, N, y.STATIC_DRAW);y.bindBuffer(y.ELEMENT_ARRAY_BUFFER, F);y.bufferData(y.ELEMENT_ARRAY_BUFFER, P, y.STATIC_DRAW);var N = y.createProgram(),
              P = y.createShader(y.VERTEX_SHADER),
              R = y.createShader(y.FRAGMENT_SHADER);y.shaderSource(P, ["precision " + a.getPrecision() + " float;", "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
          y.shaderSource(R, ["precision " + a.getPrecision() + " float;", "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
          y.compileShader(P);y.compileShader(R);y.attachShader(N, P);y.attachShader(N, R);y.linkProgram(N);M = N;u = y.getAttribLocation(M, "position");v = y.getAttribLocation(M, "uv");c = y.getUniformLocation(M, "uvOffset");d = y.getUniformLocation(M, "uvScale");e = y.getUniformLocation(M, "rotation");f = y.getUniformLocation(M, "scale");g = y.getUniformLocation(M, "color");h = y.getUniformLocation(M, "map");k = y.getUniformLocation(M, "opacity");m = y.getUniformLocation(M, "modelViewMatrix");w = y.getUniformLocation(M, "projectionMatrix");n = y.getUniformLocation(M, "fogType");p = y.getUniformLocation(M, "fogDensity");r = y.getUniformLocation(M, "fogNear");x = y.getUniformLocation(M, "fogFar");l = y.getUniformLocation(M, "fogColor");D = y.getUniformLocation(M, "alphaTest");N = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");N.width = 8;N.height = 8;P = N.getContext("2d");P.fillStyle = "white";P.fillRect(0, 0, 8, 8);ca = new da(N);ca.needsUpdate = !0;
        }y.useProgram(M);E.initAttributes();E.enableAttribute(u);E.enableAttribute(v);E.disableUnusedAttributes();
        E.disable(y.CULL_FACE);E.enable(y.BLEND);y.bindBuffer(y.ARRAY_BUFFER, H);y.vertexAttribPointer(u, 2, y.FLOAT, !1, 16, 0);y.vertexAttribPointer(v, 2, y.FLOAT, !1, 16, 8);y.bindBuffer(y.ELEMENT_ARRAY_BUFFER, F);y.uniformMatrix4fv(w, !1, Ka.projectionMatrix.elements);E.activeTexture(y.TEXTURE0);y.uniform1i(h, 0);P = N = 0;(R = q.fog) ? (y.uniform3f(l, R.color.r, R.color.g, R.color.b), R && R.isFog ? (y.uniform1f(r, R.near), y.uniform1f(x, R.far), y.uniform1i(n, 1), P = N = 1) : R && R.isFogExp2 && (y.uniform1f(p, R.density), y.uniform1i(n, 2), P = N = 2)) : (y.uniform1i(n, 0), P = N = 0);for (var R = 0, S = b.length; R < S; R++) {
          var B = b[R];B.modelViewMatrix.multiplyMatrices(Ka.matrixWorldInverse, B.matrixWorld);B.z = -B.modelViewMatrix.elements[14];
        }b.sort(I);for (var V = [], R = 0, S = b.length; R < S; R++) {
          var B = b[R],
              ta = B.material;!1 !== ta.visible && (y.uniform1f(D, ta.alphaTest), y.uniformMatrix4fv(m, !1, B.modelViewMatrix.elements), B.matrixWorld.decompose(K, ja, Aa), V[0] = Aa.x, V[1] = Aa.y, B = 0, q.fog && ta.fog && (B = P), N !== B && (y.uniform1i(n, B), N = B), null !== ta.map ? (y.uniform2f(c, ta.map.offset.x, ta.map.offset.y), y.uniform2f(d, ta.map.repeat.x, ta.map.repeat.y)) : (y.uniform2f(c, 0, 0), y.uniform2f(d, 1, 1)), y.uniform1f(k, ta.opacity), y.uniform3f(g, ta.color.r, ta.color.g, ta.color.b), y.uniform1f(e, ta.rotation), y.uniform2fv(f, V), E.setBlending(ta.blending, ta.blendEquation, ta.blendSrc, ta.blendDst), E.setDepthTest(ta.depthTest), E.setDepthWrite(ta.depthWrite), ta.map ? a.setTexture2D(ta.map, 0) : a.setTexture2D(ca, 0), y.drawElements(y.TRIANGLES, 6, y.UNSIGNED_SHORT, 0));
        }E.enable(y.CULL_FACE);a.resetGLState();
      }
    };
  }function U() {
    Object.defineProperty(this, "id", { value: oe++ });this.uuid = T.generateUUID();this.name = "";this.type = "Material";this.lights = this.fog = !0;this.blending = 1;this.side = 0;this.shading = 2;this.vertexColors = 0;this.opacity = 1;this.transparent = !1;this.blendSrc = 204;this.blendDst = 205;this.blendEquation = 100;this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;this.depthFunc = 3;this.depthWrite = this.depthTest = !0;this.clippingPlanes = null;this.clipShadows = this.clipIntersection = !1;this.colorWrite = !0;this.precision = null;this.polygonOffset = !1;this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;this.premultipliedAlpha = !1;this.overdraw = 0;this._needsUpdate = this.visible = !0;
  }function Fa(a) {
    U.call(this);this.type = "ShaderMaterial";this.defines = {};this.uniforms = {};this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth = 1;this.wireframe = !1;this.wireframeLinewidth = 1;this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 };this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] };this.index0AttributeName = void 0;void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
  }function Za(a) {
    U.call(this);this.type = "MeshDepthMaterial";this.depthPacking = 3200;this.morphTargets = this.skinning = !1;this.displacementMap = this.alphaMap = this.map = null;this.displacementScale = 1;this.displacementBias = 0;this.wireframe = !1;this.wireframeLinewidth = 1;this.lights = this.fog = !1;this.setValues(a);
  }function Ba(a, b) {
    this.min = void 0 !== a ? a : new q(Infinity, Infinity, Infinity);this.max = void 0 !== b ? b : new q(-Infinity, -Infinity, -Infinity);
  }function Ca(a, b) {
    this.center = void 0 !== a ? a : new q();this.radius = void 0 !== b ? b : 0;
  }function Ia() {
    this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  function va(a, b) {
    this.normal = void 0 !== a ? a : new q(1, 0, 0);this.constant = void 0 !== b ? b : 0;
  }function jc(a, b, c, d, e, f) {
    this.planes = [void 0 !== a ? a : new va(), void 0 !== b ? b : new va(), void 0 !== c ? c : new va(), void 0 !== d ? d : new va(), void 0 !== e ? e : new va(), void 0 !== f ? f : new va()];
  }function pe(a, b, c, d) {
    function e(b, c, d, e) {
      var f = b.geometry,
          g;g = D;var h = b.customDepthMaterial;d && (g = u, h = b.customDistanceMaterial);h ? g = h : (h = !1, c.morphTargets && (f && f.isBufferGeometry ? h = f.morphAttributes && f.morphAttributes.position && 0 < f.morphAttributes.position.length : f && f.isGeometry && (h = f.morphTargets && 0 < f.morphTargets.length)), b = b.isSkinnedMesh && c.skinning, f = 0, h && (f |= 1), b && (f |= 2), g = g[f]);a.localClippingEnabled && !0 === c.clipShadows && 0 !== c.clippingPlanes.length && (f = g.uuid, h = c.uuid, b = v[f], void 0 === b && (b = {}, v[f] = b), f = b[h], void 0 === f && (f = g.clone(), b[h] = f), g = f);g.visible = c.visible;g.wireframe = c.wireframe;h = c.side;ja.renderSingleSided && 2 == h && (h = 0);ja.renderReverseSided && (0 === h ? h = 1 : 1 === h && (h = 0));g.side = h;g.clipShadows = c.clipShadows;g.clippingPlanes = c.clippingPlanes;g.wireframeLinewidth = c.wireframeLinewidth;g.linewidth = c.linewidth;d && void 0 !== g.uniforms.lightPos && g.uniforms.lightPos.value.copy(e);return g;
    }function f(a, b, c) {
      if (!1 !== a.visible) {
        0 !== (a.layers.mask & b.layers.mask) && (a.isMesh || a.isLine || a.isPoints) && a.castShadow && (!1 === a.frustumCulled || !0 === k.intersectsObject(a)) && !0 === a.material.visible && (a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse, a.matrixWorld), l.push(a));a = a.children;for (var d = 0, e = a.length; d < e; d++) {
          f(a[d], b, c);
        }
      }
    }var g = a.context,
        h = a.state,
        k = new jc(),
        m = new J(),
        w = b.shadows,
        n = new B(),
        p = new B(d.maxTextureSize, d.maxTextureSize),
        r = new q(),
        x = new q(),
        l = [],
        D = Array(4),
        u = Array(4),
        v = {},
        I = [new q(1, 0, 0), new q(-1, 0, 0), new q(0, 0, 1), new q(0, 0, -1), new q(0, 1, 0), new q(0, -1, 0)],
        y = [new q(0, 1, 0), new q(0, 1, 0), new q(0, 1, 0), new q(0, 1, 0), new q(0, 0, 1), new q(0, 0, -1)],
        E = [new ga(), new ga(), new ga(), new ga(), new ga(), new ga()];b = new Za();b.depthPacking = 3201;b.clipping = !0;d = Gb.distanceRGBA;for (var H = La.clone(d.uniforms), F = 0; 4 !== F; ++F) {
      var M = 0 !== (F & 1),
          ca = 0 !== (F & 2),
          K = b.clone();K.morphTargets = M;K.skinning = ca;D[F] = K;M = new Fa({ defines: { USE_SHADOWMAP: "" }, uniforms: H, vertexShader: d.vertexShader, fragmentShader: d.fragmentShader, morphTargets: M, skinning: ca, clipping: !0 });u[F] = M;
    }var ja = this;this.enabled = !1;this.autoUpdate = !0;this.needsUpdate = !1;this.type = 1;this.renderSingleSided = this.renderReverseSided = !0;this.render = function (b, d) {
      if (!1 !== ja.enabled && (!1 !== ja.autoUpdate || !1 !== ja.needsUpdate) && 0 !== w.length) {
        h.clearColor(1, 1, 1, 1);h.disable(g.BLEND);h.setDepthTest(!0);h.setScissorTest(!1);for (var v, u, q = 0, D = w.length; q < D; q++) {
          var H = w[q],
              F = H.shadow;if (void 0 === F) console.warn("THREE.WebGLShadowMap:", H, "has no shadow.");else {
            var M = F.camera;n.copy(F.mapSize);n.min(p);if (H && H.isPointLight) {
              v = 6;u = !0;var K = n.x,
                  ca = n.y;E[0].set(2 * K, ca, K, ca);E[1].set(0, ca, K, ca);E[2].set(3 * K, ca, K, ca);E[3].set(K, ca, K, ca);E[4].set(3 * K, 0, K, ca);E[5].set(K, 0, K, ca);n.x *= 4;n.y *= 2;
            } else v = 1, u = !1;null === F.map && (F.map = new Db(n.x, n.y, { minFilter: 1003, magFilter: 1003, format: 1023 }), M.updateProjectionMatrix());F && F.isSpotLightShadow && F.update(H);K = F.map;F = F.matrix;x.setFromMatrixPosition(H.matrixWorld);M.position.copy(x);a.setRenderTarget(K);a.clear();for (K = 0; K < v; K++) {
              u ? (r.copy(M.position), r.add(I[K]), M.up.copy(y[K]), M.lookAt(r), h.viewport(E[K])) : (r.setFromMatrixPosition(H.target.matrixWorld), M.lookAt(r));M.updateMatrixWorld();M.matrixWorldInverse.getInverse(M.matrixWorld);F.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);F.multiply(M.projectionMatrix);F.multiply(M.matrixWorldInverse);m.multiplyMatrices(M.projectionMatrix, M.matrixWorldInverse);k.setFromMatrix(m);
              l.length = 0;f(b, d, M);for (var ca = 0, B = l.length; ca < B; ca++) {
                var C = l[ca],
                    z = c.update(C),
                    G = C.material;if (G && G.isMultiMaterial) for (var $a = z.groups, G = G.materials, Ad = 0, Da = $a.length; Ad < Da; Ad++) {
                  var Ra = $a[Ad],
                      Pa = G[Ra.materialIndex];!0 === Pa.visible && (Pa = e(C, Pa, u, x), a.renderBufferDirect(M, null, z, Pa, C, Ra));
                } else Pa = e(C, G, u, x), a.renderBufferDirect(M, null, z, Pa, C, null);
              }
            }
          }
        }v = a.getClearColor();u = a.getClearAlpha();a.setClearColor(v, u);ja.needsUpdate = !1;
      }
    };
  }function ab(a, b) {
    this.origin = void 0 !== a ? a : new q();this.direction = void 0 !== b ? b : new q();
  }function bb(a, b, c, d) {
    this._x = a || 0;this._y = b || 0;this._z = c || 0;this._order = d || bb.DefaultOrder;
  }function Yc() {
    this.mask = 1;
  }function z() {
    Object.defineProperty(this, "id", { value: qe++ });this.uuid = T.generateUUID();this.name = "";this.type = "Object3D";this.parent = null;this.children = [];this.up = z.DefaultUp.clone();var a = new q(),
        b = new bb(),
        c = new ba(),
        d = new q(1, 1, 1);b.onChange(function () {
      c.setFromEuler(b, !1);
    });c.onChange(function () {
      b.setFromQuaternion(c, void 0, !1);
    });Object.defineProperties(this, { position: { enumerable: !0,
        value: a }, rotation: { enumerable: !0, value: b }, quaternion: { enumerable: !0, value: c }, scale: { enumerable: !0, value: d }, modelViewMatrix: { value: new J() }, normalMatrix: { value: new Ia() } });this.matrix = new J();this.matrixWorld = new J();this.matrixAutoUpdate = z.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate = !1;this.layers = new Yc();this.visible = !0;this.receiveShadow = this.castShadow = !1;this.frustumCulled = !0;this.renderOrder = 0;this.userData = {};this.onBeforeRender = function () {};this.onAfterRender = function () {};
  }function gb(a, b) {
    this.start = void 0 !== a ? a : new q();this.end = void 0 !== b ? b : new q();
  }function wa(a, b, c) {
    this.a = void 0 !== a ? a : new q();this.b = void 0 !== b ? b : new q();this.c = void 0 !== c ? c : new q();
  }function ea(a, b, c, d, e, f) {
    this.a = a;this.b = b;this.c = c;this.normal = d && d.isVector3 ? d : new q();this.vertexNormals = Array.isArray(d) ? d : [];this.color = e && e.isColor ? e : new O();this.vertexColors = Array.isArray(e) ? e : [];this.materialIndex = void 0 !== f ? f : 0;
  }function Ma(a) {
    U.call(this);this.type = "MeshBasicMaterial";this.color = new O(16777215);this.aoMap = this.map = null;this.aoMapIntensity = 1;this.envMap = this.alphaMap = this.specularMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.lights = this.morphTargets = this.skinning = !1;this.setValues(a);
  }function C(a, b, c) {
    if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.uuid = T.generateUUID();this.array = a;this.itemSize = b;this.count = void 0 !== a ? a.length / b : 0;this.normalized = !0 === c;
    this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
  }function Zc(a, b) {
    return new C(new Uint16Array(a), b);
  }function $c(a, b) {
    return new C(new Uint32Array(a), b);
  }function ha(a, b) {
    return new C(new Float32Array(a), b);
  }function Q() {
    Object.defineProperty(this, "id", { value: ad++ });this.uuid = T.generateUUID();this.name = "";this.type = "Geometry";this.vertices = [];this.colors = [];this.faces = [];this.faceVertexUvs = [[]];this.morphTargets = [];this.morphNormals = [];this.skinWeights = [];this.skinIndices = [];this.lineDistances = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }function re() {
    Object.defineProperty(this, "id", { value: ad++ });this.uuid = T.generateUUID();this.name = "";this.type = "DirectGeometry";this.indices = [];this.vertices = [];this.normals = [];this.colors = [];this.uvs = [];this.uvs2 = [];this.groups = [];this.morphTargets = {};this.skinWeights = [];this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }function G() {
    Object.defineProperty(this, "id", { value: ad++ });this.uuid = T.generateUUID();this.name = "";this.type = "BufferGeometry";this.index = null;this.attributes = {};this.morphAttributes = {};this.groups = [];this.boundingSphere = this.boundingBox = null;this.drawRange = { start: 0, count: Infinity };
  }function ya(a, b) {
    z.call(this);this.type = "Mesh";this.geometry = void 0 !== a ? a : new G();this.material = void 0 !== b ? b : new Ma({ color: 16777215 * Math.random() });this.drawMode = 0;this.updateMorphTargets();
  }function hb(a, b, c, d, e, f) {
    function g(a, b, c, d, e, f, g, k, m, B, C) {
      var Ka = f / m,
          N = g / B,
          P = f / 2,
          R = g / 2,
          S = k / 2;g = m + 1;for (var z = B + 1, V = f = 0, G = new q(), L = 0; L < z; L++) {
        for (var O = L * N - R, J = 0; J < g; J++) {
          G[a] = (J * Ka - P) * d, G[b] = O * e, G[c] = S, n[l] = G.x, n[l + 1] = G.y, n[l + 2] = G.z, G[a] = 0, G[b] = 0, G[c] = 0 < k ? 1 : -1, p[l] = G.x, p[l + 1] = G.y, p[l + 2] = G.z, r[t] = J / m, r[t + 1] = 1 - L / B, l += 3, t += 2, f += 1;
        }
      }for (L = 0; L < B; L++) {
        for (J = 0; J < m; J++) {
          a = u + J + g * (L + 1), b = u + (J + 1) + g * (L + 1), c = u + (J + 1) + g * L, w[D] = u + J + g * L, w[D + 1] = a, w[D + 2] = c, w[D + 3] = a, w[D + 4] = b, w[D + 5] = c, D += 6, V += 6;
        }
      }h.addGroup(v, V, C);v += V;u += f;
    }G.call(this);this.type = "BoxBufferGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: f };var h = this;d = Math.floor(d) || 1;e = Math.floor(e) || 1;f = Math.floor(f) || 1;var k = function (a, b, c) {
      return a = 0 + (a + 1) * (b + 1) * 2 + (a + 1) * (c + 1) * 2 + (c + 1) * (b + 1) * 2;
    }(d, e, f),
        m = function (a, b, c) {
      a = 0 + a * b * 2 + a * c * 2 + c * b * 2;return 6 * a;
    }(d, e, f),
        w = new (65535 < m ? Uint32Array : Uint16Array)(m),
        n = new Float32Array(3 * k),
        p = new Float32Array(3 * k),
        r = new Float32Array(2 * k),
        l = 0,
        t = 0,
        D = 0,
        u = 0,
        v = 0;g("z", "y", "x", -1, -1, c, b, a, f, e, 0);g("z", "y", "x", 1, -1, c, b, -a, f, e, 1);g("x", "z", "y", 1, 1, a, c, b, d, f, 2);g("x", "z", "y", 1, -1, a, c, -b, d, f, 3);g("x", "y", "z", 1, -1, a, b, c, d, e, 4);g("x", "y", "z", -1, -1, a, b, -c, d, e, 5);this.setIndex(new C(w, 1));this.addAttribute("position", new C(n, 3));this.addAttribute("normal", new C(p, 3));this.addAttribute("uv", new C(r, 2));
  }function ib(a, b, c, d) {
    G.call(this);this.type = "PlaneBufferGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };var e = a / 2,
        f = b / 2;c = Math.floor(c) || 1;d = Math.floor(d) || 1;var g = c + 1,
        h = d + 1,
        k = a / c,
        m = b / d;b = new Float32Array(g * h * 3);a = new Float32Array(g * h * 3);for (var w = new Float32Array(g * h * 2), n = 0, p = 0, r = 0; r < h; r++) {
      for (var l = r * m - f, t = 0; t < g; t++) {
        b[n] = t * k - e, b[n + 1] = -l, a[n + 2] = 1, w[p] = t / c, w[p + 1] = 1 - r / d, n += 3, p += 2;
      }
    }n = 0;e = new (65535 < b.length / 3 ? Uint32Array : Uint16Array)(c * d * 6);for (r = 0; r < d; r++) {
      for (t = 0; t < c; t++) {
        f = t + g * (r + 1), h = t + 1 + g * (r + 1), k = t + 1 + g * r, e[n] = t + g * r, e[n + 1] = f, e[n + 2] = k, e[n + 3] = f, e[n + 4] = h, e[n + 5] = k, n += 6;
      }
    }this.setIndex(new C(e, 1));this.addAttribute("position", new C(b, 3));this.addAttribute("normal", new C(a, 3));this.addAttribute("uv", new C(w, 2));
  }function Z() {
    z.call(this);this.type = "Camera";this.matrixWorldInverse = new J();this.projectionMatrix = new J();
  }function Ea(a, b, c, d) {
    Z.call(this);this.type = "PerspectiveCamera";this.fov = void 0 !== a ? a : 50;this.zoom = 1;this.near = void 0 !== c ? c : .1;this.far = void 0 !== d ? d : 2E3;this.focus = 10;this.aspect = void 0 !== b ? b : 1;this.view = null;this.filmGauge = 35;this.filmOffset = 0;this.updateProjectionMatrix();
  }function Hb(a, b, c, d, e, f) {
    Z.call(this);this.type = "OrthographicCamera";this.zoom = 1;this.view = null;this.left = a;this.right = b;this.top = c;this.bottom = d;this.near = void 0 !== e ? e : .1;this.far = void 0 !== f ? f : 2E3;this.updateProjectionMatrix();
  }function jf(a, b, c) {
    var d, e, f;return { setMode: function setMode(a) {
        d = a;
      }, setIndex: function setIndex(c) {
        c.array instanceof Uint32Array && b.get("OES_element_index_uint") ? (e = a.UNSIGNED_INT, f = 4) : (e = a.UNSIGNED_SHORT, f = 2);
      }, render: function render(b, h) {
        a.drawElements(d, h, e, b * f);
        c.calls++;c.vertices += h;d === a.TRIANGLES && (c.faces += h / 3);
      }, renderInstances: function renderInstances(g, h, k) {
        var m = b.get("ANGLE_instanced_arrays");null === m ? console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.") : (m.drawElementsInstancedANGLE(d, k, e, h * f, g.maxInstancedCount), c.calls++, c.vertices += k * g.maxInstancedCount, d === a.TRIANGLES && (c.faces += g.maxInstancedCount * k / 3));
      } };
  }function kf(a, b, c) {
    var d;return { setMode: function setMode(a) {
        d = a;
      }, render: function render(b, f) {
        a.drawArrays(d, b, f);c.calls++;c.vertices += f;d === a.TRIANGLES && (c.faces += f / 3);
      }, renderInstances: function renderInstances(e) {
        var f = b.get("ANGLE_instanced_arrays");if (null === f) console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else {
          var g = e.attributes.position,
              g = g && g.isInterleavedBufferAttribute ? g.data.count : g.count;f.drawArraysInstancedANGLE(d, 0, g, e.maxInstancedCount);c.calls++;c.vertices += g * e.maxInstancedCount;d === a.TRIANGLES && (c.faces += e.maxInstancedCount * g / 3);
        }
      } };
  }function lf() {
    var a = {};return { get: function get(b) {
        if (void 0 !== a[b.id]) return a[b.id];var c;switch (b.type) {case "DirectionalLight":
            c = { direction: new q(), color: new O(), shadow: !1, shadowBias: 0, shadowRadius: 1, shadowMapSize: new B() };break;case "SpotLight":
            c = { position: new q(), direction: new q(), color: new O(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0, shadow: !1, shadowBias: 0, shadowRadius: 1, shadowMapSize: new B() };break;case "PointLight":
            c = { position: new q(), color: new O(), distance: 0, decay: 0, shadow: !1,
              shadowBias: 0, shadowRadius: 1, shadowMapSize: new B() };break;case "HemisphereLight":
            c = { direction: new q(), skyColor: new O(), groundColor: new O() };}return a[b.id] = c;
      } };
  }function mf(a) {
    a = a.split("\n");for (var b = 0; b < a.length; b++) {
      a[b] = b + 1 + ": " + a[b];
    }return a.join("\n");
  }function se(a, b, c) {
    var d = a.createShader(b);a.shaderSource(d, c);a.compileShader(d);!1 === a.getShaderParameter(d, a.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile.");"" !== a.getShaderInfoLog(d) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", b === a.VERTEX_SHADER ? "vertex" : "fragment", a.getShaderInfoLog(d), mf(c));return d;
  }function te(a) {
    switch (a) {case 3E3:
        return ["Linear", "( value )"];case 3001:
        return ["sRGB", "( value )"];case 3002:
        return ["RGBE", "( value )"];case 3004:
        return ["RGBM", "( value, 7.0 )"];case 3005:
        return ["RGBM", "( value, 16.0 )"];case 3006:
        return ["RGBD", "( value, 256.0 )"];case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];default:
        throw Error("unsupported encoding: " + a);}
  }function Bd(a, b) {
    var c = te(b);return "vec4 " + a + "( vec4 value ) { return " + c[0] + "ToLinear" + c[1] + "; }";
  }function nf(a, b) {
    var c = te(b);return "vec4 " + a + "( vec4 value ) { return LinearTo" + c[0] + c[1] + "; }";
  }function of(a, b) {
    var c;switch (b) {case 1:
        c = "Linear";break;case 2:
        c = "Reinhard";break;case 3:
        c = "Uncharted2";break;case 4:
        c = "OptimizedCineon";break;default:
        throw Error("unsupported toneMapping: " + b);}return "vec3 " + a + "( vec3 color ) { return " + c + "ToneMapping( color ); }";
  }function pf(a, b, c) {
    a = a || {};return [a.derivatives || b.envMapCubeUV || b.bumpMap || b.normalMap || b.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (a.fragDepth || b.logarithmicDepthBuffer) && c.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", a.drawBuffers && c.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (a.shaderTextureLOD || b.envMap) && c.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(kc).join("\n");
  }function qf(a) {
    var b = [],
        c;for (c in a) {
      var d = a[c];!1 !== d && b.push("#define " + c + " " + d);
    }return b.join("\n");
  }function kc(a) {
    return "" !== a;
  }function ue(a, b) {
    return a.replace(/NUM_DIR_LIGHTS/g, b.numDirLights).replace(/NUM_SPOT_LIGHTS/g, b.numSpotLights).replace(/NUM_POINT_LIGHTS/g, b.numPointLights).replace(/NUM_HEMI_LIGHTS/g, b.numHemiLights);
  }function Cd(a) {
    return a.replace(/#include +<([\w\d.]+)>/g, function (a, c) {
      var d = X[c];if (void 0 === d) throw Error("Can not resolve #include <" + c + ">");return Cd(d);
    });
  }function ve(a) {
    return a.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function (a, c, d, e) {
      a = "";for (c = parseInt(c); c < parseInt(d); c++) {
        a += e.replace(/\[ i \]/g, "[ " + c + " ]");
      }return a;
    });
  }function rf(a, b, c, d) {
    var e = a.context,
        f = c.extensions,
        g = c.defines,
        h = c.__webglShader.vertexShader,
        k = c.__webglShader.fragmentShader,
        m = "SHADOWMAP_TYPE_BASIC";1 === d.shadowMapType ? m = "SHADOWMAP_TYPE_PCF" : 2 === d.shadowMapType && (m = "SHADOWMAP_TYPE_PCF_SOFT");var w = "ENVMAP_TYPE_CUBE",
        n = "ENVMAP_MODE_REFLECTION",
        p = "ENVMAP_BLENDING_MULTIPLY";if (d.envMap) {
      switch (c.envMap.mapping) {case 301:case 302:
          w = "ENVMAP_TYPE_CUBE";break;case 306:case 307:
          w = "ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:
          w = "ENVMAP_TYPE_EQUIREC";
          break;case 305:
          w = "ENVMAP_TYPE_SPHERE";}switch (c.envMap.mapping) {case 302:case 304:
          n = "ENVMAP_MODE_REFRACTION";}switch (c.combine) {case 0:
          p = "ENVMAP_BLENDING_MULTIPLY";break;case 1:
          p = "ENVMAP_BLENDING_MIX";break;case 2:
          p = "ENVMAP_BLENDING_ADD";}
    }var r = 0 < a.gammaFactor ? a.gammaFactor : 1,
        f = pf(f, d, a.extensions),
        l = qf(g),
        t = e.createProgram();c.isRawShaderMaterial ? (g = [l, "\n"].filter(kc).join("\n"), m = [f, l, "\n"].filter(kc).join("\n")) : (g = ["precision " + d.precision + " float;", "precision " + d.precision + " int;", "#define SHADER_NAME " + c.__webglShader.name, l, d.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + r, "#define MAX_BONES " + d.maxBones, d.map ? "#define USE_MAP" : "", d.envMap ? "#define USE_ENVMAP" : "", d.envMap ? "#define " + n : "", d.lightMap ? "#define USE_LIGHTMAP" : "", d.aoMap ? "#define USE_AOMAP" : "", d.emissiveMap ? "#define USE_EMISSIVEMAP" : "", d.bumpMap ? "#define USE_BUMPMAP" : "", d.normalMap ? "#define USE_NORMALMAP" : "", d.displacementMap && d.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", d.specularMap ? "#define USE_SPECULARMAP" : "", d.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", d.metalnessMap ? "#define USE_METALNESSMAP" : "", d.alphaMap ? "#define USE_ALPHAMAP" : "", d.vertexColors ? "#define USE_COLOR" : "", d.flatShading ? "#define FLAT_SHADED" : "", d.skinning ? "#define USE_SKINNING" : "", d.useVertexTexture ? "#define BONE_TEXTURE" : "", d.morphTargets ? "#define USE_MORPHTARGETS" : "", d.morphNormals && !1 === d.flatShading ? "#define USE_MORPHNORMALS" : "", d.doubleSided ? "#define DOUBLE_SIDED" : "", d.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + d.numClippingPlanes, d.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", d.shadowMapEnabled ? "#define " + m : "", d.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", d.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", d.logarithmicDepthBuffer && a.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(kc).join("\n"), m = [f, "precision " + d.precision + " float;", "precision " + d.precision + " int;", "#define SHADER_NAME " + c.__webglShader.name, l, d.alphaTest ? "#define ALPHATEST " + d.alphaTest : "", "#define GAMMA_FACTOR " + r, d.useFog && d.fog ? "#define USE_FOG" : "", d.useFog && d.fogExp ? "#define FOG_EXP2" : "", d.map ? "#define USE_MAP" : "", d.envMap ? "#define USE_ENVMAP" : "", d.envMap ? "#define " + w : "", d.envMap ? "#define " + n : "", d.envMap ? "#define " + p : "", d.lightMap ? "#define USE_LIGHTMAP" : "", d.aoMap ? "#define USE_AOMAP" : "", d.emissiveMap ? "#define USE_EMISSIVEMAP" : "", d.bumpMap ? "#define USE_BUMPMAP" : "", d.normalMap ? "#define USE_NORMALMAP" : "", d.specularMap ? "#define USE_SPECULARMAP" : "", d.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", d.metalnessMap ? "#define USE_METALNESSMAP" : "", d.alphaMap ? "#define USE_ALPHAMAP" : "", d.vertexColors ? "#define USE_COLOR" : "", d.flatShading ? "#define FLAT_SHADED" : "", d.doubleSided ? "#define DOUBLE_SIDED" : "", d.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + d.numClippingPlanes, "#define UNION_CLIPPING_PLANES " + (d.numClippingPlanes - d.numClipIntersection), d.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", d.shadowMapEnabled ? "#define " + m : "", d.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", d.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", d.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", d.logarithmicDepthBuffer && a.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", d.envMap && a.extensions.get("EXT_shader_texture_lod") ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", 0 !== d.toneMapping ? "#define TONE_MAPPING" : "", 0 !== d.toneMapping ? X.tonemapping_pars_fragment : "", 0 !== d.toneMapping ? of("toneMapping", d.toneMapping) : "", d.outputEncoding || d.mapEncoding || d.envMapEncoding || d.emissiveMapEncoding ? X.encodings_pars_fragment : "", d.mapEncoding ? Bd("mapTexelToLinear", d.mapEncoding) : "", d.envMapEncoding ? Bd("envMapTexelToLinear", d.envMapEncoding) : "", d.emissiveMapEncoding ? Bd("emissiveMapTexelToLinear", d.emissiveMapEncoding) : "", d.outputEncoding ? nf("linearToOutputTexel", d.outputEncoding) : "", d.depthPacking ? "#define DEPTH_PACKING " + c.depthPacking : "", "\n"].filter(kc).join("\n"));h = Cd(h, d);h = ue(h, d);k = Cd(k, d);k = ue(k, d);c.isShaderMaterial || (h = ve(h), k = ve(k));k = m + k;h = se(e, e.VERTEX_SHADER, g + h);k = se(e, e.FRAGMENT_SHADER, k);e.attachShader(t, h);e.attachShader(t, k);void 0 !== c.index0AttributeName ? e.bindAttribLocation(t, 0, c.index0AttributeName) : !0 === d.morphTargets && e.bindAttribLocation(t, 0, "position");e.linkProgram(t);d = e.getProgramInfoLog(t);w = e.getShaderInfoLog(h);n = e.getShaderInfoLog(k);r = p = !0;if (!1 === e.getProgramParameter(t, e.LINK_STATUS)) p = !1, console.error("THREE.WebGLProgram: shader error: ", e.getError(), "gl.VALIDATE_STATUS", e.getProgramParameter(t, e.VALIDATE_STATUS), "gl.getProgramInfoLog", d, w, n);else if ("" !== d) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", d);else if ("" === w || "" === n) r = !1;r && (this.diagnostics = { runnable: p, material: c, programLog: d, vertexShader: { log: w, prefix: g }, fragmentShader: { log: n, prefix: m } });e.deleteShader(h);e.deleteShader(k);var q;this.getUniforms = function () {
      void 0 === q && (q = new Ya(e, t, a));return q;
    };var u;this.getAttributes = function () {
      if (void 0 === u) {
        for (var a = {}, b = e.getProgramParameter(t, e.ACTIVE_ATTRIBUTES), c = 0; c < b; c++) {
          var d = e.getActiveAttrib(t, c).name;a[d] = e.getAttribLocation(t, d);
        }u = a;
      }return u;
    };this.destroy = function () {
      e.deleteProgram(t);this.program = void 0;
    };Object.defineProperties(this, { uniforms: { get: function get() {
          console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms();
        } }, attributes: { get: function get() {
          console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");return this.getAttributes();
        } } });this.id = sf++;this.code = b;this.usedTimes = 1;this.program = t;this.vertexShader = h;this.fragmentShader = k;return this;
  }function tf(a, b) {
    function c(a, b) {
      var c;a ? a && a.isTexture ? c = a.encoding : a && a.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), c = a.texture.encoding) : c = 3E3;3E3 === c && b && (c = 3007);return c;
    }var d = [],
        e = { MeshDepthMaterial: "depth", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points" },
        f = "precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking".split(" ");
    this.getParameters = function (d, f, k, m, w, n) {
      var p = e[d.type],
          r;b.floatVertexTextures && n && n.skeleton && n.skeleton.useVertexTexture ? r = 1024 : (r = Math.floor((b.maxVertexUniforms - 20) / 4), void 0 !== n && n && n.isSkinnedMesh && (r = Math.min(n.skeleton.bones.length, r), r < n.skeleton.bones.length && console.warn("WebGLRenderer: too many bones - " + n.skeleton.bones.length + ", this GPU supports just " + r + " (try OpenGL instead of ANGLE)")));var l = a.getPrecision();null !== d.precision && (l = b.getMaxPrecision(d.precision), l !== d.precision && console.warn("THREE.WebGLProgram.getParameters:", d.precision, "not supported, using", l, "instead."));var t = a.getCurrentRenderTarget();return { shaderID: p, precision: l, supportsVertexTextures: b.vertexTextures, outputEncoding: c(t ? t.texture : null, a.gammaOutput), map: !!d.map, mapEncoding: c(d.map, a.gammaInput), envMap: !!d.envMap, envMapMode: d.envMap && d.envMap.mapping, envMapEncoding: c(d.envMap, a.gammaInput), envMapCubeUV: !!d.envMap && (306 === d.envMap.mapping || 307 === d.envMap.mapping), lightMap: !!d.lightMap, aoMap: !!d.aoMap,
        emissiveMap: !!d.emissiveMap, emissiveMapEncoding: c(d.emissiveMap, a.gammaInput), bumpMap: !!d.bumpMap, normalMap: !!d.normalMap, displacementMap: !!d.displacementMap, roughnessMap: !!d.roughnessMap, metalnessMap: !!d.metalnessMap, specularMap: !!d.specularMap, alphaMap: !!d.alphaMap, combine: d.combine, vertexColors: d.vertexColors, fog: !!k, useFog: d.fog, fogExp: k && k.isFogExp2, flatShading: 1 === d.shading, sizeAttenuation: d.sizeAttenuation, logarithmicDepthBuffer: b.logarithmicDepthBuffer, skinning: d.skinning, maxBones: r, useVertexTexture: b.floatVertexTextures && n && n.skeleton && n.skeleton.useVertexTexture, morphTargets: d.morphTargets, morphNormals: d.morphNormals, maxMorphTargets: a.maxMorphTargets, maxMorphNormals: a.maxMorphNormals, numDirLights: f.directional.length, numPointLights: f.point.length, numSpotLights: f.spot.length, numHemiLights: f.hemi.length, numClippingPlanes: m, numClipIntersection: w, shadowMapEnabled: a.shadowMap.enabled && n.receiveShadow && 0 < f.shadows.length, shadowMapType: a.shadowMap.type, toneMapping: a.toneMapping, physicallyCorrectLights: a.physicallyCorrectLights,
        premultipliedAlpha: d.premultipliedAlpha, alphaTest: d.alphaTest, doubleSided: 2 === d.side, flipSided: 1 === d.side, depthPacking: void 0 !== d.depthPacking ? d.depthPacking : !1 };
    };this.getProgramCode = function (a, b) {
      var c = [];b.shaderID ? c.push(b.shaderID) : (c.push(a.fragmentShader), c.push(a.vertexShader));if (void 0 !== a.defines) for (var d in a.defines) {
        c.push(d), c.push(a.defines[d]);
      }for (d = 0; d < f.length; d++) {
        c.push(b[f[d]]);
      }return c.join();
    };this.acquireProgram = function (b, c, e) {
      for (var f, w = 0, n = d.length; w < n; w++) {
        var p = d[w];if (p.code === e) {
          f = p;++f.usedTimes;break;
        }
      }void 0 === f && (f = new rf(a, e, b, c), d.push(f));return f;
    };this.releaseProgram = function (a) {
      if (0 === --a.usedTimes) {
        var b = d.indexOf(a);d[b] = d[d.length - 1];d.pop();a.destroy();
      }
    };this.programs = d;
  }function uf(a, b, c) {
    function d(a) {
      var h = a.target;a = f[h.id];null !== a.index && e(a.index);var k = a.attributes,
          m;for (m in k) {
        e(k[m]);
      }h.removeEventListener("dispose", d);delete f[h.id];m = b.get(h);m.wireframe && e(m.wireframe);b["delete"](h);h = b.get(a);h.wireframe && e(h.wireframe);b["delete"](a);c.memory.geometries--;
    }
    function e(c) {
      var d;d = c.isInterleavedBufferAttribute ? b.get(c.data).__webglBuffer : b.get(c).__webglBuffer;void 0 !== d && (a.deleteBuffer(d), c.isInterleavedBufferAttribute ? b["delete"](c.data) : b["delete"](c));
    }var f = {};return { get: function get(a) {
        var b = a.geometry;if (void 0 !== f[b.id]) return f[b.id];b.addEventListener("dispose", d);var e;b.isBufferGeometry ? e = b : b.isGeometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = new G().setFromObject(a)), e = b._bufferGeometry);f[b.id] = e;c.memory.geometries++;return e;
      } };
  }function vf(a, b, c) {
    function d(c, d) {
      var e = c.isInterleavedBufferAttribute ? c.data : c,
          k = b.get(e);void 0 === k.__webglBuffer ? (k.__webglBuffer = a.createBuffer(), a.bindBuffer(d, k.__webglBuffer), a.bufferData(d, e.array, e.dynamic ? a.DYNAMIC_DRAW : a.STATIC_DRAW), k.version = e.version) : k.version !== e.version && (a.bindBuffer(d, k.__webglBuffer), !1 === e.dynamic ? a.bufferData(d, e.array, a.STATIC_DRAW) : -1 === e.updateRange.count ? a.bufferSubData(d, 0, e.array) : 0 === e.updateRange.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(d, e.updateRange.offset * e.array.BYTES_PER_ELEMENT, e.array.subarray(e.updateRange.offset, e.updateRange.offset + e.updateRange.count)), e.updateRange.count = 0), k.version = e.version);
    }var e = new uf(a, b, c);return { getAttributeBuffer: function getAttributeBuffer(a) {
        return a.isInterleavedBufferAttribute ? b.get(a.data).__webglBuffer : b.get(a).__webglBuffer;
      }, getWireframeAttribute: function getWireframeAttribute(c) {
        var e = b.get(c);if (void 0 !== e.wireframe) return e.wireframe;var h = [],
            k = c.index,
            m = c.attributes;c = m.position;if (null !== k) for (var k = k.array, m = 0, w = k.length; m < w; m += 3) {
          var n = k[m + 0],
              p = k[m + 1],
              r = k[m + 2];h.push(n, p, p, r, r, n);
        } else for (k = m.position.array, m = 0, w = k.length / 3 - 1; m < w; m += 3) {
          n = m + 0, p = m + 1, r = m + 2, h.push(n, p, p, r, r, n);
        }h = new C(new (65535 < c.count ? Uint32Array : Uint16Array)(h), 1);d(h, a.ELEMENT_ARRAY_BUFFER);return e.wireframe = h;
      }, update: function update(b) {
        var c = e.get(b);b.geometry.isGeometry && c.updateFromObject(b);b = c.index;var h = c.attributes;null !== b && d(b, a.ELEMENT_ARRAY_BUFFER);for (var k in h) {
          d(h[k], a.ARRAY_BUFFER);
        }b = c.morphAttributes;for (k in b) {
          for (var h = b[k], m = 0, w = h.length; m < w; m++) {
            d(h[m], a.ARRAY_BUFFER);
          }
        }return c;
      } };
  }function wf(a, b, c, d, e, f, g) {
    function h(a, b) {
      if (a.width > b || a.height > b) {
        var c = b / Math.max(a.width, a.height),
            d = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");d.width = Math.floor(a.width * c);d.height = Math.floor(a.height * c);d.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, d.width, d.height);console.warn("THREE.WebGLRenderer: image is too big (" + a.width + "x" + a.height + "). Resized to " + d.width + "x" + d.height, a);return d;
      }return a;
    }
    function k(a) {
      return T.isPowerOfTwo(a.width) && T.isPowerOfTwo(a.height);
    }function m(b) {
      return 1003 === b || 1004 === b || 1005 === b ? a.NEAREST : a.LINEAR;
    }function w(b) {
      b = b.target;b.removeEventListener("dispose", w);a: {
        var c = d.get(b);if (b.image && c.__image__webglTextureCube) a.deleteTexture(c.__image__webglTextureCube);else {
          if (void 0 === c.__webglInit) break a;a.deleteTexture(c.__webglTexture);
        }d["delete"](b);
      }q.textures--;
    }function n(b) {
      b = b.target;b.removeEventListener("dispose", n);var c = d.get(b),
          e = d.get(b.texture);if (b) {
        void 0 !== e.__webglTexture && a.deleteTexture(e.__webglTexture);b.depthTexture && b.depthTexture.dispose();if (b && b.isWebGLRenderTargetCube) for (e = 0; 6 > e; e++) {
          a.deleteFramebuffer(c.__webglFramebuffer[e]), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer[e]);
        } else a.deleteFramebuffer(c.__webglFramebuffer), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer);d["delete"](b.texture);d["delete"](b);
      }q.textures--;
    }function p(b, g) {
      var m = d.get(b);if (0 < b.version && m.__version !== b.version) {
        var p = b.image;
        if (void 0 === p) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", b);else if (!1 === p.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", b);else {
          void 0 === m.__webglInit && (m.__webglInit = !0, b.addEventListener("dispose", w), m.__webglTexture = a.createTexture(), q.textures++);c.activeTexture(a.TEXTURE0 + g);c.bindTexture(a.TEXTURE_2D, m.__webglTexture);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL, b.flipY);a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL, b.premultiplyAlpha);a.pixelStorei(a.UNPACK_ALIGNMENT, b.unpackAlignment);var n = h(b.image, e.maxTextureSize);if ((1001 !== b.wrapS || 1001 !== b.wrapT || 1003 !== b.minFilter && 1006 !== b.minFilter) && !1 === k(n)) if (p = n, p instanceof HTMLImageElement || p instanceof HTMLCanvasElement) {
            var l = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");l.width = T.nearestPowerOfTwo(p.width);l.height = T.nearestPowerOfTwo(p.height);l.getContext("2d").drawImage(p, 0, 0, l.width, l.height);console.warn("THREE.WebGLRenderer: image is not power of two (" + p.width + "x" + p.height + "). Resized to " + l.width + "x" + l.height, p);n = l;
          } else n = p;var p = k(n),
              l = f(b.format),
              x = f(b.type);r(a.TEXTURE_2D, b, p);var t = b.mipmaps;if (b && b.isDepthTexture) {
            t = a.DEPTH_COMPONENT;if (1015 === b.type) {
              if (!u) throw Error("Float Depth Texture only supported in WebGL2.0");t = a.DEPTH_COMPONENT32F;
            } else u && (t = a.DEPTH_COMPONENT16);1027 === b.format && (t = a.DEPTH_STENCIL);c.texImage2D(a.TEXTURE_2D, 0, t, n.width, n.height, 0, l, x, null);
          } else if (b && b.isDataTexture) {
            if (0 < t.length && p) {
              for (var K = 0, ja = t.length; K < ja; K++) {
                n = t[K], c.texImage2D(a.TEXTURE_2D, K, l, n.width, n.height, 0, l, x, n.data);
              }b.generateMipmaps = !1;
            } else c.texImage2D(a.TEXTURE_2D, 0, l, n.width, n.height, 0, l, x, n.data);
          } else if (b && b.isCompressedTexture) for (K = 0, ja = t.length; K < ja; K++) {
            n = t[K], 1023 !== b.format && 1022 !== b.format ? -1 < c.getCompressedTextureFormats().indexOf(l) ? c.compressedTexImage2D(a.TEXTURE_2D, K, l, n.width, n.height, 0, n.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : c.texImage2D(a.TEXTURE_2D, K, l, n.width, n.height, 0, l, x, n.data);
          } else if (0 < t.length && p) {
            K = 0;for (ja = t.length; K < ja; K++) {
              n = t[K], c.texImage2D(a.TEXTURE_2D, K, l, l, x, n);
            }b.generateMipmaps = !1;
          } else c.texImage2D(a.TEXTURE_2D, 0, l, l, x, n);b.generateMipmaps && p && a.generateMipmap(a.TEXTURE_2D);m.__version = b.version;if (b.onUpdate) b.onUpdate(b);return;
        }
      }c.activeTexture(a.TEXTURE0 + g);c.bindTexture(a.TEXTURE_2D, m.__webglTexture);
    }function r(c, g, h) {
      h ? (a.texParameteri(c, a.TEXTURE_WRAP_S, f(g.wrapS)), a.texParameteri(c, a.TEXTURE_WRAP_T, f(g.wrapT)), a.texParameteri(c, a.TEXTURE_MAG_FILTER, f(g.magFilter)), a.texParameteri(c, a.TEXTURE_MIN_FILTER, f(g.minFilter))) : (a.texParameteri(c, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE), a.texParameteri(c, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE), 1001 === g.wrapS && 1001 === g.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", g), a.texParameteri(c, a.TEXTURE_MAG_FILTER, m(g.magFilter)), a.texParameteri(c, a.TEXTURE_MIN_FILTER, m(g.minFilter)), 1003 !== g.minFilter && 1006 !== g.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", g));!(h = b.get("EXT_texture_filter_anisotropic")) || 1015 === g.type && null === b.get("OES_texture_float_linear") || 1016 === g.type && null === b.get("OES_texture_half_float_linear") || !(1 < g.anisotropy || d.get(g).__currentAnisotropy) || (a.texParameterf(c, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(g.anisotropy, e.getMaxAnisotropy())), d.get(g).__currentAnisotropy = g.anisotropy);
    }function l(b, e, g, h) {
      var k = f(e.texture.format),
          m = f(e.texture.type);c.texImage2D(h, 0, k, e.width, e.height, 0, k, m, null);a.bindFramebuffer(a.FRAMEBUFFER, b);a.framebufferTexture2D(a.FRAMEBUFFER, g, h, d.get(e.texture).__webglTexture, 0);a.bindFramebuffer(a.FRAMEBUFFER, null);
    }function t(b, c) {
      a.bindRenderbuffer(a.RENDERBUFFER, b);c.depthBuffer && !c.stencilBuffer ? (a.renderbufferStorage(a.RENDERBUFFER, a.DEPTH_COMPONENT16, c.width, c.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.RENDERBUFFER, b)) : c.depthBuffer && c.stencilBuffer ? (a.renderbufferStorage(a.RENDERBUFFER, a.DEPTH_STENCIL, c.width, c.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT, a.RENDERBUFFER, b)) : a.renderbufferStorage(a.RENDERBUFFER, a.RGBA4, c.width, c.height);a.bindRenderbuffer(a.RENDERBUFFER, null);
    }var q = g.memory,
        u = "undefined" !== typeof WebGL2RenderingContext && a instanceof WebGL2RenderingContext;this.setTexture2D = p;this.setTextureCube = function (b, g) {
      var m = d.get(b);if (6 === b.image.length) if (0 < b.version && m.__version !== b.version) {
        m.__image__webglTextureCube || (b.addEventListener("dispose", w), m.__image__webglTextureCube = a.createTexture(), q.textures++);c.activeTexture(a.TEXTURE0 + g);c.bindTexture(a.TEXTURE_CUBE_MAP, m.__image__webglTextureCube);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL, b.flipY);for (var p = b && b.isCompressedTexture, n = b.image[0] && b.image[0].isDataTexture, l = [], x = 0; 6 > x; x++) {
          l[x] = p || n ? n ? b.image[x].image : b.image[x] : h(b.image[x], e.maxCubemapSize);
        }var t = k(l[0]),
            u = f(b.format),
            ja = f(b.type);r(a.TEXTURE_CUBE_MAP, b, t);for (x = 0; 6 > x; x++) {
          if (p) for (var B, C = l[x].mipmaps, z = 0, N = C.length; z < N; z++) {
            B = C[z], 1023 !== b.format && 1022 !== b.format ? -1 < c.getCompressedTextureFormats().indexOf(u) ? c.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + x, z, u, B.width, B.height, 0, B.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + x, z, u, B.width, B.height, 0, u, ja, B.data);
          } else n ? c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, u, l[x].width, l[x].height, 0, u, ja, l[x].data) : c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, u, u, ja, l[x]);
        }b.generateMipmaps && t && a.generateMipmap(a.TEXTURE_CUBE_MAP);m.__version = b.version;if (b.onUpdate) b.onUpdate(b);
      } else c.activeTexture(a.TEXTURE0 + g), c.bindTexture(a.TEXTURE_CUBE_MAP, m.__image__webglTextureCube);
    };this.setTextureCubeDynamic = function (b, e) {
      c.activeTexture(a.TEXTURE0 + e);c.bindTexture(a.TEXTURE_CUBE_MAP, d.get(b).__webglTexture);
    };this.setupRenderTarget = function (b) {
      var e = d.get(b),
          f = d.get(b.texture);b.addEventListener("dispose", n);f.__webglTexture = a.createTexture();q.textures++;var g = b && b.isWebGLRenderTargetCube,
          h = k(b);if (g) {
        e.__webglFramebuffer = [];for (var m = 0; 6 > m; m++) {
          e.__webglFramebuffer[m] = a.createFramebuffer();
        }
      } else e.__webglFramebuffer = a.createFramebuffer();if (g) {
        c.bindTexture(a.TEXTURE_CUBE_MAP, f.__webglTexture);r(a.TEXTURE_CUBE_MAP, b.texture, h);for (m = 0; 6 > m; m++) {
          l(e.__webglFramebuffer[m], b, a.COLOR_ATTACHMENT0, a.TEXTURE_CUBE_MAP_POSITIVE_X + m);
        }b.texture.generateMipmaps && h && a.generateMipmap(a.TEXTURE_CUBE_MAP);c.bindTexture(a.TEXTURE_CUBE_MAP, null);
      } else c.bindTexture(a.TEXTURE_2D, f.__webglTexture), r(a.TEXTURE_2D, b.texture, h), l(e.__webglFramebuffer, b, a.COLOR_ATTACHMENT0, a.TEXTURE_2D), b.texture.generateMipmaps && h && a.generateMipmap(a.TEXTURE_2D), c.bindTexture(a.TEXTURE_2D, null);if (b.depthBuffer) {
        e = d.get(b);f = b && b.isWebGLRenderTargetCube;if (b.depthTexture) {
          if (f) throw Error("target.depthTexture not supported in Cube render targets");if (b && b.isWebGLRenderTargetCube) throw Error("Depth Texture with cube render targets is not supported!");a.bindFramebuffer(a.FRAMEBUFFER, e.__webglFramebuffer);if (!b.depthTexture || !b.depthTexture.isDepthTexture) throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(b.depthTexture).__webglTexture && b.depthTexture.image.width === b.width && b.depthTexture.image.height === b.height || (b.depthTexture.image.width = b.width, b.depthTexture.image.height = b.height, b.depthTexture.needsUpdate = !0);p(b.depthTexture, 0);e = d.get(b.depthTexture).__webglTexture;if (1026 === b.depthTexture.format) a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.TEXTURE_2D, e, 0);else if (1027 === b.depthTexture.format) a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT, a.TEXTURE_2D, e, 0);else throw Error("Unknown depthTexture format");
        } else if (f) for (e.__webglDepthbuffer = [], f = 0; 6 > f; f++) {
          a.bindFramebuffer(a.FRAMEBUFFER, e.__webglFramebuffer[f]), e.__webglDepthbuffer[f] = a.createRenderbuffer(), t(e.__webglDepthbuffer[f], b);
        } else a.bindFramebuffer(a.FRAMEBUFFER, e.__webglFramebuffer), e.__webglDepthbuffer = a.createRenderbuffer(), t(e.__webglDepthbuffer, b);a.bindFramebuffer(a.FRAMEBUFFER, null);
      }
    };this.updateRenderTargetMipmap = function (b) {
      var e = b.texture;e.generateMipmaps && k(b) && 1003 !== e.minFilter && 1006 !== e.minFilter && (b = b && b.isWebGLRenderTargetCube ? a.TEXTURE_CUBE_MAP : a.TEXTURE_2D, e = d.get(e).__webglTexture, c.bindTexture(b, e), a.generateMipmap(b), c.bindTexture(b, null));
    };
  }function xf() {
    var a = {};return { get: function get(b) {
        b = b.uuid;var c = a[b];void 0 === c && (c = {}, a[b] = c);return c;
      }, "delete": function _delete(b) {
        delete a[b.uuid];
      }, clear: function clear() {
        a = {};
      } };
  }function yf(a, b, c) {
    function d(b, c, d) {
      var e = new Uint8Array(4),
          f = a.createTexture();a.bindTexture(b, f);a.texParameteri(b, a.TEXTURE_MIN_FILTER, a.NEAREST);a.texParameteri(b, a.TEXTURE_MAG_FILTER, a.NEAREST);for (b = 0; b < d; b++) {
        a.texImage2D(c + b, 0, a.RGBA, 1, 1, 0, a.RGBA, a.UNSIGNED_BYTE, e);
      }return f;
    }function e(b) {
      !0 !== E[b] && (a.enable(b), E[b] = !0);
    }function f(b) {
      !1 !== E[b] && (a.disable(b), E[b] = !1);
    }function g(b, d, g, h, k, m, p, n) {
      0 !== b ? e(a.BLEND) : f(a.BLEND);if (b !== F || n !== G) 2 === b ? n ? (a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.ONE, a.ONE, a.ONE, a.ONE)) : (a.blendEquation(a.FUNC_ADD), a.blendFunc(a.SRC_ALPHA, a.ONE)) : 3 === b ? n ? (a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.ZERO, a.ZERO, a.ONE_MINUS_SRC_COLOR, a.ONE_MINUS_SRC_ALPHA)) : (a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.ONE_MINUS_SRC_COLOR)) : 4 === b ? n ? (a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.ZERO, a.SRC_COLOR, a.ZERO, a.SRC_ALPHA)) : (a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.SRC_COLOR)) : n ? (a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.ONE, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA)) : (a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA)), F = b, G = n;if (5 === b) {
        k = k || d;m = m || g;p = p || h;if (d !== M || k !== B) a.blendEquationSeparate(c(d), c(k)), M = d, B = k;if (g !== ca || h !== K || m !== C || p !== z) a.blendFuncSeparate(c(g), c(h), c(m), c(p)), ca = g, K = h, C = m, z = p;
      } else z = C = B = K = ca = M = null;
    }function h(a) {
      t.setFunc(a);
    }function k(b) {
      N !== b && (b ? a.frontFace(a.CW) : a.frontFace(a.CCW), N = b);
    }function m(b) {
      0 !== b ? (e(a.CULL_FACE), b !== P && (1 === b ? a.cullFace(a.BACK) : 2 === b ? a.cullFace(a.FRONT) : a.cullFace(a.FRONT_AND_BACK))) : f(a.CULL_FACE);P = b;
    }function w(b) {
      void 0 === b && (b = a.TEXTURE0 + O - 1);L !== b && (a.activeTexture(b), L = b);
    }function n(a, b, c, d) {
      l.setClear(a, b, c, d);
    }function p(a) {
      t.setClear(a);
    }function r(a) {
      q.setClear(a);
    }var l = new function () {
      var b = !1,
          c = new ga(),
          d = null,
          e = new ga();return { setMask: function setMask(c) {
          d === c || b || (a.colorMask(c, c, c, c), d = c);
        }, setLocked: function setLocked(a) {
          b = a;
        }, setClear: function setClear(b, d, f, g) {
          c.set(b, d, f, g);!1 === e.equals(c) && (a.clearColor(b, d, f, g), e.copy(c));
        }, reset: function reset() {
          b = !1;d = null;e.set(0, 0, 0, 1);
        } };
    }(),
        t = new function () {
      var b = !1,
          c = null,
          d = null,
          g = null;return { setTest: function setTest(b) {
          b ? e(a.DEPTH_TEST) : f(a.DEPTH_TEST);
        }, setMask: function setMask(d) {
          c === d || b || (a.depthMask(d), c = d);
        }, setFunc: function setFunc(b) {
          if (d !== b) {
            if (b) switch (b) {case 0:
                a.depthFunc(a.NEVER);break;case 1:
                a.depthFunc(a.ALWAYS);break;case 2:
                a.depthFunc(a.LESS);break;case 3:
                a.depthFunc(a.LEQUAL);break;case 4:
                a.depthFunc(a.EQUAL);break;case 5:
                a.depthFunc(a.GEQUAL);
                break;case 6:
                a.depthFunc(a.GREATER);break;case 7:
                a.depthFunc(a.NOTEQUAL);break;default:
                a.depthFunc(a.LEQUAL);} else a.depthFunc(a.LEQUAL);d = b;
          }
        }, setLocked: function setLocked(a) {
          b = a;
        }, setClear: function setClear(b) {
          g !== b && (a.clearDepth(b), g = b);
        }, reset: function reset() {
          b = !1;g = d = c = null;
        } };
    }(),
        q = new function () {
      var b = !1,
          c = null,
          d = null,
          g = null,
          h = null,
          k = null,
          m = null,
          p = null,
          n = null;return { setTest: function setTest(b) {
          b ? e(a.STENCIL_TEST) : f(a.STENCIL_TEST);
        }, setMask: function setMask(d) {
          c === d || b || (a.stencilMask(d), c = d);
        }, setFunc: function setFunc(b, c, e) {
          if (d !== b || g !== c || h !== e) a.stencilFunc(b, c, e), d = b, g = c, h = e;
        }, setOp: function setOp(b, c, d) {
          if (k !== b || m !== c || p !== d) a.stencilOp(b, c, d), k = b, m = c, p = d;
        }, setLocked: function setLocked(a) {
          b = a;
        }, setClear: function setClear(b) {
          n !== b && (a.clearStencil(b), n = b);
        }, reset: function reset() {
          b = !1;n = p = m = k = h = g = d = c = null;
        } };
    }(),
        u = a.getParameter(a.MAX_VERTEX_ATTRIBS),
        v = new Uint8Array(u),
        I = new Uint8Array(u),
        y = new Uint8Array(u),
        E = {},
        H = null,
        F = null,
        M = null,
        ca = null,
        K = null,
        B = null,
        C = null,
        z = null,
        G = !1,
        N = null,
        P = null,
        R = null,
        S = null,
        J = null,
        V = null,
        O = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),
        L = null,
        Q = {},
        T = new ga(),
        U = new ga(),
        fb = {};fb[a.TEXTURE_2D] = d(a.TEXTURE_2D, a.TEXTURE_2D, 1);fb[a.TEXTURE_CUBE_MAP] = d(a.TEXTURE_CUBE_MAP, a.TEXTURE_CUBE_MAP_POSITIVE_X, 6);return { buffers: { color: l, depth: t, stencil: q }, init: function init() {
        n(0, 0, 0, 1);p(1);r(0);e(a.DEPTH_TEST);h(3);k(!1);m(1);e(a.CULL_FACE);e(a.BLEND);g(1);
      }, initAttributes: function initAttributes() {
        for (var a = 0, b = v.length; a < b; a++) {
          v[a] = 0;
        }
      }, enableAttribute: function enableAttribute(c) {
        v[c] = 1;0 === I[c] && (a.enableVertexAttribArray(c), I[c] = 1);0 !== y[c] && (b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c, 0), y[c] = 0);
      }, enableAttributeAndDivisor: function enableAttributeAndDivisor(b, c, d) {
        v[b] = 1;0 === I[b] && (a.enableVertexAttribArray(b), I[b] = 1);y[b] !== c && (d.vertexAttribDivisorANGLE(b, c), y[b] = c);
      }, disableUnusedAttributes: function disableUnusedAttributes() {
        for (var b = 0, c = I.length; b !== c; ++b) {
          I[b] !== v[b] && (a.disableVertexAttribArray(b), I[b] = 0);
        }
      }, enable: e, disable: f, getCompressedTextureFormats: function getCompressedTextureFormats() {
        if (null === H && (H = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc") || b.get("WEBGL_compressed_texture_etc1"))) for (var c = a.getParameter(a.COMPRESSED_TEXTURE_FORMATS), d = 0; d < c.length; d++) {
          H.push(c[d]);
        }return H;
      }, setBlending: g, setColorWrite: function setColorWrite(a) {
        l.setMask(a);
      }, setDepthTest: function setDepthTest(a) {
        t.setTest(a);
      }, setDepthWrite: function setDepthWrite(a) {
        t.setMask(a);
      }, setDepthFunc: h, setStencilTest: function setStencilTest(a) {
        q.setTest(a);
      }, setStencilWrite: function setStencilWrite(a) {
        q.setMask(a);
      }, setStencilFunc: function setStencilFunc(a, b, c) {
        q.setFunc(a, b, c);
      }, setStencilOp: function setStencilOp(a, b, c) {
        q.setOp(a, b, c);
      }, setFlipSided: k, setCullFace: m, setLineWidth: function setLineWidth(b) {
        b !== R && (a.lineWidth(b), R = b);
      }, setPolygonOffset: function setPolygonOffset(b, c, d) {
        if (b) {
          if (e(a.POLYGON_OFFSET_FILL), S !== c || J !== d) a.polygonOffset(c, d), S = c, J = d;
        } else f(a.POLYGON_OFFSET_FILL);
      }, getScissorTest: function getScissorTest() {
        return V;
      }, setScissorTest: function setScissorTest(b) {
        (V = b) ? e(a.SCISSOR_TEST) : f(a.SCISSOR_TEST);
      }, activeTexture: w, bindTexture: function bindTexture(b, c) {
        null === L && w();var d = Q[L];void 0 === d && (d = { type: void 0, texture: void 0 }, Q[L] = d);if (d.type !== b || d.texture !== c) a.bindTexture(b, c || fb[b]), d.type = b, d.texture = c;
      }, compressedTexImage2D: function compressedTexImage2D() {
        try {
          a.compressedTexImage2D.apply(a, arguments);
        } catch (b) {
          console.error(b);
        }
      }, texImage2D: function texImage2D() {
        try {
          a.texImage2D.apply(a, arguments);
        } catch (b) {
          console.error(b);
        }
      }, clearColor: n, clearDepth: p, clearStencil: r, scissor: function scissor(b) {
        !1 === T.equals(b) && (a.scissor(b.x, b.y, b.z, b.w), T.copy(b));
      }, viewport: function viewport(b) {
        !1 === U.equals(b) && (a.viewport(b.x, b.y, b.z, b.w), U.copy(b));
      }, reset: function reset() {
        for (var b = 0; b < I.length; b++) {
          1 === I[b] && (a.disableVertexAttribArray(b), I[b] = 0);
        }E = {};L = H = null;Q = {};P = N = F = null;l.reset();t.reset();q.reset();
      } };
  }function zf(a, b, c) {
    function d(b) {
      if ("highp" === b) {
        if (0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).precision) return "highp";b = "mediump";
      }return "mediump" === b && 0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).precision ? "mediump" : "lowp";
    }var e,
        f = void 0 !== c.precision ? c.precision : "highp",
        g = d(f);g !== f && (console.warn("THREE.WebGLRenderer:", f, "not supported, using", g, "instead."), f = g);c = !0 === c.logarithmicDepthBuffer && !!b.get("EXT_frag_depth");var g = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),
        h = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
        k = a.getParameter(a.MAX_TEXTURE_SIZE),
        m = a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),
        w = a.getParameter(a.MAX_VERTEX_ATTRIBS),
        n = a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),
        p = a.getParameter(a.MAX_VARYING_VECTORS),
        r = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),
        l = 0 < h,
        t = !!b.get("OES_texture_float");return { getMaxAnisotropy: function getMaxAnisotropy() {
        if (void 0 !== e) return e;var c = b.get("EXT_texture_filter_anisotropic");return e = null !== c ? a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
      }, getMaxPrecision: d, precision: f, logarithmicDepthBuffer: c, maxTextures: g, maxVertexTextures: h, maxTextureSize: k, maxCubemapSize: m, maxAttributes: w, maxVertexUniforms: n, maxVaryings: p, maxFragmentUniforms: r, vertexTextures: l, floatFragmentTextures: t, floatVertexTextures: l && t };
  }function Af(a) {
    var b = {};return { get: function get(c) {
        if (void 0 !== b[c]) return b[c];var d;switch (c) {case "WEBGL_depth_texture":
            d = a.getExtension("WEBGL_depth_texture") || a.getExtension("MOZ_WEBGL_depth_texture") || a.getExtension("WEBKIT_WEBGL_depth_texture");
            break;case "EXT_texture_filter_anisotropic":
            d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":
            d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":
            d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case "WEBGL_compressed_texture_etc1":
            d = a.getExtension("WEBGL_compressed_texture_etc1");break;default:
            d = a.getExtension(c);}null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");return b[c] = d;
      } };
  }function Bf() {
    function a() {
      m.value !== d && (m.value = d, m.needsUpdate = 0 < e);c.numPlanes = e;c.numIntersection = 0;
    }function b(a, b, d, e) {
      var f = null !== a ? a.length : 0,
          g = null;if (0 !== f) {
        g = m.value;if (!0 !== e || null === g) {
          e = d + 4 * f;b = b.matrixWorldInverse;
          k.getNormalMatrix(b);if (null === g || g.length < e) g = new Float32Array(e);for (e = 0; e !== f; ++e, d += 4) {
            h.copy(a[e]).applyMatrix4(b, k), h.normal.toArray(g, d), g[d + 3] = h.constant;
          }
        }m.value = g;m.needsUpdate = !0;
      }c.numPlanes = f;return g;
    }var c = this,
        d = null,
        e = 0,
        f = !1,
        g = !1,
        h = new va(),
        k = new Ia(),
        m = { value: null, needsUpdate: !1 };this.uniform = m;this.numIntersection = this.numPlanes = 0;this.init = function (a, c, g) {
      var h = 0 !== a.length || c || 0 !== e || f;f = c;d = b(a, g, 0);e = a.length;return h;
    };this.beginShadows = function () {
      g = !0;b(null);
    };this.endShadows = function () {
      g = !1;a();
    };this.setState = function (c, h, k, r, l, t) {
      if (!f || null === c || 0 === c.length || g && !k) g ? b(null) : a();else {
        k = g ? 0 : e;var q = 4 * k,
            u = l.clippingState || null;m.value = u;u = b(c, r, q, t);for (c = 0; c !== q; ++c) {
          u[c] = d[c];
        }l.clippingState = u;this.numIntersection = h ? this.numPlanes : 0;this.numPlanes += k;
      }
    };
  }function Dd(a) {
    function b(a, b, c, d) {
      !0 === M && (a *= d, b *= d, c *= d);Y.clearColor(a, b, c, d);
    }function c() {
      Y.init();Y.scissor(X.copy(ha).multiplyScalar(Qa));Y.viewport($a.copy(fa).multiplyScalar(Qa));b(Da.r, Da.g, Da.b, Ra);
    }function d() {
      W = Q = null;
      U = "";L = -1;Y.reset();
    }function e(a) {
      a.preventDefault();d();c();ea.clear();
    }function f(a) {
      a = a.target;a.removeEventListener("dispose", f);g(a);ea["delete"](a);
    }function g(a) {
      var b = ea.get(a).program;a.program = void 0;void 0 !== b && va.releaseProgram(b);
    }function h(a, b) {
      return Math.abs(b[0]) - Math.abs(a[0]);
    }function k(a, b) {
      return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.material.program && b.material.program && a.material.program !== b.material.program ? a.material.program.id - b.material.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
    }function m(a, b) {
      return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
    }function w(a, b, c, d, e) {
      var f;c.transparent ? (d = z, f = ++Ka) : (d = B, f = ++C);f = d[f];void 0 !== f ? (f.id = a.id, f.object = a, f.geometry = b, f.material = c, f.z = Z.z, f.group = e) : (f = { id: a.id, object: a, geometry: b, material: c, z: Z.z, group: e }, d.push(f));
    }function n(a) {
      if (!oa.intersectsSphere(a)) return !1;
      var b = ba.numPlanes;if (0 === b) return !0;var c = S.clippingPlanes,
          d = a.center;a = -a.radius;var e = 0;do {
        if (c[e].distanceToPoint(d) < a) return !1;
      } while (++e !== b);return !0;
    }function p(a, b) {
      if (!1 !== a.visible) {
        if (0 !== (a.layers.mask & b.layers.mask)) if (a.isLight) K.push(a);else if (a.isSprite) {
          var c;(c = !1 === a.frustumCulled) || (na.center.set(0, 0, 0), na.radius = .7071067811865476, na.applyMatrix4(a.matrixWorld), c = !0 === n(na));c && P.push(a);
        } else if (a.isLensFlare) R.push(a);else if (a.isImmediateRenderObject) !0 === S.sortObjects && (Z.setFromMatrixPosition(a.matrixWorld), Z.applyProjection(ra)), w(a, null, a.material, Z.z, null);else if (a.isMesh || a.isLine || a.isPoints) if (a.isSkinnedMesh && a.skeleton.update(), (c = !1 === a.frustumCulled) || (c = a.geometry, null === c.boundingSphere && c.computeBoundingSphere(), na.copy(c.boundingSphere).applyMatrix4(a.matrixWorld), c = !0 === n(na)), c) {
          var d = a.material;if (!0 === d.visible) if (!0 === S.sortObjects && (Z.setFromMatrixPosition(a.matrixWorld), Z.applyProjection(ra)), c = qa.update(a), d.isMultiMaterial) for (var e = c.groups, f = d.materials, d = 0, g = e.length; d < g; d++) {
            var h = e[d],
                k = f[h.materialIndex];!0 === k.visible && w(a, c, k, Z.z, h);
          } else w(a, c, d, Z.z, null);
        }c = a.children;d = 0;for (g = c.length; d < g; d++) {
          p(c[d], b);
        }
      }
    }function r(a, b, c, d) {
      for (var e = 0, f = a.length; e < f; e++) {
        var g = a[e],
            h = g.object,
            k = g.geometry,
            m = void 0 === d ? g.material : d,
            g = g.group;h.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse, h.matrixWorld);h.normalMatrix.getNormalMatrix(h.modelViewMatrix);h.onBeforeRender(S, b, c, k, m, g);if (h.isImmediateRenderObject) {
          l(m);var p = t(c, b.fog, m, h);U = "";h.render(function (a) {
            S.renderBufferImmediate(a, p, m);
          });
        } else S.renderBufferDirect(c, b.fog, k, m, h, g);h.onAfterRender(S, b, c, k, m, g);
      }
    }function l(a) {
      2 === a.side ? Y.disable(A.CULL_FACE) : Y.enable(A.CULL_FACE);Y.setFlipSided(1 === a.side);!0 === a.transparent ? Y.setBlending(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha, a.premultipliedAlpha) : Y.setBlending(0);Y.setDepthFunc(a.depthFunc);Y.setDepthTest(a.depthTest);Y.setDepthWrite(a.depthWrite);Y.setColorWrite(a.colorWrite);Y.setPolygonOffset(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
    }function t(a, b, c, d) {
      da = 0;var e = ea.get(c);pa && (sa || a !== W) && ba.setState(c.clippingPlanes, c.clipIntersection, c.clipShadows, a, e, a === W && c.id === L);!1 === c.needsUpdate && (void 0 === e.program ? c.needsUpdate = !0 : c.fog && e.fog !== b ? c.needsUpdate = !0 : c.lights && e.lightsHash !== aa.hash ? c.needsUpdate = !0 : void 0 === e.numClippingPlanes || e.numClippingPlanes === ba.numPlanes && e.numIntersection === ba.numIntersection || (c.needsUpdate = !0));if (c.needsUpdate) {
        a: {
          var h = ea.get(c),
              k = va.getParameters(c, aa, b, ba.numPlanes, ba.numIntersection, d),
              m = va.getProgramCode(c, k),
              p = h.program,
              n = !0;if (void 0 === p) c.addEventListener("dispose", f);else if (p.code !== m) g(c);else if (void 0 !== k.shaderID) break a;else n = !1;n && (k.shaderID ? (p = Gb[k.shaderID], h.__webglShader = { name: c.type, uniforms: La.clone(p.uniforms), vertexShader: p.vertexShader, fragmentShader: p.fragmentShader }) : h.__webglShader = { name: c.type, uniforms: c.uniforms, vertexShader: c.vertexShader, fragmentShader: c.fragmentShader }, c.__webglShader = h.__webglShader, p = va.acquireProgram(c, k, m), h.program = p, c.program = p);k = p.getAttributes();if (c.morphTargets) for (m = c.numSupportedMorphTargets = 0; m < S.maxMorphTargets; m++) {
            0 <= k["morphTarget" + m] && c.numSupportedMorphTargets++;
          }if (c.morphNormals) for (m = c.numSupportedMorphNormals = 0; m < S.maxMorphNormals; m++) {
            0 <= k["morphNormal" + m] && c.numSupportedMorphNormals++;
          }k = h.__webglShader.uniforms;if (!c.isShaderMaterial && !c.isRawShaderMaterial || !0 === c.clipping) h.numClippingPlanes = ba.numPlanes, h.numIntersection = ba.numIntersection, k.clippingPlanes = ba.uniform;h.fog = b;h.lightsHash = aa.hash;c.lights && (k.ambientLightColor.value = aa.ambient, k.directionalLights.value = aa.directional, k.spotLights.value = aa.spot, k.pointLights.value = aa.point, k.hemisphereLights.value = aa.hemi, k.directionalShadowMap.value = aa.directionalShadowMap, k.directionalShadowMatrix.value = aa.directionalShadowMatrix, k.spotShadowMap.value = aa.spotShadowMap, k.spotShadowMatrix.value = aa.spotShadowMatrix, k.pointShadowMap.value = aa.pointShadowMap, k.pointShadowMatrix.value = aa.pointShadowMatrix);m = h.program.getUniforms();
          k = Ya.seqWithValue(m.seq, k);h.uniformsList = k;
        }c.needsUpdate = !1;
      }var w = !1,
          n = p = !1,
          h = e.program,
          k = h.getUniforms(),
          m = e.__webglShader.uniforms;h.id !== Q && (A.useProgram(h.program), Q = h.id, n = p = w = !0);c.id !== L && (L = c.id, p = !0);if (w || a !== W) {
        k.set(A, a, "projectionMatrix");ia.logarithmicDepthBuffer && k.setValue(A, "logDepthBufFC", 2 / (Math.log(a.far + 1) / Math.LN2));a !== W && (W = a, n = p = !0);if (c.isShaderMaterial || c.isMeshPhongMaterial || c.isMeshStandardMaterial || c.envMap) w = k.map.cameraPosition, void 0 !== w && w.setValue(A, Z.setFromMatrixPosition(a.matrixWorld));
        (c.isMeshPhongMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial || c.skinning) && k.setValue(A, "viewMatrix", a.matrixWorldInverse);k.set(A, S, "toneMappingExposure");k.set(A, S, "toneMappingWhitePoint");
      }c.skinning && (k.setOptional(A, d, "bindMatrix"), k.setOptional(A, d, "bindMatrixInverse"), a = d.skeleton) && (ia.floatVertexTextures && a.useVertexTexture ? (k.set(A, a, "boneTexture"), k.set(A, a, "boneTextureWidth"), k.set(A, a, "boneTextureHeight")) : k.setOptional(A, a, "boneMatrices"));
      if (p) {
        c.lights && (a = n, m.ambientLightColor.needsUpdate = a, m.directionalLights.needsUpdate = a, m.pointLights.needsUpdate = a, m.spotLights.needsUpdate = a, m.hemisphereLights.needsUpdate = a);b && c.fog && (m.fogColor.value = b.color, b.isFog ? (m.fogNear.value = b.near, m.fogFar.value = b.far) : b.isFogExp2 && (m.fogDensity.value = b.density));if (c.isMeshBasicMaterial || c.isMeshLambertMaterial || c.isMeshPhongMaterial || c.isMeshStandardMaterial || c.isMeshDepthMaterial) {
          m.opacity.value = c.opacity;m.diffuse.value = c.color;c.emissive && m.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity);
          m.map.value = c.map;m.specularMap.value = c.specularMap;m.alphaMap.value = c.alphaMap;c.aoMap && (m.aoMap.value = c.aoMap, m.aoMapIntensity.value = c.aoMapIntensity);var r;c.map ? r = c.map : c.specularMap ? r = c.specularMap : c.displacementMap ? r = c.displacementMap : c.normalMap ? r = c.normalMap : c.bumpMap ? r = c.bumpMap : c.roughnessMap ? r = c.roughnessMap : c.metalnessMap ? r = c.metalnessMap : c.alphaMap ? r = c.alphaMap : c.emissiveMap && (r = c.emissiveMap);void 0 !== r && (r.isWebGLRenderTarget && (r = r.texture), b = r.offset, r = r.repeat, m.offsetRepeat.value.set(b.x, b.y, r.x, r.y));m.envMap.value = c.envMap;m.flipEnvMap.value = c.envMap && c.envMap.isCubeTexture ? -1 : 1;m.reflectivity.value = c.reflectivity;m.refractionRatio.value = c.refractionRatio;
        }c.isLineBasicMaterial ? (m.diffuse.value = c.color, m.opacity.value = c.opacity) : c.isLineDashedMaterial ? (m.diffuse.value = c.color, m.opacity.value = c.opacity, m.dashSize.value = c.dashSize, m.totalSize.value = c.dashSize + c.gapSize, m.scale.value = c.scale) : c.isPointsMaterial ? (m.diffuse.value = c.color, m.opacity.value = c.opacity, m.size.value = c.size * Qa, m.scale.value = .5 * lc, m.map.value = c.map, null !== c.map && (r = c.map.offset, c = c.map.repeat, m.offsetRepeat.value.set(r.x, r.y, c.x, c.y))) : c.isMeshLambertMaterial ? (c.lightMap && (m.lightMap.value = c.lightMap, m.lightMapIntensity.value = c.lightMapIntensity), c.emissiveMap && (m.emissiveMap.value = c.emissiveMap)) : c.isMeshPhongMaterial ? (m.specular.value = c.specular, m.shininess.value = Math.max(c.shininess, 1E-4), c.lightMap && (m.lightMap.value = c.lightMap, m.lightMapIntensity.value = c.lightMapIntensity), c.emissiveMap && (m.emissiveMap.value = c.emissiveMap), c.bumpMap && (m.bumpMap.value = c.bumpMap, m.bumpScale.value = c.bumpScale), c.normalMap && (m.normalMap.value = c.normalMap, m.normalScale.value.copy(c.normalScale)), c.displacementMap && (m.displacementMap.value = c.displacementMap, m.displacementScale.value = c.displacementScale, m.displacementBias.value = c.displacementBias)) : c.isMeshPhysicalMaterial ? (m.clearCoat.value = c.clearCoat, m.clearCoatRoughness.value = c.clearCoatRoughness, D(m, c)) : c.isMeshStandardMaterial ? D(m, c) : c.isMeshDepthMaterial ? c.displacementMap && (m.displacementMap.value = c.displacementMap, m.displacementScale.value = c.displacementScale, m.displacementBias.value = c.displacementBias) : c.isMeshNormalMaterial && (m.opacity.value = c.opacity);Ya.upload(A, e.uniformsList, m, S);
      }k.set(A, d, "modelViewMatrix");k.set(A, d, "normalMatrix");k.setValue(A, "modelMatrix", d.matrixWorld);return h;
    }function D(a, b) {
      a.roughness.value = b.roughness;a.metalness.value = b.metalness;b.roughnessMap && (a.roughnessMap.value = b.roughnessMap);b.metalnessMap && (a.metalnessMap.value = b.metalnessMap);
      b.lightMap && (a.lightMap.value = b.lightMap, a.lightMapIntensity.value = b.lightMapIntensity);b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale);b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale));b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);b.envMap && (a.envMapIntensity.value = b.envMapIntensity);
    }function u(a) {
      var b;
      if (1E3 === a) return A.REPEAT;if (1001 === a) return A.CLAMP_TO_EDGE;if (1002 === a) return A.MIRRORED_REPEAT;if (1003 === a) return A.NEAREST;if (1004 === a) return A.NEAREST_MIPMAP_NEAREST;if (1005 === a) return A.NEAREST_MIPMAP_LINEAR;if (1006 === a) return A.LINEAR;if (1007 === a) return A.LINEAR_MIPMAP_NEAREST;if (1008 === a) return A.LINEAR_MIPMAP_LINEAR;if (1009 === a) return A.UNSIGNED_BYTE;if (1017 === a) return A.UNSIGNED_SHORT_4_4_4_4;if (1018 === a) return A.UNSIGNED_SHORT_5_5_5_1;if (1019 === a) return A.UNSIGNED_SHORT_5_6_5;if (1010 === a) return A.BYTE;if (1011 === a) return A.SHORT;if (1012 === a) return A.UNSIGNED_SHORT;if (1013 === a) return A.INT;if (1014 === a) return A.UNSIGNED_INT;if (1015 === a) return A.FLOAT;if (1016 === a && (b = ka.get("OES_texture_half_float"), null !== b)) return b.HALF_FLOAT_OES;if (1021 === a) return A.ALPHA;if (1022 === a) return A.RGB;if (1023 === a) return A.RGBA;if (1024 === a) return A.LUMINANCE;if (1025 === a) return A.LUMINANCE_ALPHA;if (1026 === a) return A.DEPTH_COMPONENT;if (1027 === a) return A.DEPTH_STENCIL;if (100 === a) return A.FUNC_ADD;if (101 === a) return A.FUNC_SUBTRACT;if (102 === a) return A.FUNC_REVERSE_SUBTRACT;if (200 === a) return A.ZERO;if (201 === a) return A.ONE;if (202 === a) return A.SRC_COLOR;if (203 === a) return A.ONE_MINUS_SRC_COLOR;if (204 === a) return A.SRC_ALPHA;if (205 === a) return A.ONE_MINUS_SRC_ALPHA;if (206 === a) return A.DST_ALPHA;if (207 === a) return A.ONE_MINUS_DST_ALPHA;if (208 === a) return A.DST_COLOR;if (209 === a) return A.ONE_MINUS_DST_COLOR;if (210 === a) return A.SRC_ALPHA_SATURATE;if (2001 === a || 2002 === a || 2003 === a || 2004 === a) if (b = ka.get("WEBGL_compressed_texture_s3tc"), null !== b) {
        if (2001 === a) return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if (2002 === a) return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if (2003 === a) return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if (2004 === a) return b.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      }if (2100 === a || 2101 === a || 2102 === a || 2103 === a) if (b = ka.get("WEBGL_compressed_texture_pvrtc"), null !== b) {
        if (2100 === a) return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if (2101 === a) return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if (2102 === a) return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if (2103 === a) return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      }if (2151 === a && (b = ka.get("WEBGL_compressed_texture_etc1"), null !== b)) return b.COMPRESSED_RGB_ETC1_WEBGL;if (103 === a || 104 === a) if (b = ka.get("EXT_blend_minmax"), null !== b) {
        if (103 === a) return b.MIN_EXT;if (104 === a) return b.MAX_EXT;
      }return 1020 === a && (b = ka.get("WEBGL_depth_texture"), null !== b) ? b.UNSIGNED_INT_24_8_WEBGL : 0;
    }console.log("THREE.WebGLRenderer", "82");a = a || {};var v = void 0 !== a.canvas ? a.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
        I = void 0 !== a.context ? a.context : null,
        y = void 0 !== a.alpha ? a.alpha : !1,
        E = void 0 !== a.depth ? a.depth : !0,
        H = void 0 !== a.stencil ? a.stencil : !0,
        F = void 0 !== a.antialias ? a.antialias : !1,
        M = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
        ca = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
        K = [],
        B = [],
        C = -1,
        z = [],
        Ka = -1,
        N = new Float32Array(8),
        P = [],
        R = [];this.domElement = v;this.context = null;this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;this.clippingPlanes = [];this.localClippingEnabled = !1;this.gammaFactor = 2;this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;this.maxMorphTargets = 8;this.maxMorphNormals = 4;var S = this,
        Q = null,
        V = null,
        T = null,
        L = -1,
        U = "",
        W = null,
        X = new ga(),
        fb = null,
        $a = new ga(),
        da = 0,
        Da = new O(0),
        Ra = 0,
        Pa = v.width,
        lc = v.height,
        Qa = 1,
        ha = new ga(0, 0, Pa, lc),
        la = !1,
        fa = new ga(0, 0, Pa, lc),
        oa = new jc(),
        ba = new Bf(),
        pa = !1,
        sa = !1,
        na = new Ca(),
        ra = new J(),
        Z = new q(),
        aa = { hash: "", ambient: [0, 0, 0], directional: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadowMap: [],
      spotShadowMatrix: [], point: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [], shadows: [] },
        ma = { calls: 0, vertices: 0, faces: 0, points: 0 };this.info = { render: ma, memory: { geometries: 0, textures: 0 }, programs: null };var A;try {
      y = { alpha: y, depth: E, stencil: H, antialias: F, premultipliedAlpha: M, preserveDrawingBuffer: ca };A = I || v.getContext("webgl", y) || v.getContext("experimental-webgl", y);if (null === A) {
        if (null !== v.getContext("webgl")) throw "Error creating WebGL context with your selected attributes.";throw "Error creating WebGL context.";
      }void 0 === A.getShaderPrecisionFormat && (A.getShaderPrecisionFormat = function () {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });v.addEventListener("webglcontextlost", e, !1);
    } catch (Cf) {
      console.error("THREE.WebGLRenderer: " + Cf);
    }var ka = new Af(A);ka.get("WEBGL_depth_texture");ka.get("OES_texture_float");ka.get("OES_texture_float_linear");ka.get("OES_texture_half_float");ka.get("OES_texture_half_float_linear");ka.get("OES_standard_derivatives");ka.get("ANGLE_instanced_arrays");ka.get("OES_element_index_uint") && (G.MaxIndex = 4294967296);var ia = new zf(A, ka, a),
        Y = new yf(A, ka, u),
        ea = new xf(),
        ua = new wf(A, ka, Y, ea, ia, u, this.info),
        qa = new vf(A, ea, this.info),
        va = new tf(this, ia),
        za = new lf();this.info.programs = va.programs;var Ga = new kf(A, ka, ma),
        Ha = new jf(A, ka, ma),
        Ia = new Hb(-1, 1, 1, -1, 0, 1),
        wa = new Ea(),
        Ba = new ya(new ib(2, 2), new Ma({ depthTest: !1, depthWrite: !1, fog: !1 }));a = Gb.cube;var xa = new ya(new hb(5, 5, 5), new Fa({ uniforms: a.uniforms, vertexShader: a.vertexShader, fragmentShader: a.fragmentShader, side: 1, depthTest: !1, depthWrite: !1, fog: !1 }));
    c();this.context = A;this.capabilities = ia;this.extensions = ka;this.properties = ea;this.state = Y;var Ja = new pe(this, aa, qa, ia);this.shadowMap = Ja;var Na = new hf(this, P),
        Oa = new ff(this, R);this.getContext = function () {
      return A;
    };this.getContextAttributes = function () {
      return A.getContextAttributes();
    };this.forceContextLoss = function () {
      ka.get("WEBGL_lose_context").loseContext();
    };this.getMaxAnisotropy = function () {
      return ia.getMaxAnisotropy();
    };this.getPrecision = function () {
      return ia.precision;
    };this.getPixelRatio = function () {
      return Qa;
    };
    this.setPixelRatio = function (a) {
      void 0 !== a && (Qa = a, this.setSize(fa.z, fa.w, !1));
    };this.getSize = function () {
      return { width: Pa, height: lc };
    };this.setSize = function (a, b, c) {
      Pa = a;lc = b;v.width = a * Qa;v.height = b * Qa;!1 !== c && (v.style.width = a + "px", v.style.height = b + "px");this.setViewport(0, 0, a, b);
    };this.setViewport = function (a, b, c, d) {
      Y.viewport(fa.set(a, b, c, d));
    };this.setScissor = function (a, b, c, d) {
      Y.scissor(ha.set(a, b, c, d));
    };this.setScissorTest = function (a) {
      Y.setScissorTest(la = a);
    };this.getClearColor = function () {
      return Da;
    };this.setClearColor = function (a, c) {
      Da.set(a);Ra = void 0 !== c ? c : 1;b(Da.r, Da.g, Da.b, Ra);
    };this.getClearAlpha = function () {
      return Ra;
    };this.setClearAlpha = function (a) {
      Ra = a;b(Da.r, Da.g, Da.b, Ra);
    };this.clear = function (a, b, c) {
      var d = 0;if (void 0 === a || a) d |= A.COLOR_BUFFER_BIT;if (void 0 === b || b) d |= A.DEPTH_BUFFER_BIT;if (void 0 === c || c) d |= A.STENCIL_BUFFER_BIT;A.clear(d);
    };this.clearColor = function () {
      this.clear(!0, !1, !1);
    };this.clearDepth = function () {
      this.clear(!1, !0, !1);
    };this.clearStencil = function () {
      this.clear(!1, !1, !0);
    };this.clearTarget = function (a, b, c, d) {
      this.setRenderTarget(a);this.clear(b, c, d);
    };this.resetGLState = d;this.dispose = function () {
      z = [];Ka = -1;B = [];C = -1;v.removeEventListener("webglcontextlost", e, !1);
    };this.renderBufferImmediate = function (a, b, c) {
      Y.initAttributes();var d = ea.get(a);a.hasPositions && !d.position && (d.position = A.createBuffer());a.hasNormals && !d.normal && (d.normal = A.createBuffer());a.hasUvs && !d.uv && (d.uv = A.createBuffer());a.hasColors && !d.color && (d.color = A.createBuffer());b = b.getAttributes();a.hasPositions && (A.bindBuffer(A.ARRAY_BUFFER, d.position), A.bufferData(A.ARRAY_BUFFER, a.positionArray, A.DYNAMIC_DRAW), Y.enableAttribute(b.position), A.vertexAttribPointer(b.position, 3, A.FLOAT, !1, 0, 0));if (a.hasNormals) {
        A.bindBuffer(A.ARRAY_BUFFER, d.normal);if (!c.isMeshPhongMaterial && !c.isMeshStandardMaterial && 1 === c.shading) for (var e = 0, f = 3 * a.count; e < f; e += 9) {
          var g = a.normalArray,
              h = (g[e + 0] + g[e + 3] + g[e + 6]) / 3,
              k = (g[e + 1] + g[e + 4] + g[e + 7]) / 3,
              m = (g[e + 2] + g[e + 5] + g[e + 8]) / 3;g[e + 0] = h;g[e + 1] = k;g[e + 2] = m;g[e + 3] = h;g[e + 4] = k;g[e + 5] = m;g[e + 6] = h;g[e + 7] = k;g[e + 8] = m;
        }A.bufferData(A.ARRAY_BUFFER, a.normalArray, A.DYNAMIC_DRAW);Y.enableAttribute(b.normal);A.vertexAttribPointer(b.normal, 3, A.FLOAT, !1, 0, 0);
      }a.hasUvs && c.map && (A.bindBuffer(A.ARRAY_BUFFER, d.uv), A.bufferData(A.ARRAY_BUFFER, a.uvArray, A.DYNAMIC_DRAW), Y.enableAttribute(b.uv), A.vertexAttribPointer(b.uv, 2, A.FLOAT, !1, 0, 0));a.hasColors && 0 !== c.vertexColors && (A.bindBuffer(A.ARRAY_BUFFER, d.color), A.bufferData(A.ARRAY_BUFFER, a.colorArray, A.DYNAMIC_DRAW), Y.enableAttribute(b.color), A.vertexAttribPointer(b.color, 3, A.FLOAT, !1, 0, 0));Y.disableUnusedAttributes();
      A.drawArrays(A.TRIANGLES, 0, a.count);a.count = 0;
    };this.renderBufferDirect = function (a, b, c, d, e, f) {
      l(d);var g = t(a, b, d, e),
          k = !1;a = c.id + "_" + g.id + "_" + d.wireframe;a !== U && (U = a, k = !0);b = e.morphTargetInfluences;if (void 0 !== b) {
        var m = [];a = 0;for (var p = b.length; a < p; a++) {
          k = b[a], m.push([k, a]);
        }m.sort(h);8 < m.length && (m.length = 8);var n = c.morphAttributes;a = 0;for (p = m.length; a < p; a++) {
          k = m[a], N[a] = k[0], 0 !== k[0] ? (b = k[1], !0 === d.morphTargets && n.position && c.addAttribute("morphTarget" + a, n.position[b]), !0 === d.morphNormals && n.normal && c.addAttribute("morphNormal" + a, n.normal[b])) : (!0 === d.morphTargets && c.removeAttribute("morphTarget" + a), !0 === d.morphNormals && c.removeAttribute("morphNormal" + a));
        }a = m.length;for (b = N.length; a < b; a++) {
          N[a] = 0;
        }g.getUniforms().setValue(A, "morphTargetInfluences", N);k = !0;
      }b = c.index;p = c.attributes.position;m = 1;!0 === d.wireframe && (b = qa.getWireframeAttribute(c), m = 2);null !== b ? (a = Ha, a.setIndex(b)) : a = Ga;if (k) {
        a: {
          var k = void 0,
              w;if (c && c.isInstancedBufferGeometry && (w = ka.get("ANGLE_instanced_arrays"), null === w)) {
            console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            break a;
          }void 0 === k && (k = 0);Y.initAttributes();var n = c.attributes,
              g = g.getAttributes(),
              r = d.defaultAttributeValues,
              v;for (v in g) {
            var q = g[v];if (0 <= q) {
              var u = n[v];if (void 0 !== u) {
                var y = A.FLOAT,
                    D = u.array,
                    H = u.normalized;D instanceof Float32Array ? y = A.FLOAT : D instanceof Float64Array ? console.warn("Unsupported data buffer format: Float64Array") : D instanceof Uint16Array ? y = A.UNSIGNED_SHORT : D instanceof Int16Array ? y = A.SHORT : D instanceof Uint32Array ? y = A.UNSIGNED_INT : D instanceof Int32Array ? y = A.INT : D instanceof Int8Array ? y = A.BYTE : D instanceof Uint8Array && (y = A.UNSIGNED_BYTE);var D = u.itemSize,
                    F = qa.getAttributeBuffer(u);if (u.isInterleavedBufferAttribute) {
                  var I = u.data,
                      E = I.stride,
                      u = u.offset;I && I.isInstancedInterleavedBuffer ? (Y.enableAttributeAndDivisor(q, I.meshPerAttribute, w), void 0 === c.maxInstancedCount && (c.maxInstancedCount = I.meshPerAttribute * I.count)) : Y.enableAttribute(q);A.bindBuffer(A.ARRAY_BUFFER, F);A.vertexAttribPointer(q, D, y, H, E * I.array.BYTES_PER_ELEMENT, (k * E + u) * I.array.BYTES_PER_ELEMENT);
                } else u.isInstancedBufferAttribute ? (Y.enableAttributeAndDivisor(q, u.meshPerAttribute, w), void 0 === c.maxInstancedCount && (c.maxInstancedCount = u.meshPerAttribute * u.count)) : Y.enableAttribute(q), A.bindBuffer(A.ARRAY_BUFFER, F), A.vertexAttribPointer(q, D, y, H, 0, k * D * u.array.BYTES_PER_ELEMENT);
              } else if (void 0 !== r && (y = r[v], void 0 !== y)) switch (y.length) {case 2:
                  A.vertexAttrib2fv(q, y);break;case 3:
                  A.vertexAttrib3fv(q, y);break;case 4:
                  A.vertexAttrib4fv(q, y);break;default:
                  A.vertexAttrib1fv(q, y);}
            }
          }Y.disableUnusedAttributes();
        }null !== b && A.bindBuffer(A.ELEMENT_ARRAY_BUFFER, qa.getAttributeBuffer(b));
      }w = 0;null !== b ? w = b.count : void 0 !== p && (w = p.count);b = c.drawRange.start * m;p = null !== f ? f.start * m : 0;v = Math.max(b, p);f = Math.max(0, Math.min(w, b + c.drawRange.count * m, p + (null !== f ? f.count * m : Infinity)) - 1 - v + 1);if (0 !== f) {
        if (e.isMesh) {
          if (!0 === d.wireframe) Y.setLineWidth(d.wireframeLinewidth * (null === V ? Qa : 1)), a.setMode(A.LINES);else switch (e.drawMode) {case 0:
              a.setMode(A.TRIANGLES);break;case 1:
              a.setMode(A.TRIANGLE_STRIP);break;case 2:
              a.setMode(A.TRIANGLE_FAN);}
        } else e.isLine ? (d = d.linewidth, void 0 === d && (d = 1), Y.setLineWidth(d * (null === V ? Qa : 1)), e.isLineSegments ? a.setMode(A.LINES) : a.setMode(A.LINE_STRIP)) : e.isPoints && a.setMode(A.POINTS);c && c.isInstancedBufferGeometry ? 0 < c.maxInstancedCount && a.renderInstances(c, v, f) : a.render(v, f);
      }
    };this.render = function (a, c, d, e) {
      if (void 0 !== c && !0 !== c.isCamera) console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else {
        U = "";L = -1;W = null;!0 === a.autoUpdate && a.updateMatrixWorld();null === c.parent && c.updateMatrixWorld();c.matrixWorldInverse.getInverse(c.matrixWorld);
        ra.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse);oa.setFromMatrix(ra);K.length = 0;Ka = C = -1;P.length = 0;R.length = 0;sa = this.localClippingEnabled;pa = ba.init(this.clippingPlanes, sa, c);p(a, c);B.length = C + 1;z.length = Ka + 1;!0 === S.sortObjects && (B.sort(k), z.sort(m));pa && ba.beginShadows();for (var f = K, g = 0, h = 0, n = f.length; h < n; h++) {
          var w = f[h];w.castShadow && (aa.shadows[g++] = w);
        }aa.shadows.length = g;Ja.render(a, c);for (var f = K, l = w = 0, x = 0, t, v, q, u, y = c.matrixWorldInverse, D = 0, H = 0, F = 0, I = 0, g = 0, h = f.length; g < h; g++) {
          if (n = f[g], t = n.color, v = n.intensity, q = n.distance, u = n.shadow && n.shadow.map ? n.shadow.map.texture : null, n.isAmbientLight) w += t.r * v, l += t.g * v, x += t.b * v;else if (n.isDirectionalLight) {
            var E = za.get(n);E.color.copy(n.color).multiplyScalar(n.intensity);E.direction.setFromMatrixPosition(n.matrixWorld);Z.setFromMatrixPosition(n.target.matrixWorld);E.direction.sub(Z);E.direction.transformDirection(y);if (E.shadow = n.castShadow) E.shadowBias = n.shadow.bias, E.shadowRadius = n.shadow.radius, E.shadowMapSize = n.shadow.mapSize;aa.directionalShadowMap[D] = u;aa.directionalShadowMatrix[D] = n.shadow.matrix;aa.directional[D++] = E;
          } else if (n.isSpotLight) {
            E = za.get(n);E.position.setFromMatrixPosition(n.matrixWorld);E.position.applyMatrix4(y);E.color.copy(t).multiplyScalar(v);E.distance = q;E.direction.setFromMatrixPosition(n.matrixWorld);Z.setFromMatrixPosition(n.target.matrixWorld);E.direction.sub(Z);E.direction.transformDirection(y);E.coneCos = Math.cos(n.angle);E.penumbraCos = Math.cos(n.angle * (1 - n.penumbra));E.decay = 0 === n.distance ? 0 : n.decay;if (E.shadow = n.castShadow) E.shadowBias = n.shadow.bias, E.shadowRadius = n.shadow.radius, E.shadowMapSize = n.shadow.mapSize;aa.spotShadowMap[F] = u;aa.spotShadowMatrix[F] = n.shadow.matrix;aa.spot[F++] = E;
          } else if (n.isPointLight) {
            E = za.get(n);E.position.setFromMatrixPosition(n.matrixWorld);E.position.applyMatrix4(y);E.color.copy(n.color).multiplyScalar(n.intensity);E.distance = n.distance;E.decay = 0 === n.distance ? 0 : n.decay;if (E.shadow = n.castShadow) E.shadowBias = n.shadow.bias, E.shadowRadius = n.shadow.radius, E.shadowMapSize = n.shadow.mapSize;aa.pointShadowMap[H] = u;void 0 === aa.pointShadowMatrix[H] && (aa.pointShadowMatrix[H] = new J());Z.setFromMatrixPosition(n.matrixWorld).negate();aa.pointShadowMatrix[H].identity().setPosition(Z);aa.point[H++] = E;
          } else n.isHemisphereLight && (E = za.get(n), E.direction.setFromMatrixPosition(n.matrixWorld), E.direction.transformDirection(y), E.direction.normalize(), E.skyColor.copy(n.color).multiplyScalar(v), E.groundColor.copy(n.groundColor).multiplyScalar(v), aa.hemi[I++] = E);
        }aa.ambient[0] = w;aa.ambient[1] = l;aa.ambient[2] = x;aa.directional.length = D;aa.spot.length = F;aa.point.length = H;aa.hemi.length = I;aa.hash = D + "," + H + "," + F + "," + I + "," + aa.shadows.length;pa && ba.endShadows();ma.calls = 0;ma.vertices = 0;ma.faces = 0;ma.points = 0;void 0 === d && (d = null);this.setRenderTarget(d);f = a.background;null === f ? b(Da.r, Da.g, Da.b, Ra) : f && f.isColor && (b(f.r, f.g, f.b, 1), e = !0);(this.autoClear || e) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);f && f.isCubeTexture ? (wa.projectionMatrix.copy(c.projectionMatrix), wa.matrixWorld.extractRotation(c.matrixWorld), wa.matrixWorldInverse.getInverse(wa.matrixWorld), xa.material.uniforms.tCube.value = f, xa.modelViewMatrix.multiplyMatrices(wa.matrixWorldInverse, xa.matrixWorld), qa.update(xa), S.renderBufferDirect(wa, null, xa.geometry, xa.material, xa, null)) : f && f.isTexture && (Ba.material.map = f, qa.update(Ba), S.renderBufferDirect(Ia, null, Ba.geometry, Ba.material, Ba, null));a.overrideMaterial ? (e = a.overrideMaterial, r(B, a, c, e), r(z, a, c, e)) : (Y.setBlending(0), r(B, a, c), r(z, a, c));Na.render(a, c);Oa.render(a, c, $a);d && ua.updateRenderTargetMipmap(d);
        Y.setDepthTest(!0);Y.setDepthWrite(!0);Y.setColorWrite(!0);
      }
    };this.setFaceCulling = function (a, b) {
      Y.setCullFace(a);Y.setFlipSided(0 === b);
    };this.allocTextureUnit = function () {
      var a = da;a >= ia.maxTextures && console.warn("WebGLRenderer: trying to use " + a + " texture units while this GPU supports only " + ia.maxTextures);da += 1;return a;
    };this.setTexture2D = function () {
      var a = !1;return function (b, c) {
        b && b.isWebGLRenderTarget && (a || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);ua.setTexture2D(b, c);
      };
    }();this.setTexture = function () {
      var a = !1;return function (b, c) {
        a || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), a = !0);ua.setTexture2D(b, c);
      };
    }();this.setTextureCube = function () {
      var a = !1;return function (b, c) {
        b && b.isWebGLRenderTargetCube && (a || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);b && b.isCubeTexture || Array.isArray(b.image) && 6 === b.image.length ? ua.setTextureCube(b, c) : ua.setTextureCubeDynamic(b, c);
      };
    }();this.getCurrentRenderTarget = function () {
      return V;
    };this.setRenderTarget = function (a) {
      (V = a) && void 0 === ea.get(a).__webglFramebuffer && ua.setupRenderTarget(a);var b = a && a.isWebGLRenderTargetCube,
          c;a ? (c = ea.get(a), c = b ? c.__webglFramebuffer[a.activeCubeFace] : c.__webglFramebuffer, X.copy(a.scissor), fb = a.scissorTest, $a.copy(a.viewport)) : (c = null, X.copy(ha).multiplyScalar(Qa), fb = la, $a.copy(fa).multiplyScalar(Qa));T !== c && (A.bindFramebuffer(A.FRAMEBUFFER, c), T = c);Y.scissor(X);Y.setScissorTest(fb);Y.viewport($a);b && (b = ea.get(a.texture), A.framebufferTexture2D(A.FRAMEBUFFER, A.COLOR_ATTACHMENT0, A.TEXTURE_CUBE_MAP_POSITIVE_X + a.activeCubeFace, b.__webglTexture, a.activeMipMapLevel));
    };this.readRenderTargetPixels = function (a, b, c, d, e, f) {
      if (!1 === (a && a.isWebGLRenderTarget)) console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");else {
        var g = ea.get(a).__webglFramebuffer;if (g) {
          var h = !1;g !== T && (A.bindFramebuffer(A.FRAMEBUFFER, g), h = !0);try {
            var k = a.texture,
                m = k.format,
                n = k.type;1023 !== m && u(m) !== A.getParameter(A.IMPLEMENTATION_COLOR_READ_FORMAT) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === n || u(n) === A.getParameter(A.IMPLEMENTATION_COLOR_READ_TYPE) || 1015 === n && (ka.get("OES_texture_float") || ka.get("WEBGL_color_buffer_float")) || 1016 === n && ka.get("EXT_color_buffer_half_float") ? A.checkFramebufferStatus(A.FRAMEBUFFER) === A.FRAMEBUFFER_COMPLETE ? 0 <= b && b <= a.width - d && 0 <= c && c <= a.height - e && A.readPixels(b, c, d, e, u(m), u(n), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            h && A.bindFramebuffer(A.FRAMEBUFFER, T);
          }
        }
      }
    };
  }function Ib(a, b) {
    this.name = "";this.color = new O(a);this.density = void 0 !== b ? b : 2.5E-4;
  }function Jb(a, b, c) {
    this.name = "";this.color = new O(a);this.near = void 0 !== b ? b : 1;this.far = void 0 !== c ? c : 1E3;
  }function jb() {
    z.call(this);this.type = "Scene";this.overrideMaterial = this.fog = this.background = null;this.autoUpdate = !0;
  }function Ed(a, b, c, d, e) {
    z.call(this);this.lensFlares = [];this.positionScreen = new q();this.customUpdateCallback = void 0;void 0 !== a && this.add(a, b, c, d, e);
  }function kb(a) {
    U.call(this);this.type = "SpriteMaterial";this.color = new O(16777215);this.map = null;this.rotation = 0;this.lights = this.fog = !1;this.setValues(a);
  }function mc(a) {
    z.call(this);
    this.type = "Sprite";this.material = void 0 !== a ? a : new kb();
  }function nc() {
    z.call(this);this.type = "LOD";Object.defineProperties(this, { levels: { enumerable: !0, value: [] } });
  }function lb(a, b, c, d, e, f, g, h, k, m, w, n) {
    da.call(this, null, f, g, h, k, m, d, e, w, n);this.image = { data: a, width: b, height: c };this.magFilter = void 0 !== k ? k : 1003;this.minFilter = void 0 !== m ? m : 1003;this.flipY = this.generateMipmaps = !1;this.unpackAlignment = 1;
  }function bd(a, b, c) {
    this.useVertexTexture = void 0 !== c ? c : !0;this.identityMatrix = new J();a = a || [];this.bones = a.slice(0);
    this.useVertexTexture ? (a = Math.sqrt(4 * this.bones.length), a = T.nextPowerOfTwo(Math.ceil(a)), this.boneTextureHeight = this.boneTextureWidth = a = Math.max(a, 4), this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4), this.boneTexture = new lb(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, 1023, 1015)) : this.boneMatrices = new Float32Array(16 * this.bones.length);if (void 0 === b) this.calculateInverses();else if (this.bones.length === b.length) this.boneInverses = b.slice(0);else for (console.warn("THREE.Skeleton bonInverses is the wrong length."), this.boneInverses = [], b = 0, a = this.bones.length; b < a; b++) {
      this.boneInverses.push(new J());
    }
  }function cd(a) {
    z.call(this);this.type = "Bone";this.skin = a;
  }function dd(a, b, c) {
    ya.call(this, a, b);this.type = "SkinnedMesh";this.bindMode = "attached";this.bindMatrix = new J();this.bindMatrixInverse = new J();a = [];if (this.geometry && void 0 !== this.geometry.bones) {
      for (var d, e = 0, f = this.geometry.bones.length; e < f; ++e) {
        d = this.geometry.bones[e], b = new cd(this), a.push(b), b.name = d.name, b.position.fromArray(d.pos), b.quaternion.fromArray(d.rotq), void 0 !== d.scl && b.scale.fromArray(d.scl);
      }e = 0;for (f = this.geometry.bones.length; e < f; ++e) {
        d = this.geometry.bones[e], -1 !== d.parent && null !== d.parent && void 0 !== a[d.parent] ? a[d.parent].add(a[e]) : this.add(a[e]);
      }
    }this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new bd(a, void 0, c), this.matrixWorld);
  }function oa(a) {
    U.call(this);this.type = "LineBasicMaterial";this.color = new O(16777215);this.linewidth = 1;this.linejoin = this.linecap = "round";this.lights = !1;this.setValues(a);
  }function Ta(a, b, c) {
    if (1 === c) return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."), new la(a, b);z.call(this);this.type = "Line";this.geometry = void 0 !== a ? a : new G();this.material = void 0 !== b ? b : new oa({ color: 16777215 * Math.random() });
  }function la(a, b) {
    Ta.call(this, a, b);this.type = "LineSegments";
  }function xa(a) {
    U.call(this);this.type = "PointsMaterial";this.color = new O(16777215);this.map = null;this.size = 1;this.sizeAttenuation = !0;this.lights = !1;this.setValues(a);
  }function Kb(a, b) {
    z.call(this);this.type = "Points";this.geometry = void 0 !== a ? a : new G();this.material = void 0 !== b ? b : new xa({ color: 16777215 * Math.random() });
  }
  function oc() {
    z.call(this);this.type = "Group";
  }function ed(a, b, c, d, e, f, g, h, k) {
    function m() {
      requestAnimationFrame(m);a.readyState >= a.HAVE_CURRENT_DATA && (w.needsUpdate = !0);
    }da.call(this, a, b, c, d, e, f, g, h, k);this.generateMipmaps = !1;var w = this;m();
  }function Lb(a, b, c, d, e, f, g, h, k, m, w, n) {
    da.call(this, null, f, g, h, k, m, d, e, w, n);this.image = { width: b, height: c };this.mipmaps = a;this.generateMipmaps = this.flipY = !1;
  }function fd(a, b, c, d, e, f, g, h, k) {
    da.call(this, a, b, c, d, e, f, g, h, k);this.needsUpdate = !0;
  }function pc(a, b, c, d, e, f, g, h, k, m) {
    m = void 0 !== m ? m : 1026;if (1026 !== m && 1027 !== m) throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");da.call(this, null, d, e, f, g, h, m, c, k);this.image = { width: a, height: b };this.type = void 0 !== c ? c : 1012;this.magFilter = void 0 !== g ? g : 1003;this.minFilter = void 0 !== h ? h : 1003;this.generateMipmaps = this.flipY = !1;
  }function Mb(a) {
    function b(a, b) {
      return a - b;
    }G.call(this);var c = [0, 0],
        d = {},
        e = ["a", "b", "c"];if (a && a.isGeometry) {
      var f = a.vertices,
          g = a.faces,
          h = 0,
          k = new Uint32Array(6 * g.length);
      a = 0;for (var m = g.length; a < m; a++) {
        for (var w = g[a], n = 0; 3 > n; n++) {
          c[0] = w[e[n]];c[1] = w[e[(n + 1) % 3]];c.sort(b);var p = c.toString();void 0 === d[p] && (k[2 * h] = c[0], k[2 * h + 1] = c[1], d[p] = !0, h++);
        }
      }c = new Float32Array(6 * h);a = 0;for (m = h; a < m; a++) {
        for (n = 0; 2 > n; n++) {
          d = f[k[2 * a + n]], h = 6 * a + 3 * n, c[h + 0] = d.x, c[h + 1] = d.y, c[h + 2] = d.z;
        }
      }this.addAttribute("position", new C(c, 3));
    } else if (a && a.isBufferGeometry) {
      if (null !== a.index) {
        m = a.index.array;f = a.attributes.position;e = a.groups;h = 0;0 === e.length && a.addGroup(0, m.length);k = new Uint32Array(2 * m.length);
        g = 0;for (w = e.length; g < w; ++g) {
          a = e[g];n = a.start;p = a.count;a = n;for (var r = n + p; a < r; a += 3) {
            for (n = 0; 3 > n; n++) {
              c[0] = m[a + n], c[1] = m[a + (n + 1) % 3], c.sort(b), p = c.toString(), void 0 === d[p] && (k[2 * h] = c[0], k[2 * h + 1] = c[1], d[p] = !0, h++);
            }
          }
        }c = new Float32Array(6 * h);a = 0;for (m = h; a < m; a++) {
          for (n = 0; 2 > n; n++) {
            h = 6 * a + 3 * n, d = k[2 * a + n], c[h + 0] = f.getX(d), c[h + 1] = f.getY(d), c[h + 2] = f.getZ(d);
          }
        }
      } else for (f = a.attributes.position.array, h = f.length / 3, k = h / 3, c = new Float32Array(6 * h), a = 0, m = k; a < m; a++) {
        for (n = 0; 3 > n; n++) {
          h = 18 * a + 6 * n, k = 9 * a + 3 * n, c[h + 0] = f[k], c[h + 1] = f[k + 1], c[h + 2] = f[k + 2], d = 9 * a + (n + 1) % 3 * 3, c[h + 3] = f[d], c[h + 4] = f[d + 1], c[h + 5] = f[d + 2];
        }
      }this.addAttribute("position", new C(c, 3));
    }
  }function Nb(a, b, c) {
    G.call(this);this.type = "ParametricBufferGeometry";this.parameters = { func: a, slices: b, stacks: c };var d = [],
        e = [],
        f,
        g,
        h,
        k,
        m,
        w = b + 1;for (f = 0; f <= c; f++) {
      for (m = f / c, g = 0; g <= b; g++) {
        k = g / b, h = a(k, m), d.push(h.x, h.y, h.z), e.push(k, m);
      }
    }a = [];var n;for (f = 0; f < c; f++) {
      for (g = 0; g < b; g++) {
        h = f * w + g, k = f * w + g + 1, m = (f + 1) * w + g + 1, n = (f + 1) * w + g, a.push(h, k, n), a.push(k, m, n);
      }
    }this.setIndex((65535 < a.length ? $c : Zc)(a, 1));this.addAttribute("position", ha(d, 3));this.addAttribute("uv", ha(e, 2));this.computeVertexNormals();
  }function qc(a, b, c) {
    Q.call(this);this.type = "ParametricGeometry";this.parameters = { func: a, slices: b, stacks: c };this.fromBufferGeometry(new Nb(a, b, c));this.mergeVertices();
  }function ua(a, b, c, d) {
    function e(a) {
      h.push(a.x, a.y, a.z);
    }function f(b, c) {
      var d = 3 * b;c.x = a[d + 0];c.y = a[d + 1];c.z = a[d + 2];
    }function g(a, b, c, d) {
      0 > d && 1 === a.x && (k[b] = a.x - 1);0 === c.x && 0 === c.z && (k[b] = d / 2 / Math.PI + .5);
    }G.call(this);this.type = "PolyhedronBufferGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };c = c || 1;var h = [],
        k = [];(function (a) {
      for (var c = new q(), d = new q(), g = new q(), h = 0; h < b.length; h += 3) {
        f(b[h + 0], c);f(b[h + 1], d);f(b[h + 2], g);var k = c,
            l = d,
            D = g,
            u = Math.pow(2, a),
            v = [],
            I,
            y;for (I = 0; I <= u; I++) {
          v[I] = [];var E = k.clone().lerp(D, I / u),
              H = l.clone().lerp(D, I / u),
              F = u - I;for (y = 0; y <= F; y++) {
            v[I][y] = 0 === y && I === u ? E : E.clone().lerp(H, y / F);
          }
        }for (I = 0; I < u; I++) {
          for (y = 0; y < 2 * (u - I) - 1; y++) {
            k = Math.floor(y / 2), 0 === y % 2 ? (e(v[I][k + 1]), e(v[I + 1][k]), e(v[I][k])) : (e(v[I][k + 1]), e(v[I + 1][k + 1]), e(v[I + 1][k]));
          }
        }
      }
    })(d || 0);(function (a) {
      for (var b = new q(), c = 0; c < h.length; c += 3) {
        b.x = h[c + 0], b.y = h[c + 1], b.z = h[c + 2], b.normalize().multiplyScalar(a), h[c + 0] = b.x, h[c + 1] = b.y, h[c + 2] = b.z;
      }
    })(c);(function () {
      for (var a = new q(), b = 0; b < h.length; b += 3) {
        a.x = h[b + 0], a.y = h[b + 1], a.z = h[b + 2], k.push(Math.atan2(a.z, -a.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5));
      }for (var a = new q(), b = new q(), c = new q(), d = new q(), e = new B(), f = new B(), l = new B(), D = 0, u = 0; D < h.length; D += 9, u += 6) {
        a.set(h[D + 0], h[D + 1], h[D + 2]);b.set(h[D + 3], h[D + 4], h[D + 5]);c.set(h[D + 6], h[D + 7], h[D + 8]);e.set(k[u + 0], k[u + 1]);f.set(k[u + 2], k[u + 3]);l.set(k[u + 4], k[u + 5]);d.copy(a).add(b).add(c).divideScalar(3);var v = Math.atan2(d.z, -d.x);g(e, u + 0, a, v);g(f, u + 2, b, v);g(l, u + 4, c, v);
      }for (a = 0; a < k.length; a += 6) {
        b = k[a + 0], c = k[a + 2], d = k[a + 4], e = Math.min(b, c, d), .9 < Math.max(b, c, d) && .1 > e && (.2 > b && (k[a + 0] += 1), .2 > c && (k[a + 2] += 1), .2 > d && (k[a + 4] += 1));
      }
    })();this.addAttribute("position", ha(h, 3));this.addAttribute("normal", ha(h.slice(), 3));this.addAttribute("uv", ha(k, 2));this.normalizeNormals();this.boundingSphere = new Ca(new q(), c);
  }function rc(a, b) {
    ua.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);this.type = "TetrahedronBufferGeometry";this.parameters = { radius: a, detail: b };
  }function sc(a, b) {
    Q.call(this);this.type = "TetrahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new THREE.TetrahedronBufferGeometry(a, b));this.mergeVertices();
  }function tc(a, b) {
    ua.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);this.type = "OctahedronBufferGeometry";
    this.parameters = { radius: a, detail: b };
  }function uc(a, b) {
    Q.call(this);this.type = "OctahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new THREE.OctahedronBufferGeometry(a, b));this.mergeVertices();
  }function vc(a, b) {
    var c = (1 + Math.sqrt(5)) / 2;ua.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);this.type = "IcosahedronBufferGeometry";this.parameters = { radius: a, detail: b };
  }function wc(a, b) {
    Q.call(this);this.type = "IcosahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new THREE.IcosahedronBufferGeometry(a, b));this.mergeVertices();
  }function xc(a, b) {
    var c = (1 + Math.sqrt(5)) / 2,
        d = 1 / c;ua.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);this.type = "DodecahedronBufferGeometry";this.parameters = { radius: a, detail: b };
  }function yc(a, b) {
    Q.call(this);this.type = "DodecahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new THREE.DodecahedronBufferGeometry(a, b));this.mergeVertices();
  }function zc(a, b, c, d) {
    Q.call(this);this.type = "PolyhedronGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };this.fromBufferGeometry(new ua(a, b, c, d));this.mergeVertices();
  }function Ob(a, b, c, d, e) {
    function f(e) {
      var f = a.getPointAt(e / b),
          m = g.normals[e];e = g.binormals[e];for (n = 0; n <= d; n++) {
        var w = n / d * Math.PI * 2,
            l = Math.sin(w),
            w = -Math.cos(w);k.x = w * m.x + l * e.x;k.y = w * m.y + l * e.y;k.z = w * m.z + l * e.z;k.normalize();r.push(k.x, k.y, k.z);h.x = f.x + c * k.x;h.y = f.y + c * k.y;h.z = f.z + c * k.z;p.push(h.x, h.y, h.z);
      }
    }G.call(this);this.type = "TubeBufferGeometry";
    this.parameters = { path: a, tubularSegments: b, radius: c, radialSegments: d, closed: e };b = b || 64;c = c || 1;d = d || 8;e = e || !1;var g = a.computeFrenetFrames(b, e);this.tangents = g.tangents;this.normals = g.normals;this.binormals = g.binormals;var h = new q(),
        k = new q(),
        m = new B(),
        w,
        n,
        p = [],
        r = [],
        l = [],
        t = [];for (w = 0; w < b; w++) {
      f(w);
    }f(!1 === e ? b : 0);for (w = 0; w <= b; w++) {
      for (n = 0; n <= d; n++) {
        m.x = w / b, m.y = n / d, l.push(m.x, m.y);
      }
    }(function () {
      for (n = 1; n <= b; n++) {
        for (w = 1; w <= d; w++) {
          var a = (d + 1) * n + (w - 1),
              c = (d + 1) * n + w,
              e = (d + 1) * (n - 1) + w;t.push((d + 1) * (n - 1) + (w - 1), a, e);t.push(a, c, e);
        }
      }
    })();this.setIndex((65535 < t.length ? $c : Zc)(t, 1));this.addAttribute("position", ha(p, 3));this.addAttribute("normal", ha(r, 3));this.addAttribute("uv", ha(l, 2));
  }function Ac(a, b, c, d, e, f) {
    Q.call(this);this.type = "TubeGeometry";this.parameters = { path: a, tubularSegments: b, radius: c, radialSegments: d, closed: e };void 0 !== f && console.warn("THREE.TubeGeometry: taper has been removed.");a = new Ob(a, b, c, d, e);this.tangents = a.tangents;this.normals = a.normals;this.binormals = a.binormals;this.fromBufferGeometry(a);this.mergeVertices();
  }
  function Pb(a, b, c, d, e, f) {
    function g(a, b, c, d, e) {
      var f = Math.sin(a);b = c / b * a;c = Math.cos(b);e.x = d * (2 + c) * .5 * Math.cos(a);e.y = d * (2 + c) * f * .5;e.z = d * Math.sin(b) * .5;
    }G.call(this);this.type = "TorusKnotBufferGeometry";this.parameters = { radius: a, tube: b, tubularSegments: c, radialSegments: d, p: e, q: f };a = a || 100;b = b || 40;c = Math.floor(c) || 64;d = Math.floor(d) || 8;e = e || 2;f = f || 3;var h = (d + 1) * (c + 1),
        k = d * c * 6,
        k = new C(new (65535 < k ? Uint32Array : Uint16Array)(k), 1),
        m = new C(new Float32Array(3 * h), 3),
        w = new C(new Float32Array(3 * h), 3),
        h = new C(new Float32Array(2 * h), 2),
        n,
        p,
        r = 0,
        l = 0,
        t = new q(),
        D = new q(),
        u = new B(),
        v = new q(),
        I = new q(),
        y = new q(),
        E = new q(),
        H = new q();for (n = 0; n <= c; ++n) {
      for (p = n / c * e * Math.PI * 2, g(p, e, f, a, v), g(p + .01, e, f, a, I), E.subVectors(I, v), H.addVectors(I, v), y.crossVectors(E, H), H.crossVectors(y, E), y.normalize(), H.normalize(), p = 0; p <= d; ++p) {
        var F = p / d * Math.PI * 2,
            M = -b * Math.cos(F),
            F = b * Math.sin(F);t.x = v.x + (M * H.x + F * y.x);t.y = v.y + (M * H.y + F * y.y);t.z = v.z + (M * H.z + F * y.z);m.setXYZ(r, t.x, t.y, t.z);D.subVectors(t, v).normalize();w.setXYZ(r, D.x, D.y, D.z);u.x = n / c;u.y = p / d;h.setXY(r, u.x, u.y);
        r++;
      }
    }for (p = 1; p <= c; p++) {
      for (n = 1; n <= d; n++) {
        a = (d + 1) * p + (n - 1), b = (d + 1) * p + n, e = (d + 1) * (p - 1) + n, k.setX(l, (d + 1) * (p - 1) + (n - 1)), l++, k.setX(l, a), l++, k.setX(l, e), l++, k.setX(l, a), l++, k.setX(l, b), l++, k.setX(l, e), l++;
      }
    }this.setIndex(k);this.addAttribute("position", m);this.addAttribute("normal", w);this.addAttribute("uv", h);
  }function Bc(a, b, c, d, e, f, g) {
    Q.call(this);this.type = "TorusKnotGeometry";this.parameters = { radius: a, tube: b, tubularSegments: c, radialSegments: d, p: e, q: f };void 0 !== g && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new Pb(a, b, c, d, e, f));this.mergeVertices();
  }function Qb(a, b, c, d, e) {
    G.call(this);this.type = "TorusBufferGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };a = a || 100;b = b || 40;c = Math.floor(c) || 8;d = Math.floor(d) || 6;e = e || 2 * Math.PI;var f = (c + 1) * (d + 1),
        g = c * d * 6,
        g = new (65535 < g ? Uint32Array : Uint16Array)(g),
        h = new Float32Array(3 * f),
        k = new Float32Array(3 * f),
        f = new Float32Array(2 * f),
        m = 0,
        w = 0,
        n = 0,
        p = new q(),
        r = new q(),
        l = new q(),
        t,
        D;for (t = 0; t <= c; t++) {
      for (D = 0; D <= d; D++) {
        var u = D / d * e,
            v = t / c * Math.PI * 2;r.x = (a + b * Math.cos(v)) * Math.cos(u);r.y = (a + b * Math.cos(v)) * Math.sin(u);r.z = b * Math.sin(v);h[m] = r.x;h[m + 1] = r.y;h[m + 2] = r.z;p.x = a * Math.cos(u);p.y = a * Math.sin(u);l.subVectors(r, p).normalize();k[m] = l.x;k[m + 1] = l.y;k[m + 2] = l.z;f[w] = D / d;f[w + 1] = t / c;m += 3;w += 2;
      }
    }for (t = 1; t <= c; t++) {
      for (D = 1; D <= d; D++) {
        a = (d + 1) * (t - 1) + D - 1, b = (d + 1) * (t - 1) + D, e = (d + 1) * t + D, g[n] = (d + 1) * t + D - 1, g[n + 1] = a, g[n + 2] = e, g[n + 3] = a, g[n + 4] = b, g[n + 5] = e, n += 6;
      }
    }this.setIndex(new C(g, 1));this.addAttribute("position", new C(h, 3));this.addAttribute("normal", new C(k, 3));this.addAttribute("uv", new C(f, 2));
  }function Cc(a, b, c, d, e) {
    Q.call(this);this.type = "TorusGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };this.fromBufferGeometry(new Qb(a, b, c, d, e));
  }function za(a, b) {
    "undefined" !== typeof a && (Q.call(this), this.type = "ExtrudeGeometry", a = Array.isArray(a) ? a : [a], this.addShapeList(a, b), this.computeFaceNormals());
  }function Dc(a, b) {
    b = b || {};var c = b.font;if (!1 === (c && c.isFont)) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new Q();c = c.generateShapes(a, b.size, b.curveSegments);b.amount = void 0 !== b.height ? b.height : 50;void 0 === b.bevelThickness && (b.bevelThickness = 10);void 0 === b.bevelSize && (b.bevelSize = 8);void 0 === b.bevelEnabled && (b.bevelEnabled = !1);za.call(this, c, b);this.type = "TextGeometry";
  }function mb(a, b, c, d, e, f, g) {
    G.call(this);this.type = "SphereBufferGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: f, thetaLength: g };a = a || 50;b = Math.max(3, Math.floor(b) || 8);c = Math.max(2, Math.floor(c) || 6);d = void 0 !== d ? d : 0;e = void 0 !== e ? e : 2 * Math.PI;f = void 0 !== f ? f : 0;g = void 0 !== g ? g : Math.PI;for (var h = f + g, k = (b + 1) * (c + 1), m = new C(new Float32Array(3 * k), 3), w = new C(new Float32Array(3 * k), 3), k = new C(new Float32Array(2 * k), 2), n = 0, p = [], l = new q(), x = 0; x <= c; x++) {
      for (var t = [], D = x / c, u = 0; u <= b; u++) {
        var v = u / b,
            I = -a * Math.cos(d + v * e) * Math.sin(f + D * g),
            y = a * Math.cos(f + D * g),
            E = a * Math.sin(d + v * e) * Math.sin(f + D * g);l.set(I, y, E).normalize();m.setXYZ(n, I, y, E);w.setXYZ(n, l.x, l.y, l.z);k.setXY(n, v, 1 - D);t.push(n);n++;
      }p.push(t);
    }d = [];for (x = 0; x < c; x++) {
      for (u = 0; u < b; u++) {
        e = p[x][u + 1], g = p[x][u], n = p[x + 1][u], l = p[x + 1][u + 1], (0 !== x || 0 < f) && d.push(e, g, l), (x !== c - 1 || h < Math.PI) && d.push(g, n, l);
      }
    }this.setIndex(new (65535 < m.count ? $c : Zc)(d, 1));this.addAttribute("position", m);this.addAttribute("normal", w);this.addAttribute("uv", k);this.boundingSphere = new Ca(new q(), a);
  }function Rb(a, b, c, d, e, f, g) {
    Q.call(this);this.type = "SphereGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: f, thetaLength: g };this.fromBufferGeometry(new mb(a, b, c, d, e, f, g));
  }function Sb(a, b, c, d, e, f) {
    G.call(this);this.type = "RingBufferGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: f };a = a || 20;b = b || 50;e = void 0 !== e ? e : 0;f = void 0 !== f ? f : 2 * Math.PI;c = void 0 !== c ? Math.max(3, c) : 8;d = void 0 !== d ? Math.max(1, d) : 1;var g = (c + 1) * (d + 1),
        h = c * d * 6,
        h = new C(new (65535 < h ? Uint32Array : Uint16Array)(h), 1),
        k = new C(new Float32Array(3 * g), 3),
        m = new C(new Float32Array(3 * g), 3),
        g = new C(new Float32Array(2 * g), 2),
        w = 0,
        n = 0,
        p,
        l = a,
        x = (b - a) / d,
        t = new q(),
        D = new B(),
        u;for (a = 0; a <= d; a++) {
      for (u = 0; u <= c; u++) {
        p = e + u / c * f, t.x = l * Math.cos(p), t.y = l * Math.sin(p), k.setXYZ(w, t.x, t.y, t.z), m.setXYZ(w, 0, 0, 1), D.x = (t.x / b + 1) / 2, D.y = (t.y / b + 1) / 2, g.setXY(w, D.x, D.y), w++;
      }l += x;
    }for (a = 0; a < d; a++) {
      for (b = a * (c + 1), u = 0; u < c; u++) {
        e = p = u + b, f = p + c + 1, w = p + c + 2, p += 1, h.setX(n, e), n++, h.setX(n, f), n++, h.setX(n, w), n++, h.setX(n, e), n++, h.setX(n, w), n++, h.setX(n, p), n++;
      }
    }this.setIndex(h);this.addAttribute("position", k);this.addAttribute("normal", m);this.addAttribute("uv", g);
  }function Ec(a, b, c, d, e, f) {
    Q.call(this);
    this.type = "RingGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: f };this.fromBufferGeometry(new Sb(a, b, c, d, e, f));
  }function Fc(a, b, c, d) {
    Q.call(this);this.type = "PlaneGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };this.fromBufferGeometry(new ib(a, b, c, d));
  }function Tb(a, b, c, d) {
    G.call(this);this.type = "LatheBufferGeometry";this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };b = Math.floor(b) || 12;c = c || 0;d = d || 2 * Math.PI;d = T.clamp(d, 0, 2 * Math.PI);for (var e = (b + 1) * a.length, f = b * a.length * 6, g = new C(new (65535 < f ? Uint32Array : Uint16Array)(f), 1), h = new C(new Float32Array(3 * e), 3), k = new C(new Float32Array(2 * e), 2), m = 0, w = 0, n = 1 / b, p = new q(), l = new B(), e = 0; e <= b; e++) {
      for (var f = c + e * n * d, x = Math.sin(f), t = Math.cos(f), f = 0; f <= a.length - 1; f++) {
        p.x = a[f].x * x, p.y = a[f].y, p.z = a[f].x * t, h.setXYZ(m, p.x, p.y, p.z), l.x = e / b, l.y = f / (a.length - 1), k.setXY(m, l.x, l.y), m++;
      }
    }for (e = 0; e < b; e++) {
      for (f = 0; f < a.length - 1; f++) {
        c = f + e * a.length, m = c + a.length, n = c + a.length + 1, p = c + 1, g.setX(w, c), w++, g.setX(w, m), w++, g.setX(w, p), w++, g.setX(w, m), w++, g.setX(w, n), w++, g.setX(w, p), w++;
      }
    }this.setIndex(g);this.addAttribute("position", h);this.addAttribute("uv", k);this.computeVertexNormals();if (d === 2 * Math.PI) for (d = this.attributes.normal.array, g = new q(), h = new q(), k = new q(), c = b * a.length * 3, f = e = 0; e < a.length; e++, f += 3) {
      g.x = d[f + 0], g.y = d[f + 1], g.z = d[f + 2], h.x = d[c + f + 0], h.y = d[c + f + 1], h.z = d[c + f + 2], k.addVectors(g, h).normalize(), d[f + 0] = d[c + f + 0] = k.x, d[f + 1] = d[c + f + 1] = k.y, d[f + 2] = d[c + f + 2] = k.z;
    }
  }function Gc(a, b, c, d) {
    Q.call(this);
    this.type = "LatheGeometry";this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };this.fromBufferGeometry(new Tb(a, b, c, d));this.mergeVertices();
  }function cb(a, b) {
    Q.call(this);this.type = "ShapeGeometry";!1 === Array.isArray(a) && (a = [a]);this.addShapeList(a, b);this.computeFaceNormals();
  }function Ub(a, b) {
    function c(a, b) {
      return a - b;
    }G.call(this);var d = Math.cos(T.DEG2RAD * (void 0 !== b ? b : 1)),
        e = [0, 0],
        f = {},
        g = ["a", "b", "c"],
        h;a && a.isBufferGeometry ? (h = new Q(), h.fromBufferGeometry(a)) : h = a.clone();h.mergeVertices();
    h.computeFaceNormals();var k = h.vertices;h = h.faces;for (var m = 0, w = h.length; m < w; m++) {
      for (var n = h[m], p = 0; 3 > p; p++) {
        e[0] = n[g[p]];e[1] = n[g[(p + 1) % 3]];e.sort(c);var l = e.toString();void 0 === f[l] ? f[l] = { vert1: e[0], vert2: e[1], face1: m, face2: void 0 } : f[l].face2 = m;
      }
    }e = [];for (l in f) {
      if (g = f[l], void 0 === g.face2 || h[g.face1].normal.dot(h[g.face2].normal) <= d) m = k[g.vert1], e.push(m.x), e.push(m.y), e.push(m.z), m = k[g.vert2], e.push(m.x), e.push(m.y), e.push(m.z);
    }this.addAttribute("position", new C(new Float32Array(e), 3));
  }function Ua(a, b, c, d, e, f, g, h) {
    function k(c) {
      var e,
          f,
          k,
          n = new B(),
          p = new q(),
          l = 0,
          w = !0 === c ? a : b,
          I = !0 === c ? 1 : -1;f = u;for (e = 1; e <= d; e++) {
        x.setXYZ(u, 0, y * I, 0), t.setXYZ(u, 0, I, 0), n.x = .5, n.y = .5, D.setXY(u, n.x, n.y), u++;
      }k = u;for (e = 0; e <= d; e++) {
        var z = e / d * h + g,
            C = Math.cos(z),
            z = Math.sin(z);p.x = w * z;p.y = y * I;p.z = w * C;x.setXYZ(u, p.x, p.y, p.z);t.setXYZ(u, 0, I, 0);n.x = .5 * C + .5;n.y = .5 * z * I + .5;D.setXY(u, n.x, n.y);u++;
      }for (e = 0; e < d; e++) {
        n = f + e, p = k + e, !0 === c ? (r.setX(v, p), v++, r.setX(v, p + 1)) : (r.setX(v, p + 1), v++, r.setX(v, p)), v++, r.setX(v, n), v++, l += 3;
      }m.addGroup(E, l, !0 === c ? 1 : 2);E += l;
    }G.call(this);this.type = "CylinderBufferGeometry";this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: f, thetaStart: g, thetaLength: h };var m = this;a = void 0 !== a ? a : 20;b = void 0 !== b ? b : 20;c = void 0 !== c ? c : 100;d = Math.floor(d) || 8;e = Math.floor(e) || 1;f = void 0 !== f ? f : !1;g = void 0 !== g ? g : 0;h = void 0 !== h ? h : 2 * Math.PI;var l = 0;!1 === f && (0 < a && l++, 0 < b && l++);var n = function () {
      var a = (d + 1) * (e + 1);!1 === f && (a += (d + 1) * l + d * l);return a;
    }(),
        p = function () {
      var a = d * e * 6;!1 === f && (a += d * l * 3);
      return a;
    }(),
        r = new C(new (65535 < p ? Uint32Array : Uint16Array)(p), 1),
        x = new C(new Float32Array(3 * n), 3),
        t = new C(new Float32Array(3 * n), 3),
        D = new C(new Float32Array(2 * n), 2),
        u = 0,
        v = 0,
        I = [],
        y = c / 2,
        E = 0;(function () {
      var f,
          k,
          n = new q(),
          p = new q(),
          l = 0,
          w = (b - a) / c;for (k = 0; k <= e; k++) {
        var B = [],
            z = k / e,
            C = z * (b - a) + a;for (f = 0; f <= d; f++) {
          var N = f / d,
              P = N * h + g,
              R = Math.sin(P),
              P = Math.cos(P);p.x = C * R;p.y = -z * c + y;p.z = C * P;x.setXYZ(u, p.x, p.y, p.z);n.set(R, w, P).normalize();t.setXYZ(u, n.x, n.y, n.z);D.setXY(u, N, 1 - z);B.push(u);u++;
        }I.push(B);
      }for (f = 0; f < d; f++) {
        for (k = 0; k < e; k++) {
          n = I[k + 1][f], p = I[k + 1][f + 1], w = I[k][f + 1], r.setX(v, I[k][f]), v++, r.setX(v, n), v++, r.setX(v, w), v++, r.setX(v, n), v++, r.setX(v, p), v++, r.setX(v, w), v++, l += 6;
        }
      }m.addGroup(E, l, 0);E += l;
    })();!1 === f && (0 < a && k(!0), 0 < b && k(!1));this.setIndex(r);this.addAttribute("position", x);this.addAttribute("normal", t);this.addAttribute("uv", D);
  }function nb(a, b, c, d, e, f, g, h) {
    Q.call(this);this.type = "CylinderGeometry";this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: f, thetaStart: g,
      thetaLength: h };this.fromBufferGeometry(new Ua(a, b, c, d, e, f, g, h));this.mergeVertices();
  }function Hc(a, b, c, d, e, f, g) {
    nb.call(this, 0, a, b, c, d, e, f, g);this.type = "ConeGeometry";this.parameters = { radius: a, height: b, radialSegments: c, heightSegments: d, openEnded: e, thetaStart: f, thetaLength: g };
  }function Ic(a, b, c, d, e, f, g) {
    Ua.call(this, 0, a, b, c, d, e, f, g);this.type = "ConeBufferGeometry";this.parameters = { radius: a, height: b, radialSegments: c, heightSegments: d, openEnded: e, thetaStart: f, thetaLength: g };
  }function Vb(a, b, c, d) {
    G.call(this);
    this.type = "CircleBufferGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };a = a || 50;b = void 0 !== b ? Math.max(3, b) : 8;c = void 0 !== c ? c : 0;d = void 0 !== d ? d : 2 * Math.PI;var e = b + 2,
        f = new Float32Array(3 * e),
        g = new Float32Array(3 * e),
        e = new Float32Array(2 * e);g[2] = 1;e[0] = .5;e[1] = .5;for (var h = 0, k = 3, m = 2; h <= b; h++, k += 3, m += 2) {
      var l = c + h / b * d;f[k] = a * Math.cos(l);f[k + 1] = a * Math.sin(l);g[k + 2] = 1;e[m] = (f[k] / a + 1) / 2;e[m + 1] = (f[k + 1] / a + 1) / 2;
    }c = [];for (k = 1; k <= b; k++) {
      c.push(k, k + 1, 0);
    }this.setIndex(new C(new Uint16Array(c), 1));this.addAttribute("position", new C(f, 3));this.addAttribute("normal", new C(g, 3));this.addAttribute("uv", new C(e, 2));this.boundingSphere = new Ca(new q(), a);
  }function Jc(a, b, c, d) {
    Q.call(this);this.type = "CircleGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };this.fromBufferGeometry(new Vb(a, b, c, d));
  }function ob(a, b, c, d, e, f) {
    Q.call(this);this.type = "BoxGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: f };this.fromBufferGeometry(new hb(a, b, c, d, e, f));this.mergeVertices();
  }function Wb() {
    Fa.call(this, { uniforms: La.merge([W.lights, { opacity: { value: 1 } }]), vertexShader: X.shadow_vert, fragmentShader: X.shadow_frag });this.transparent = this.lights = !0;Object.defineProperties(this, { opacity: { enumerable: !0, get: function get() {
          return this.uniforms.opacity.value;
        }, set: function set(a) {
          this.uniforms.opacity.value = a;
        } } });
  }function Xb(a) {
    Fa.call(this, a);this.type = "RawShaderMaterial";
  }function Kc(a) {
    this.uuid = T.generateUUID();this.type = "MultiMaterial";this.materials = a instanceof Array ? a : [];this.visible = !0;
  }function Oa(a) {
    U.call(this);this.defines = { STANDARD: "" };this.type = "MeshStandardMaterial";this.color = new O(16777215);this.metalness = this.roughness = .5;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new O(0);this.emissiveIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;this.envMapIntensity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
  }function pb(a) {
    Oa.call(this);this.defines = { PHYSICAL: "" };this.type = "MeshPhysicalMaterial";this.reflectivity = .5;this.clearCoatRoughness = this.clearCoat = 0;this.setValues(a);
  }function db(a) {
    U.call(this);this.type = "MeshPhongMaterial";this.color = new O(16777215);this.specular = new O(1118481);this.shininess = 30;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new O(0);this.emissiveIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.specularMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;
    this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
  }function qb(a) {
    U.call(this, a);this.type = "MeshNormalMaterial";this.wireframe = !1;this.wireframeLinewidth = 1;this.morphTargets = this.lights = this.fog = !1;this.setValues(a);
  }function rb(a) {
    U.call(this);this.type = "MeshLambertMaterial";this.color = new O(16777215);this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new O(0);this.emissiveIntensity = 1;this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
  }function sb(a) {
    U.call(this);this.type = "LineDashedMaterial";this.color = new O(16777215);this.scale = this.linewidth = 1;this.dashSize = 3;this.gapSize = 1;this.lights = !1;this.setValues(a);
  }
  function Fd(a, b, c) {
    var d = this,
        e = !1,
        f = 0,
        g = 0;this.onStart = void 0;this.onLoad = a;this.onProgress = b;this.onError = c;this.itemStart = function (a) {
      g++;if (!1 === e && void 0 !== d.onStart) d.onStart(a, f, g);e = !0;
    };this.itemEnd = function (a) {
      f++;if (void 0 !== d.onProgress) d.onProgress(a, f, g);if (f === g && (e = !1, void 0 !== d.onLoad)) d.onLoad();
    };this.itemError = function (a) {
      if (void 0 !== d.onError) d.onError(a);
    };
  }function Ja(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function we(a) {
    this.manager = void 0 !== a ? a : Ga;this._parser = null;
  }function Gd(a) {
    this.manager = void 0 !== a ? a : Ga;this._parser = null;
  }function Lc(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function Hd(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function gd(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function pa(a, b) {
    z.call(this);this.type = "Light";this.color = new O(a);this.intensity = void 0 !== b ? b : 1;this.receiveShadow = void 0;
  }function hd(a, b, c) {
    pa.call(this, a, c);this.type = "HemisphereLight";this.castShadow = void 0;this.position.copy(z.DefaultUp);this.updateMatrix();this.groundColor = new O(b);
  }function tb(a) {
    this.camera = a;this.bias = 0;this.radius = 1;this.mapSize = new B(512, 512);this.map = null;this.matrix = new J();
  }function id() {
    tb.call(this, new Ea(50, 1, .5, 500));
  }function jd(a, b, c, d, e, f) {
    pa.call(this, a, b);this.type = "SpotLight";this.position.copy(z.DefaultUp);this.updateMatrix();this.target = new z();Object.defineProperty(this, "power", { get: function get() {
        return this.intensity * Math.PI;
      }, set: function set(a) {
        this.intensity = a / Math.PI;
      } });this.distance = void 0 !== c ? c : 0;this.angle = void 0 !== d ? d : Math.PI / 3;this.penumbra = void 0 !== e ? e : 0;this.decay = void 0 !== f ? f : 1;this.shadow = new id();
  }function kd(a, b, c, d) {
    pa.call(this, a, b);this.type = "PointLight";Object.defineProperty(this, "power", { get: function get() {
        return 4 * this.intensity * Math.PI;
      }, set: function set(a) {
        this.intensity = a / (4 * Math.PI);
      } });this.distance = void 0 !== c ? c : 0;this.decay = void 0 !== d ? d : 1;this.shadow = new tb(new Ea(90, 1, .5, 500));
  }function ld(a) {
    tb.call(this, new Hb(-5, 5, 5, -5, .5, 500));
  }function md(a, b) {
    pa.call(this, a, b);this.type = "DirectionalLight";this.position.copy(z.DefaultUp);this.updateMatrix();this.target = new z();this.shadow = new ld();
  }
  function nd(a, b) {
    pa.call(this, a, b);this.type = "AmbientLight";this.castShadow = void 0;
  }function qa(a, b, c, d) {
    this.parameterPositions = a;this._cachedIndex = 0;this.resultBuffer = void 0 !== d ? d : new b.constructor(c);this.sampleValues = b;this.valueSize = c;
  }function od(a, b, c, d) {
    qa.call(this, a, b, c, d);this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }function Mc(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }function pd(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }function ub(a, b, c, d) {
    if (void 0 === a) throw Error("track name is undefined");
    if (void 0 === b || 0 === b.length) throw Error("no keyframes in track named " + a);this.name = a;this.times = ma.convertArray(b, this.TimeBufferType);this.values = ma.convertArray(c, this.ValueBufferType);this.setInterpolation(d || this.DefaultInterpolation);this.validate();this.optimize();
  }function Yb(a, b, c, d) {
    ub.call(this, a, b, c, d);
  }function qd(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }function Nc(a, b, c, d) {
    ub.call(this, a, b, c, d);
  }function Zb(a, b, c, d) {
    ub.call(this, a, b, c, d);
  }function rd(a, b, c, d) {
    ub.call(this, a, b, c, d);
  }function sd(a, b, c) {
    ub.call(this, a, b, c);
  }function td(a, b, c, d) {
    ub.call(this, a, b, c, d);
  }function vb(a, b, c, d) {
    ub.apply(this, arguments);
  }function Ha(a, b, c) {
    this.name = a;this.tracks = c;this.duration = void 0 !== b ? b : -1;this.uuid = T.generateUUID();0 > this.duration && this.resetDuration();this.optimize();
  }function ud(a) {
    this.manager = void 0 !== a ? a : Ga;this.textures = {};
  }function Id(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function wb() {
    this.onLoadStart = function () {};this.onLoadProgress = function () {};this.onLoadComplete = function () {};
  }function Jd(a) {
    "boolean" === typeof a && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), a = void 0);this.manager = void 0 !== a ? a : Ga;this.withCredentials = !1;
  }function xe(a) {
    this.manager = void 0 !== a ? a : Ga;this.texturePath = "";
  }function ia() {}function Sa(a, b) {
    this.v1 = a;this.v2 = b;
  }function Oc() {
    this.curves = [];this.autoClose = !1;
  }function Va(a, b, c, d, e, f, g, h) {
    this.aX = a;this.aY = b;this.xRadius = c;this.yRadius = d;this.aStartAngle = e;this.aEndAngle = f;this.aClockwise = g;this.aRotation = h || 0;
  }function xb(a) {
    this.points = void 0 === a ? [] : a;
  }function yb(a, b, c, d) {
    this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
  }function zb(a, b, c) {
    this.v0 = a;this.v1 = b;this.v2 = c;
  }function Ab() {
    Pc.apply(this, arguments);this.holes = [];
  }function Pc(a) {
    Oc.call(this);this.currentPoint = new B();a && this.fromPoints(a);
  }function Kd() {
    this.subPaths = [];this.currentPath = null;
  }function Ld(a) {
    this.data = a;
  }function ye(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function Md() {
    void 0 === Nd && (Nd = new (window.AudioContext || window.webkitAudioContext)());return Nd;
  }function Od(a) {
    this.manager = void 0 !== a ? a : Ga;
  }function ze() {
    this.type = "StereoCamera";this.aspect = 1;this.eyeSep = .064;this.cameraL = new Ea();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate = !1;this.cameraR = new Ea();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate = !1;
  }function vd(a, b, c) {
    z.call(this);this.type = "CubeCamera";var d = new Ea(90, 1, a, b);d.up.set(0, -1, 0);d.lookAt(new q(1, 0, 0));this.add(d);var e = new Ea(90, 1, a, b);e.up.set(0, -1, 0);e.lookAt(new q(-1, 0, 0));this.add(e);var f = new Ea(90, 1, a, b);f.up.set(0, 0, 1);f.lookAt(new q(0, 1, 0));this.add(f);var g = new Ea(90, 1, a, b);g.up.set(0, 0, -1);g.lookAt(new q(0, -1, 0));this.add(g);var h = new Ea(90, 1, a, b);h.up.set(0, -1, 0);h.lookAt(new q(0, 0, 1));this.add(h);var k = new Ea(90, 1, a, b);k.up.set(0, -1, 0);k.lookAt(new q(0, 0, -1));this.add(k);this.renderTarget = new Eb(c, c, { format: 1022, magFilter: 1006, minFilter: 1006 });this.updateCubeMap = function (a, b) {
      null === this.parent && this.updateMatrixWorld();var c = this.renderTarget,
          p = c.texture.generateMipmaps;c.texture.generateMipmaps = !1;c.activeCubeFace = 0;a.render(b, d, c);c.activeCubeFace = 1;a.render(b, e, c);c.activeCubeFace = 2;a.render(b, f, c);c.activeCubeFace = 3;a.render(b, g, c);c.activeCubeFace = 4;a.render(b, h, c);c.texture.generateMipmaps = p;c.activeCubeFace = 5;a.render(b, k, c);a.setRenderTarget(null);
    };
  }function Pd() {
    z.call(this);this.type = "AudioListener";this.context = Md();this.gain = this.context.createGain();this.gain.connect(this.context.destination);this.filter = null;
  }function $b(a) {
    z.call(this);this.type = "Audio";this.context = a.context;this.source = this.context.createBufferSource();
    this.source.onended = this.onEnded.bind(this);this.gain = this.context.createGain();this.gain.connect(a.getInput());this.autoplay = !1;this.startTime = 0;this.playbackRate = 1;this.isPlaying = !1;this.hasPlaybackControl = !0;this.sourceType = "empty";this.filters = [];
  }function Qd(a) {
    $b.call(this, a);this.panner = this.context.createPanner();this.panner.connect(this.gain);
  }function Rd(a, b) {
    this.analyser = a.context.createAnalyser();this.analyser.fftSize = void 0 !== b ? b : 2048;this.data = new Uint8Array(this.analyser.frequencyBinCount);
    a.getOutput().connect(this.analyser);
  }function wd(a, b, c) {
    this.binding = a;this.valueSize = c;a = Float64Array;switch (b) {case "quaternion":
        b = this._slerp;break;case "string":case "bool":
        a = Array;b = this._select;break;default:
        b = this._lerp;}this.buffer = new a(4 * c);this._mixBufferRegion = b;this.referenceCount = this.useCount = this.cumulativeWeight = 0;
  }function fa(a, b, c) {
    this.path = b;this.parsedPath = c || fa.parseTrackName(b);this.node = fa.findNode(a, this.parsedPath.nodeName) || a;this.rootNode = a;
  }function Sd(a) {
    this.uuid = T.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);this.nCachedObjects_ = 0;var b = {};this._indicesByUUID = b;for (var c = 0, d = arguments.length; c !== d; ++c) {
      b[arguments[c].uuid] = c;
    }this._paths = [];this._parsedPaths = [];this._bindings = [];this._bindingsIndicesByPath = {};var e = this;this.stats = { objects: { get total() {
          return e._objects.length;
        }, get inUse() {
          return this.total - e.nCachedObjects_;
        } }, get bindingsPerObject() {
        return e._bindings.length;
      } };
  }function Td(a, b, c) {
    this._mixer = a;this._clip = b;this._localRoot = c || null;a = b.tracks;
    b = a.length;c = Array(b);for (var d = { endingStart: 2400, endingEnd: 2400 }, e = 0; e !== b; ++e) {
      var f = a[e].createInterpolant(null);c[e] = f;f.settings = d;
    }this._interpolantSettings = d;this._interpolants = c;this._propertyBindings = Array(b);this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;this.loop = 2201;this._loopCount = -1;this._startTime = null;this.time = 0;this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;this.repetitions = Infinity;this.paused = !1;this.enabled = !0;this.clampWhenFinished = !1;this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }function Ud(a) {
    this._root = a;this._initMemoryManager();this.time = this._accuIndex = 0;this.timeScale = 1;
  }function Ae(a, b) {
    "string" === typeof a && (console.warn("THREE.Uniform: Type parameter is no longer needed."), a = b);this.value = a;
  }function Bb() {
    G.call(this);this.type = "InstancedBufferGeometry";this.maxInstancedCount = void 0;
  }function Vd(a, b, c, d) {
    this.uuid = T.generateUUID();this.data = a;this.itemSize = b;this.offset = c;this.normalized = !0 === d;
  }function ac(a, b) {
    this.uuid = T.generateUUID();this.array = a;this.stride = b;this.count = void 0 !== a ? a.length / b : 0;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
  }function bc(a, b, c) {
    ac.call(this, a, b);this.meshPerAttribute = c || 1;
  }function cc(a, b, c) {
    C.call(this, a, b);this.meshPerAttribute = c || 1;
  }function Wd(a, b, c, d) {
    this.ray = new ab(a, b);this.near = c || 0;this.far = d || Infinity;this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} };Object.defineProperties(this.params, { PointCloud: { get: function get() {
          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
          return this.Points;
        } } });
  }function Be(a, b) {
    return a.distance - b.distance;
  }function Xd(a, b, c, d) {
    if (!1 !== a.visible && (a.raycast(b, c), !0 === d)) {
      a = a.children;d = 0;for (var e = a.length; d < e; d++) {
        Xd(a[d], b, c, !0);
      }
    }
  }function Yd(a) {
    this.autoStart = void 0 !== a ? a : !0;this.elapsedTime = this.oldTime = this.startTime = 0;this.running = !1;
  }function Zd(a, b, c) {
    this.radius = void 0 !== a ? a : 1;this.phi = void 0 !== b ? b : 0;this.theta = void 0 !== c ? c : 0;return this;
  }function na(a, b) {
    ya.call(this, a, b);this.animationsMap = {};this.animationsList = [];var c = this.geometry.morphTargets.length;
    this.createAnimation("__default", 0, c - 1, c / 1);this.setAnimationWeight("__default", 1);
  }function Qc(a) {
    z.call(this);this.material = a;this.render = function (a) {};
  }function Rc(a, b, c, d) {
    this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16711680;d = void 0 !== d ? d : 1;b = 0;(c = this.object.geometry) && c.isGeometry ? b = 3 * c.faces.length : c && c.isBufferGeometry && (b = c.attributes.normal.count);c = new G();b = new ha(6 * b, 3);c.addAttribute("position", b);la.call(this, c, new oa({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
  }
  function dc(a) {
    z.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;a = new G();for (var b = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], c = 0, d = 1; 32 > c; c++, d++) {
      var e = c / 32 * Math.PI * 2,
          f = d / 32 * Math.PI * 2;b.push(Math.cos(e), Math.sin(e), 1, Math.cos(f), Math.sin(f), 1);
    }a.addAttribute("position", new ha(b, 3));b = new oa({ fog: !1 });this.cone = new la(a, b);this.add(this.cone);this.update();
  }function ec(a) {
    this.bones = this.getBoneList(a);for (var b = new Q(), c = 0; c < this.bones.length; c++) {
      var d = this.bones[c];d.parent && d.parent.isBone && (b.vertices.push(new q()), b.vertices.push(new q()), b.colors.push(new O(0, 0, 1)), b.colors.push(new O(0, 1, 0)));
    }b.dynamic = !0;c = new oa({ vertexColors: 2, depthTest: !1, depthWrite: !1, transparent: !0 });la.call(this, b, c);this.root = a;this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.update();
  }function fc(a, b) {
    this.light = a;this.light.updateMatrixWorld();var c = new mb(b, 4, 2),
        d = new Ma({ wireframe: !0, fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    ya.call(this, c, d);this.matrix = this.light.matrixWorld;this.matrixAutoUpdate = !1;
  }function gc(a, b) {
    z.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.colors = [new O(), new O()];var c = new Rb(b, 4, 2);c.rotateX(-Math.PI / 2);for (var d = 0; 8 > d; d++) {
      c.faces[d].color = this.colors[4 > d ? 0 : 1];
    }d = new Ma({ vertexColors: 1, wireframe: !0 });this.lightSphere = new ya(c, d);this.add(this.lightSphere);this.update();
  }function Sc(a, b, c, d) {
    b = b || 1;c = new O(void 0 !== c ? c : 4473924);d = new O(void 0 !== d ? d : 8947848);for (var e = b / 2, f = 2 * a / b, g = [], h = [], k = 0, m = 0, l = -a; k <= b; k++, l += f) {
      g.push(-a, 0, l, a, 0, l);g.push(l, 0, -a, l, 0, a);var n = k === e ? c : d;n.toArray(h, m);m += 3;n.toArray(h, m);m += 3;n.toArray(h, m);m += 3;n.toArray(h, m);m += 3;
    }a = new G();a.addAttribute("position", new ha(g, 3));a.addAttribute("color", new ha(h, 3));g = new oa({ vertexColors: 2 });la.call(this, a, g);
  }function Tc(a, b, c, d) {
    this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16776960;d = void 0 !== d ? d : 1;b = 0;(c = this.object.geometry) && c.isGeometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
    c = new G();b = new ha(6 * b, 3);c.addAttribute("position", b);la.call(this, c, new oa({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
  }function hc(a, b) {
    z.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;void 0 === b && (b = 1);var c = new G();c.addAttribute("position", new ha([-b, b, 0, b, b, 0, b, -b, 0, -b, -b, 0, -b, b, 0], 3));var d = new oa({ fog: !1 });this.add(new Ta(c, d));c = new G();c.addAttribute("position", new ha([0, 0, 0, 0, 0, 1], 3));this.add(new Ta(c, d));this.update();
  }
  function Uc(a) {
    function b(a, b, d) {
      c(a, d);c(b, d);
    }function c(a, b) {
      d.vertices.push(new q());d.colors.push(new O(b));void 0 === f[a] && (f[a] = []);f[a].push(d.vertices.length - 1);
    }var d = new Q(),
        e = new oa({ color: 16777215, vertexColors: 1 }),
        f = {};b("n1", "n2", 16755200);b("n2", "n4", 16755200);b("n4", "n3", 16755200);b("n3", "n1", 16755200);b("f1", "f2", 16755200);b("f2", "f4", 16755200);b("f4", "f3", 16755200);b("f3", "f1", 16755200);b("n1", "f1", 16755200);b("n2", "f2", 16755200);b("n3", "f3", 16755200);b("n4", "f4", 16755200);b("p", "n1", 16711680);
    b("p", "n2", 16711680);b("p", "n3", 16711680);b("p", "n4", 16711680);b("u1", "u2", 43775);b("u2", "u3", 43775);b("u3", "u1", 43775);b("c", "t", 16777215);b("p", "c", 3355443);b("cn1", "cn2", 3355443);b("cn3", "cn4", 3355443);b("cf1", "cf2", 3355443);b("cf3", "cf4", 3355443);la.call(this, d, e);this.camera = a;this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.pointMap = f;this.update();
  }function Vc(a, b) {
    var c = void 0 !== b ? b : 8947848;this.object = a;this.box = new Ba();ya.call(this, new ob(1, 1, 1), new Ma({ color: c, wireframe: !0 }));
  }function Wc(a, b) {
    void 0 === b && (b = 16776960);var c = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
        d = new Float32Array(24),
        e = new G();e.setIndex(new C(c, 1));e.addAttribute("position", new C(d, 3));la.call(this, e, new oa({ color: b }));void 0 !== a && this.update(a);
  }function Cb(a, b, c, d, e, f) {
    z.call(this);void 0 === d && (d = 16776960);void 0 === c && (c = 1);void 0 === e && (e = .2 * c);void 0 === f && (f = .2 * e);this.position.copy(b);this.line = new Ta(Ce, new oa({ color: d }));
    this.line.matrixAutoUpdate = !1;this.add(this.line);this.cone = new ya(De, new Ma({ color: d }));this.cone.matrixAutoUpdate = !1;this.add(this.cone);this.setDirection(a);this.setLength(c, e, f);
  }function xd(a) {
    a = a || 1;var b = new Float32Array([0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a]),
        c = new Float32Array([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1]);a = new G();a.addAttribute("position", new C(b, 3));a.addAttribute("color", new C(c, 3));b = new oa({ vertexColors: 2 });la.call(this, a, b);
  }function Ee(a) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.");
    $d.call(this, a);this.type = "catmullrom";this.closed = !0;
  }function yd(a, b, c, d, e, f) {
    Va.call(this, a, b, c, c, d, e, f);
  }void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));void 0 === Math.sign && (Math.sign = function (a) {
    return 0 > a ? -1 : 0 < a ? 1 : +a;
  });void 0 === Function.prototype.name && Object.defineProperty(Function.prototype, "name", { get: function get() {
      return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
    } });void 0 === Object.assign && function () {
    Object.assign = function (a) {
      if (void 0 === a || null === a) throw new TypeError("Cannot convert undefined or null to object");
      for (var b = Object(a), c = 1; c < arguments.length; c++) {
        var d = arguments[c];if (void 0 !== d && null !== d) for (var e in d) {
          Object.prototype.hasOwnProperty.call(d, e) && (b[e] = d[e]);
        }
      }return b;
    };
  }();Object.assign(sa.prototype, { addEventListener: function addEventListener(a, b) {
      void 0 === this._listeners && (this._listeners = {});var c = this._listeners;void 0 === c[a] && (c[a] = []);-1 === c[a].indexOf(b) && c[a].push(b);
    }, hasEventListener: function hasEventListener(a, b) {
      if (void 0 === this._listeners) return !1;var c = this._listeners;return void 0 !== c[a] && -1 !== c[a].indexOf(b) ? !0 : !1;
    },
    removeEventListener: function removeEventListener(a, b) {
      if (void 0 !== this._listeners) {
        var c = this._listeners[a];if (void 0 !== c) {
          var d = c.indexOf(b);-1 !== d && c.splice(d, 1);
        }
      }
    }, dispatchEvent: function dispatchEvent(a) {
      if (void 0 !== this._listeners) {
        var b = this._listeners[a.type];if (void 0 !== b) {
          a.target = this;var c = [],
              d,
              e = b.length;for (d = 0; d < e; d++) {
            c[d] = b[d];
          }for (d = 0; d < e; d++) {
            c[d].call(this, a);
          }
        }
      }
    } });var Fe = { NoBlending: 0, NormalBlending: 1, AdditiveBlending: 2, SubtractiveBlending: 3, MultiplyBlending: 4, CustomBlending: 5 },
      Ge = { UVMapping: 300, CubeReflectionMapping: 301,
    CubeRefractionMapping: 302, EquirectangularReflectionMapping: 303, EquirectangularRefractionMapping: 304, SphericalReflectionMapping: 305, CubeUVReflectionMapping: 306, CubeUVRefractionMapping: 307 },
      ae = { RepeatWrapping: 1E3, ClampToEdgeWrapping: 1001, MirroredRepeatWrapping: 1002 },
      be = { NearestFilter: 1003, NearestMipMapNearestFilter: 1004, NearestMipMapLinearFilter: 1005, LinearFilter: 1006, LinearMipMapNearestFilter: 1007, LinearMipMapLinearFilter: 1008 },
      T = { DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function () {
      var a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
          b = Array(36),
          c = 0,
          d;return function () {
        for (var e = 0; 36 > e; e++) {
          8 === e || 13 === e || 18 === e || 23 === e ? b[e] = "-" : 14 === e ? b[e] = "4" : (2 >= c && (c = 33554432 + 16777216 * Math.random() | 0), d = c & 15, c >>= 4, b[e] = a[19 === e ? d & 3 | 8 : d]);
        }return b.join("");
      };
    }(), clamp: function clamp(a, b, c) {
      return Math.max(b, Math.min(c, a));
    }, euclideanModulo: function euclideanModulo(a, b) {
      return (a % b + b) % b;
    }, mapLinear: function mapLinear(a, b, c, d, e) {
      return d + (a - b) * (e - d) / (c - b);
    }, lerp: function lerp(a, b, c) {
      return (1 - c) * a + c * b;
    }, smoothstep: function smoothstep(a, b, c) {
      if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * (3 - 2 * a);
    }, smootherstep: function smootherstep(a, b, c) {
      if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * a * (a * (6 * a - 15) + 10);
    }, random16: function random16() {
      console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead.");return Math.random();
    }, randInt: function randInt(a, b) {
      return a + Math.floor(Math.random() * (b - a + 1));
    }, randFloat: function randFloat(a, b) {
      return a + Math.random() * (b - a);
    }, randFloatSpread: function randFloatSpread(a) {
      return a * (.5 - Math.random());
    }, degToRad: function degToRad(a) {
      return a * T.DEG2RAD;
    }, radToDeg: function radToDeg(a) {
      return a * T.RAD2DEG;
    }, isPowerOfTwo: function isPowerOfTwo(a) {
      return 0 === (a & a - 1) && 0 !== a;
    }, nearestPowerOfTwo: function nearestPowerOfTwo(a) {
      return Math.pow(2, Math.round(Math.log(a) / Math.LN2));
    }, nextPowerOfTwo: function nextPowerOfTwo(a) {
      a--;a |= a >> 1;a |= a >> 2;a |= a >> 4;a |= a >> 8;a |= a >> 16;a++;return a;
    } };B.prototype = { constructor: B, isVector2: !0, get width() {
      return this.x;
    }, set width(a) {
      this.x = a;
    }, get height() {
      return this.y;
    }, set height(a) {
      this.y = a;
    }, set: function set(a, b) {
      this.x = a;this.y = b;return this;
    }, setScalar: function setScalar(a) {
      this.y = this.x = a;return this;
    }, setX: function setX(a) {
      this.x = a;return this;
    }, setY: function setY(a) {
      this.y = a;return this;
    }, setComponent: function setComponent(a, b) {
      switch (a) {case 0:
          this.x = b;break;case 1:
          this.y = b;break;default:
          throw Error("index is out of range: " + a);}return this;
    }, getComponent: function getComponent(a) {
      switch (a) {case 0:
          return this.x;case 1:
          return this.y;default:
          throw Error("index is out of range: " + a);}
    }, clone: function clone() {
      return new this.constructor(this.x, this.y);
    }, copy: function copy(a) {
      this.x = a.x;this.y = a.y;return this;
    }, add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;return this;
    }, addScalar: function addScalar(a) {
      this.x += a;this.y += a;return this;
    }, addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;this.y = a.y + b.y;return this;
    }, addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;this.y += a.y * b;return this;
    }, sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;return this;
    }, subScalar: function subScalar(a) {
      this.x -= a;this.y -= a;return this;
    }, subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;this.y = a.y - b.y;return this;
    }, multiply: function multiply(a) {
      this.x *= a.x;this.y *= a.y;return this;
    }, multiplyScalar: function multiplyScalar(a) {
      isFinite(a) ? (this.x *= a, this.y *= a) : this.y = this.x = 0;return this;
    }, divide: function divide(a) {
      this.x /= a.x;this.y /= a.y;return this;
    }, divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    }, min: function min(a) {
      this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);return this;
    }, max: function max(a) {
      this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);return this;
    }, clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));return this;
    }, clampScalar: function () {
      var a, b;return function (c, d) {
        void 0 === a && (a = new B(), b = new B());a.set(c, c);b.set(d, d);return this.clamp(a, b);
      };
    }(), clampLength: function clampLength(a, b) {
      var c = this.length();return this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);
    }, floor: function floor() {
      this.x = Math.floor(this.x);this.y = Math.floor(this.y);return this;
    }, ceil: function ceil() {
      this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);return this;
    }, round: function round() {
      this.x = Math.round(this.x);this.y = Math.round(this.y);return this;
    }, roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);return this;
    }, negate: function negate() {
      this.x = -this.x;this.y = -this.y;return this;
    }, dot: function dot(a) {
      return this.x * a.x + this.y * a.y;
    }, lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y;
    }, length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }, lengthManhattan: function lengthManhattan() {
      return Math.abs(this.x) + Math.abs(this.y);
    }, normalize: function normalize() {
      return this.divideScalar(this.length());
    }, angle: function angle() {
      var a = Math.atan2(this.y, this.x);0 > a && (a += 2 * Math.PI);return a;
    }, distanceTo: function distanceTo(a) {
      return Math.sqrt(this.distanceToSquared(a));
    }, distanceToSquared: function distanceToSquared(a) {
      var b = this.x - a.x;a = this.y - a.y;return b * b + a * a;
    }, distanceToManhattan: function distanceToManhattan(a) {
      return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
    }, setLength: function setLength(a) {
      return this.multiplyScalar(a / this.length());
    }, lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;return this;
    }, lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    }, equals: function equals(a) {
      return a.x === this.x && a.y === this.y;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;return a;
    }, fromAttribute: function fromAttribute(a, b, c) {
      void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];return this;
    }, rotateAround: function rotateAround(a, b) {
      var c = Math.cos(b),
          d = Math.sin(b),
          e = this.x - a.x,
          f = this.y - a.y;this.x = e * c - f * d + a.x;this.y = e * d + f * c + a.y;return this;
    } };da.DEFAULT_IMAGE = void 0;da.DEFAULT_MAPPING = 300;da.prototype = { constructor: da, isTexture: !0, set needsUpdate(a) {
      !0 === a && this.version++;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.image = a.image;this.mipmaps = a.mipmaps.slice(0);this.mapping = a.mapping;this.wrapS = a.wrapS;this.wrapT = a.wrapT;this.magFilter = a.magFilter;this.minFilter = a.minFilter;this.anisotropy = a.anisotropy;this.format = a.format;this.type = a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.generateMipmaps = a.generateMipmaps;this.premultiplyAlpha = a.premultiplyAlpha;this.flipY = a.flipY;this.unpackAlignment = a.unpackAlignment;this.encoding = a.encoding;return this;
    }, toJSON: function toJSON(a) {
      if (void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];var b = { metadata: { version: 4.4, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], wrap: [this.wrapS, this.wrapT], minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY };if (void 0 !== this.image) {
        var c = this.image;void 0 === c.uuid && (c.uuid = T.generateUUID());if (void 0 === a.images[c.uuid]) {
          var d = a.images,
              e = c.uuid,
              f = c.uuid,
              g;void 0 !== c.toDataURL ? g = c : (g = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), g.width = c.width, g.height = c.height, g.getContext("2d").drawImage(c, 0, 0, c.width, c.height));g = 2048 < g.width || 2048 < g.height ? g.toDataURL("image/jpeg", .6) : g.toDataURL("image/png");d[e] = { uuid: f, url: g };
        }b.image = c.uuid;
      }return a.textures[this.uuid] = b;
    }, dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    }, transformUv: function transformUv(a) {
      if (300 === this.mapping) {
        a.multiply(this.repeat);a.add(this.offset);if (0 > a.x || 1 < a.x) switch (this.wrapS) {case 1E3:
            a.x -= Math.floor(a.x);break;case 1001:
            a.x = 0 > a.x ? 0 : 1;break;case 1002:
            a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);}if (0 > a.y || 1 < a.y) switch (this.wrapT) {case 1E3:
            a.y -= Math.floor(a.y);break;case 1001:
            a.y = 0 > a.y ? 0 : 1;break;case 1002:
            a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);}this.flipY && (a.y = 1 - a.y);
      }
    } };Object.assign(da.prototype, sa.prototype);var ee = 0;ga.prototype = { constructor: ga, isVector4: !0, set: function set(a, b, c, d) {
      this.x = a;this.y = b;this.z = c;this.w = d;return this;
    }, setScalar: function setScalar(a) {
      this.w = this.z = this.y = this.x = a;return this;
    }, setX: function setX(a) {
      this.x = a;return this;
    }, setY: function setY(a) {
      this.y = a;
      return this;
    }, setZ: function setZ(a) {
      this.z = a;return this;
    }, setW: function setW(a) {
      this.w = a;return this;
    }, setComponent: function setComponent(a, b) {
      switch (a) {case 0:
          this.x = b;break;case 1:
          this.y = b;break;case 2:
          this.z = b;break;case 3:
          this.w = b;break;default:
          throw Error("index is out of range: " + a);}return this;
    }, getComponent: function getComponent(a) {
      switch (a) {case 0:
          return this.x;case 1:
          return this.y;case 2:
          return this.z;case 3:
          return this.w;default:
          throw Error("index is out of range: " + a);}
    }, clone: function clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }, copy: function copy(a) {
      this.x = a.x;this.y = a.y;this.z = a.z;this.w = void 0 !== a.w ? a.w : 1;return this;
    }, add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;this.w += a.w;return this;
    }, addScalar: function addScalar(a) {
      this.x += a;this.y += a;this.z += a;this.w += a;return this;
    }, addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;this.w = a.w + b.w;return this;
    },
    addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;this.w += a.w * b;return this;
    }, sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;this.w -= a.w;return this;
    }, subScalar: function subScalar(a) {
      this.x -= a;this.y -= a;this.z -= a;this.w -= a;return this;
    }, subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;this.w = a.w - b.w;return this;
    }, multiplyScalar: function multiplyScalar(a) {
      isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a, this.w *= a) : this.w = this.z = this.y = this.x = 0;return this;
    }, applyMatrix4: function applyMatrix4(a) {
      var b = this.x,
          c = this.y,
          d = this.z,
          e = this.w;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;return this;
    }, divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    }, setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(a) {
      this.w = 2 * Math.acos(a.w);var b = Math.sqrt(1 - a.w * a.w);1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);return this;
    }, setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(a) {
      var b, c, d;a = a.elements;var e = a[0];d = a[4];var f = a[8],
          g = a[1],
          h = a[5],
          k = a[9];c = a[2];b = a[6];var m = a[10];if (.01 > Math.abs(d - g) && .01 > Math.abs(f - c) && .01 > Math.abs(k - b)) {
        if (.1 > Math.abs(d + g) && .1 > Math.abs(f + c) && .1 > Math.abs(k + b) && .1 > Math.abs(e + h + m - 3)) return this.set(1, 0, 0, 0), this;a = Math.PI;e = (e + 1) / 2;h = (h + 1) / 2;m = (m + 1) / 2;d = (d + g) / 4;f = (f + c) / 4;k = (k + b) / 4;e > h && e > m ? .01 > e ? (b = 0, d = c = .707106781) : (b = Math.sqrt(e), c = d / b, d = f / b) : h > m ? .01 > h ? (b = .707106781, c = 0, d = .707106781) : (c = Math.sqrt(h), b = d / c, d = k / c) : .01 > m ? (c = b = .707106781, d = 0) : (d = Math.sqrt(m), b = f / d, c = k / d);this.set(b, c, d, a);return this;
      }a = Math.sqrt((b - k) * (b - k) + (f - c) * (f - c) + (g - d) * (g - d));.001 > Math.abs(a) && (a = 1);this.x = (b - k) / a;this.y = (f - c) / a;this.z = (g - d) / a;this.w = Math.acos((e + h + m - 1) / 2);return this;
    }, min: function min(a) {
      this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);this.w = Math.min(this.w, a.w);return this;
    }, max: function max(a) {
      this.x = Math.max(this.x, a.x);
      this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);this.w = Math.max(this.w, a.w);return this;
    }, clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));this.w = Math.max(a.w, Math.min(b.w, this.w));return this;
    }, clampScalar: function () {
      var a, b;return function (c, d) {
        void 0 === a && (a = new ga(), b = new ga());a.set(c, c, c, c);b.set(d, d, d, d);return this.clamp(a, b);
      };
    }(), floor: function floor() {
      this.x = Math.floor(this.x);this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);this.w = Math.floor(this.w);return this;
    }, ceil: function ceil() {
      this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);this.w = Math.ceil(this.w);return this;
    }, round: function round() {
      this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);this.w = Math.round(this.w);return this;
    }, roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);return this;
    }, negate: function negate() {
      this.x = -this.x;this.y = -this.y;this.z = -this.z;this.w = -this.w;return this;
    }, dot: function dot(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
    }, lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }, length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }, lengthManhattan: function lengthManhattan() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    },
    normalize: function normalize() {
      return this.divideScalar(this.length());
    }, setLength: function setLength(a) {
      return this.multiplyScalar(a / this.length());
    }, lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;this.w += (a.w - this.w) * b;return this;
    }, lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    }, equals: function equals(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];this.w = a[b + 3];return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;a[b + 3] = this.w;return a;
    }, fromAttribute: function fromAttribute(a, b, c) {
      void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];this.w = a.array[b + 3];return this;
    } };Object.assign(Db.prototype, sa.prototype, { isWebGLRenderTarget: !0, setSize: function setSize(a, b) {
      if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();this.viewport.set(0, 0, a, b);this.scissor.set(0, 0, a, b);
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.width = a.width;this.height = a.height;this.viewport.copy(a.viewport);this.texture = a.texture.clone();this.depthBuffer = a.depthBuffer;this.stencilBuffer = a.stencilBuffer;this.depthTexture = a.depthTexture;return this;
    }, dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    } });Eb.prototype = Object.create(Db.prototype);Eb.prototype.constructor = Eb;Eb.prototype.isWebGLRenderTargetCube = !0;ba.prototype = { constructor: ba, get x() {
      return this._x;
    },
    set x(a) {
      this._x = a;this.onChangeCallback();
    }, get y() {
      return this._y;
    }, set y(a) {
      this._y = a;this.onChangeCallback();
    }, get z() {
      return this._z;
    }, set z(a) {
      this._z = a;this.onChangeCallback();
    }, get w() {
      return this._w;
    }, set w(a) {
      this._w = a;this.onChangeCallback();
    }, set: function set(a, b, c, d) {
      this._x = a;this._y = b;this._z = c;this._w = d;this.onChangeCallback();return this;
    }, clone: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }, copy: function copy(a) {
      this._x = a.x;this._y = a.y;this._z = a.z;this._w = a.w;this.onChangeCallback();
      return this;
    }, setFromEuler: function setFromEuler(a, b) {
      if (!1 === (a && a.isEuler)) throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var c = Math.cos(a._x / 2),
          d = Math.cos(a._y / 2),
          e = Math.cos(a._z / 2),
          f = Math.sin(a._x / 2),
          g = Math.sin(a._y / 2),
          h = Math.sin(a._z / 2),
          k = a.order;"XYZ" === k ? (this._x = f * d * e + c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e - f * g * h) : "YXZ" === k ? (this._x = f * d * e + c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e + f * g * h) : "ZXY" === k ? (this._x = f * d * e - c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e - f * g * h) : "ZYX" === k ? (this._x = f * d * e - c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e + f * g * h) : "YZX" === k ? (this._x = f * d * e + c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e - f * g * h) : "XZY" === k && (this._x = f * d * e - c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e + f * g * h);if (!1 !== b) this.onChangeCallback();return this;
    }, setFromAxisAngle: function setFromAxisAngle(a, b) {
      var c = b / 2,
          d = Math.sin(c);this._x = a.x * d;this._y = a.y * d;this._z = a.z * d;this._w = Math.cos(c);this.onChangeCallback();return this;
    }, setFromRotationMatrix: function setFromRotationMatrix(a) {
      var b = a.elements,
          c = b[0];a = b[4];var d = b[8],
          e = b[1],
          f = b[5],
          g = b[9],
          h = b[2],
          k = b[6],
          b = b[10],
          m = c + f + b;0 < m ? (c = .5 / Math.sqrt(m + 1), this._w = .25 / c, this._x = (k - g) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > f && c > b ? (c = 2 * Math.sqrt(1 + c - f - b), this._w = (k - g) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : f > b ? (c = 2 * Math.sqrt(1 + f - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (g + k) / c) : (c = 2 * Math.sqrt(1 + b - c - f), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (g + k) / c, this._z = .25 * c);this.onChangeCallback();return this;
    }, setFromUnitVectors: function () {
      var a, b;return function (c, d) {
        void 0 === a && (a = new q());b = c.dot(d) + 1;1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);this._x = a.x;this._y = a.y;this._z = a.z;this._w = b;return this.normalize();
      };
    }(), inverse: function inverse() {
      return this.conjugate().normalize();
    }, conjugate: function conjugate() {
      this._x *= -1;this._y *= -1;this._z *= -1;this.onChangeCallback();return this;
    }, dot: function dot(a) {
      return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
    }, lengthSq: function lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }, length: function length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }, normalize: function normalize() {
      var a = this.length();0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);this.onChangeCallback();return this;
    }, multiply: function multiply(a, b) {
      return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
    }, premultiply: function premultiply(a) {
      return this.multiplyQuaternions(a, this);
    }, multiplyQuaternions: function multiplyQuaternions(a, b) {
      var c = a._x,
          d = a._y,
          e = a._z,
          f = a._w,
          g = b._x,
          h = b._y,
          k = b._z,
          m = b._w;this._x = c * m + f * g + d * k - e * h;this._y = d * m + f * h + e * g - c * k;this._z = e * m + f * k + c * h - d * g;this._w = f * m - c * g - d * h - e * k;this.onChangeCallback();return this;
    }, slerp: function slerp(a, b) {
      if (0 === b) return this;if (1 === b) return this.copy(a);var c = this._x,
          d = this._y,
          e = this._z,
          f = this._w,
          g = f * a._w + c * a._x + d * a._y + e * a._z;
      0 > g ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, g = -g) : this.copy(a);if (1 <= g) return this._w = f, this._x = c, this._y = d, this._z = e, this;var h = Math.sqrt(1 - g * g);if (.001 > Math.abs(h)) return this._w = .5 * (f + this._w), this._x = .5 * (c + this._x), this._y = .5 * (d + this._y), this._z = .5 * (e + this._z), this;var k = Math.atan2(h, g),
          g = Math.sin((1 - b) * k) / h,
          h = Math.sin(b * k) / h;this._w = f * g + this._w * h;this._x = c * g + this._x * h;this._y = d * g + this._y * h;this._z = e * g + this._z * h;this.onChangeCallback();return this;
    }, equals: function equals(a) {
      return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);this._x = a[b];this._y = a[b + 1];this._z = a[b + 2];this._w = a[b + 3];this.onChangeCallback();return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._w;return a;
    }, onChange: function onChange(a) {
      this.onChangeCallback = a;return this;
    }, onChangeCallback: function onChangeCallback() {} };Object.assign(ba, { slerp: function slerp(a, b, c, d) {
      return c.copy(a).slerp(b, d);
    }, slerpFlat: function slerpFlat(a, b, c, d, e, f, g) {
      var h = c[d + 0],
          k = c[d + 1],
          m = c[d + 2];c = c[d + 3];d = e[f + 0];var l = e[f + 1],
          n = e[f + 2];e = e[f + 3];if (c !== e || h !== d || k !== l || m !== n) {
        f = 1 - g;var p = h * d + k * l + m * n + c * e,
            r = 0 <= p ? 1 : -1,
            x = 1 - p * p;x > Number.EPSILON && (x = Math.sqrt(x), p = Math.atan2(x, p * r), f = Math.sin(f * p) / x, g = Math.sin(g * p) / x);r *= g;h = h * f + d * r;k = k * f + l * r;m = m * f + n * r;c = c * f + e * r;f === 1 - g && (g = 1 / Math.sqrt(h * h + k * k + m * m + c * c), h *= g, k *= g, m *= g, c *= g);
      }a[b] = h;a[b + 1] = k;a[b + 2] = m;a[b + 3] = c;
    } });q.prototype = { constructor: q, isVector3: !0, set: function set(a, b, c) {
      this.x = a;this.y = b;this.z = c;return this;
    },
    setScalar: function setScalar(a) {
      this.z = this.y = this.x = a;return this;
    }, setX: function setX(a) {
      this.x = a;return this;
    }, setY: function setY(a) {
      this.y = a;return this;
    }, setZ: function setZ(a) {
      this.z = a;return this;
    }, setComponent: function setComponent(a, b) {
      switch (a) {case 0:
          this.x = b;break;case 1:
          this.y = b;break;case 2:
          this.z = b;break;default:
          throw Error("index is out of range: " + a);}return this;
    }, getComponent: function getComponent(a) {
      switch (a) {case 0:
          return this.x;case 1:
          return this.y;case 2:
          return this.z;default:
          throw Error("index is out of range: " + a);}
    }, clone: function clone() {
      return new this.constructor(this.x, this.y, this.z);
    }, copy: function copy(a) {
      this.x = a.x;this.y = a.y;this.z = a.z;return this;
    }, add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;return this;
    }, addScalar: function addScalar(a) {
      this.x += a;this.y += a;this.z += a;return this;
    }, addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;return this;
    }, addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;return this;
    }, sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;return this;
    }, subScalar: function subScalar(a) {
      this.x -= a;this.y -= a;this.z -= a;return this;
    }, subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;return this;
    }, multiply: function multiply(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);this.x *= a.x;this.y *= a.y;this.z *= a.z;return this;
    }, multiplyScalar: function multiplyScalar(a) {
      isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a) : this.z = this.y = this.x = 0;return this;
    }, multiplyVectors: function multiplyVectors(a, b) {
      this.x = a.x * b.x;this.y = a.y * b.y;this.z = a.z * b.z;return this;
    }, applyEuler: function () {
      var a;return function (b) {
        !1 === (b && b.isEuler) && console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");void 0 === a && (a = new ba());return this.applyQuaternion(a.setFromEuler(b));
      };
    }(),
    applyAxisAngle: function () {
      var a;return function (b, c) {
        void 0 === a && (a = new ba());return this.applyQuaternion(a.setFromAxisAngle(b, c));
      };
    }(), applyMatrix3: function applyMatrix3(a) {
      var b = this.x,
          c = this.y,
          d = this.z;a = a.elements;this.x = a[0] * b + a[3] * c + a[6] * d;this.y = a[1] * b + a[4] * c + a[7] * d;this.z = a[2] * b + a[5] * c + a[8] * d;return this;
    }, applyMatrix4: function applyMatrix4(a) {
      var b = this.x,
          c = this.y,
          d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12];this.y = a[1] * b + a[5] * c + a[9] * d + a[13];this.z = a[2] * b + a[6] * c + a[10] * d + a[14];return this;
    }, applyProjection: function applyProjection(a) {
      var b = this.x,
          c = this.y,
          d = this.z;a = a.elements;var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;return this;
    }, applyQuaternion: function applyQuaternion(a) {
      var b = this.x,
          c = this.y,
          d = this.z,
          e = a.x,
          f = a.y,
          g = a.z;a = a.w;var h = a * b + f * d - g * c,
          k = a * c + g * b - e * d,
          m = a * d + e * c - f * b,
          b = -e * b - f * c - g * d;this.x = h * a + b * -e + k * -g - m * -f;this.y = k * a + b * -f + m * -e - h * -g;this.z = m * a + b * -g + h * -f - k * -e;return this;
    }, project: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());
        a.multiplyMatrices(b.projectionMatrix, a.getInverse(b.matrixWorld));return this.applyProjection(a);
      };
    }(), unproject: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.multiplyMatrices(b.matrixWorld, a.getInverse(b.projectionMatrix));return this.applyProjection(a);
      };
    }(), transformDirection: function transformDirection(a) {
      var b = this.x,
          c = this.y,
          d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d;this.y = a[1] * b + a[5] * c + a[9] * d;this.z = a[2] * b + a[6] * c + a[10] * d;return this.normalize();
    }, divide: function divide(a) {
      this.x /= a.x;this.y /= a.y;this.z /= a.z;return this;
    }, divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    }, min: function min(a) {
      this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);return this;
    }, max: function max(a) {
      this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);return this;
    }, clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));return this;
    }, clampScalar: function () {
      var a, b;return function (c, d) {
        void 0 === a && (a = new q(), b = new q());a.set(c, c, c);b.set(d, d, d);return this.clamp(a, b);
      };
    }(), clampLength: function clampLength(a, b) {
      var c = this.length();return this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);
    }, floor: function floor() {
      this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);return this;
    }, ceil: function ceil() {
      this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);return this;
    }, round: function round() {
      this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);return this;
    },
    roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);return this;
    }, negate: function negate() {
      this.x = -this.x;this.y = -this.y;this.z = -this.z;return this;
    }, dot: function dot(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z;
    }, lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }, length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }, lengthManhattan: function lengthManhattan() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }, normalize: function normalize() {
      return this.divideScalar(this.length());
    }, setLength: function setLength(a) {
      return this.multiplyScalar(a / this.length());
    }, lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;return this;
    }, lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    }, cross: function cross(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b);var c = this.x,
          d = this.y,
          e = this.z;this.x = d * a.z - e * a.y;this.y = e * a.x - c * a.z;this.z = c * a.y - d * a.x;return this;
    }, crossVectors: function crossVectors(a, b) {
      var c = a.x,
          d = a.y,
          e = a.z,
          f = b.x,
          g = b.y,
          h = b.z;this.x = d * h - e * g;this.y = e * f - c * h;this.z = c * g - d * f;return this;
    }, projectOnVector: function projectOnVector(a) {
      var b = a.dot(this) / a.lengthSq();return this.copy(a).multiplyScalar(b);
    }, projectOnPlane: function () {
      var a;return function (b) {
        void 0 === a && (a = new q());a.copy(this).projectOnVector(b);return this.sub(a);
      };
    }(), reflect: function () {
      var a;return function (b) {
        void 0 === a && (a = new q());return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
      };
    }(), angleTo: function angleTo(a) {
      a = this.dot(a) / Math.sqrt(this.lengthSq() * a.lengthSq());return Math.acos(T.clamp(a, -1, 1));
    }, distanceTo: function distanceTo(a) {
      return Math.sqrt(this.distanceToSquared(a));
    }, distanceToSquared: function distanceToSquared(a) {
      var b = this.x - a.x,
          c = this.y - a.y;a = this.z - a.z;return b * b + c * c + a * a;
    }, distanceToManhattan: function distanceToManhattan(a) {
      return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
    }, setFromSpherical: function setFromSpherical(a) {
      var b = Math.sin(a.phi) * a.radius;
      this.x = b * Math.sin(a.theta);this.y = Math.cos(a.phi) * a.radius;this.z = b * Math.cos(a.theta);return this;
    }, setFromMatrixPosition: function setFromMatrixPosition(a) {
      return this.setFromMatrixColumn(a, 3);
    }, setFromMatrixScale: function setFromMatrixScale(a) {
      var b = this.setFromMatrixColumn(a, 0).length(),
          c = this.setFromMatrixColumn(a, 1).length();a = this.setFromMatrixColumn(a, 2).length();this.x = b;this.y = c;this.z = a;return this;
    }, setFromMatrixColumn: function setFromMatrixColumn(a, b) {
      if ("number" === typeof a) {
        console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");
        var c = a;a = b;b = c;
      }return this.fromArray(a.elements, 4 * b);
    }, equals: function equals(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;return a;
    }, fromAttribute: function fromAttribute(a, b, c) {
      void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];return this;
    } };J.prototype = { constructor: J, isMatrix4: !0,
    set: function set(a, b, c, d, e, f, g, h, k, m, l, n, p, r, x, t) {
      var q = this.elements;q[0] = a;q[4] = b;q[8] = c;q[12] = d;q[1] = e;q[5] = f;q[9] = g;q[13] = h;q[2] = k;q[6] = m;q[10] = l;q[14] = n;q[3] = p;q[7] = r;q[11] = x;q[15] = t;return this;
    }, identity: function identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
    }, clone: function clone() {
      return new J().fromArray(this.elements);
    }, copy: function copy(a) {
      this.elements.set(a.elements);return this;
    }, copyPosition: function copyPosition(a) {
      var b = this.elements;a = a.elements;b[12] = a[12];b[13] = a[13];b[14] = a[14];return this;
    }, extractBasis: function extractBasis(a, b, c) {
      a.setFromMatrixColumn(this, 0);b.setFromMatrixColumn(this, 1);c.setFromMatrixColumn(this, 2);return this;
    }, makeBasis: function makeBasis(a, b, c) {
      this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);return this;
    }, extractRotation: function () {
      var a;return function (b) {
        void 0 === a && (a = new q());var c = this.elements,
            d = b.elements,
            e = 1 / a.setFromMatrixColumn(b, 0).length(),
            f = 1 / a.setFromMatrixColumn(b, 1).length();b = 1 / a.setFromMatrixColumn(b, 2).length();c[0] = d[0] * e;c[1] = d[1] * e;c[2] = d[2] * e;c[4] = d[4] * f;c[5] = d[5] * f;c[6] = d[6] * f;c[8] = d[8] * b;c[9] = d[9] * b;c[10] = d[10] * b;return this;
      };
    }(), makeRotationFromEuler: function makeRotationFromEuler(a) {
      !1 === (a && a.isEuler) && console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b = this.elements,
          c = a.x,
          d = a.y,
          e = a.z,
          f = Math.cos(c),
          c = Math.sin(c),
          g = Math.cos(d),
          d = Math.sin(d),
          h = Math.cos(e),
          e = Math.sin(e);if ("XYZ" === a.order) {
        a = f * h;var k = f * e,
            m = c * h,
            l = c * e;b[0] = g * h;b[4] = -g * e;b[8] = d;b[1] = k + m * d;b[5] = a - l * d;b[9] = -c * g;b[2] = l - a * d;b[6] = m + k * d;b[10] = f * g;
      } else "YXZ" === a.order ? (a = g * h, k = g * e, m = d * h, l = d * e, b[0] = a + l * c, b[4] = m * c - k, b[8] = f * d, b[1] = f * e, b[5] = f * h, b[9] = -c, b[2] = k * c - m, b[6] = l + a * c, b[10] = f * g) : "ZXY" === a.order ? (a = g * h, k = g * e, m = d * h, l = d * e, b[0] = a - l * c, b[4] = -f * e, b[8] = m + k * c, b[1] = k + m * c, b[5] = f * h, b[9] = l - a * c, b[2] = -f * d, b[6] = c, b[10] = f * g) : "ZYX" === a.order ? (a = f * h, k = f * e, m = c * h, l = c * e, b[0] = g * h, b[4] = m * d - k, b[8] = a * d + l, b[1] = g * e, b[5] = l * d + a, b[9] = k * d - m, b[2] = -d, b[6] = c * g, b[10] = f * g) : "YZX" === a.order ? (a = f * g, k = f * d, m = c * g, l = c * d, b[0] = g * h, b[4] = l - a * e, b[8] = m * e + k, b[1] = e, b[5] = f * h, b[9] = -c * h, b[2] = -d * h, b[6] = k * e + m, b[10] = a - l * e) : "XZY" === a.order && (a = f * g, k = f * d, m = c * g, l = c * d, b[0] = g * h, b[4] = -e, b[8] = d * h, b[1] = a * e + l, b[5] = f * h, b[9] = k * e - m, b[2] = m * e - k, b[6] = c * h, b[10] = l * e + a);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
    }, makeRotationFromQuaternion: function makeRotationFromQuaternion(a) {
      var b = this.elements,
          c = a.x,
          d = a.y,
          e = a.z,
          f = a.w,
          g = c + c,
          h = d + d,
          k = e + e;a = c * g;var m = c * h,
          c = c * k,
          l = d * h,
          d = d * k,
          e = e * k,
          g = f * g,
          h = f * h,
          f = f * k;b[0] = 1 - (l + e);b[4] = m - f;b[8] = c + h;b[1] = m + f;b[5] = 1 - (a + e);b[9] = d - g;b[2] = c - h;b[6] = d + g;b[10] = 1 - (a + l);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
    }, lookAt: function () {
      var a, b, c;return function (d, e, f) {
        void 0 === a && (a = new q(), b = new q(), c = new q());var g = this.elements;c.subVectors(d, e).normalize();0 === c.lengthSq() && (c.z = 1);a.crossVectors(f, c).normalize();0 === a.lengthSq() && (c.z += 1E-4, a.crossVectors(f, c).normalize());b.crossVectors(c, a);g[0] = a.x;g[4] = b.x;g[8] = c.x;g[1] = a.y;g[5] = b.y;g[9] = c.y;g[2] = a.z;g[6] = b.z;g[10] = c.z;return this;
      };
    }(), multiply: function multiply(a, b) {
      return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
    }, premultiply: function premultiply(a) {
      return this.multiplyMatrices(a, this);
    }, multiplyMatrices: function multiplyMatrices(a, b) {
      var c = a.elements,
          d = b.elements,
          e = this.elements,
          f = c[0],
          g = c[4],
          h = c[8],
          k = c[12],
          m = c[1],
          l = c[5],
          n = c[9],
          p = c[13],
          r = c[2],
          x = c[6],
          t = c[10],
          q = c[14],
          u = c[3],
          v = c[7],
          I = c[11],
          c = c[15],
          y = d[0],
          E = d[4],
          H = d[8],
          F = d[12],
          M = d[1],
          B = d[5],
          K = d[9],
          z = d[13],
          C = d[2],
          G = d[6],
          J = d[10],
          N = d[14],
          P = d[3],
          R = d[7],
          S = d[11],
          d = d[15];e[0] = f * y + g * M + h * C + k * P;e[4] = f * E + g * B + h * G + k * R;e[8] = f * H + g * K + h * J + k * S;e[12] = f * F + g * z + h * N + k * d;e[1] = m * y + l * M + n * C + p * P;e[5] = m * E + l * B + n * G + p * R;e[9] = m * H + l * K + n * J + p * S;e[13] = m * F + l * z + n * N + p * d;e[2] = r * y + x * M + t * C + q * P;e[6] = r * E + x * B + t * G + q * R;e[10] = r * H + x * K + t * J + q * S;e[14] = r * F + x * z + t * N + q * d;e[3] = u * y + v * M + I * C + c * P;e[7] = u * E + v * B + I * G + c * R;e[11] = u * H + v * K + I * J + c * S;e[15] = u * F + v * z + I * N + c * d;return this;
    }, multiplyToArray: function multiplyToArray(a, b, c) {
      var d = this.elements;this.multiplyMatrices(a, b);c[0] = d[0];c[1] = d[1];c[2] = d[2];c[3] = d[3];c[4] = d[4];c[5] = d[5];c[6] = d[6];c[7] = d[7];c[8] = d[8];c[9] = d[9];c[10] = d[10];c[11] = d[11];c[12] = d[12];
      c[13] = d[13];c[14] = d[14];c[15] = d[15];return this;
    }, multiplyScalar: function multiplyScalar(a) {
      var b = this.elements;b[0] *= a;b[4] *= a;b[8] *= a;b[12] *= a;b[1] *= a;b[5] *= a;b[9] *= a;b[13] *= a;b[2] *= a;b[6] *= a;b[10] *= a;b[14] *= a;b[3] *= a;b[7] *= a;b[11] *= a;b[15] *= a;return this;
    }, applyToVector3Array: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new q());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
          a.fromArray(b, c), a.applyMatrix4(this), a.toArray(b, c);
        }return b;
      };
    }(), applyToBuffer: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new q());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
          a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(c, a.x, a.y, a.z);
        }return b;
      };
    }(), determinant: function determinant() {
      var a = this.elements,
          b = a[0],
          c = a[4],
          d = a[8],
          e = a[12],
          f = a[1],
          g = a[5],
          h = a[9],
          k = a[13],
          m = a[2],
          l = a[6],
          n = a[10],
          p = a[14];return a[3] * (+e * h * l - d * k * l - e * g * n + c * k * n + d * g * p - c * h * p) + a[7] * (+b * h * p - b * k * n + e * f * n - d * f * p + d * k * m - e * h * m) + a[11] * (+b * k * l - b * g * p - e * f * l + c * f * p + e * g * m - c * k * m) + a[15] * (-d * g * m - b * h * l + b * g * n + d * f * l - c * f * n + c * h * m);
    }, transpose: function transpose() {
      var a = this.elements,
          b;b = a[1];a[1] = a[4];a[4] = b;b = a[2];a[2] = a[8];a[8] = b;b = a[6];a[6] = a[9];a[9] = b;b = a[3];a[3] = a[12];a[12] = b;b = a[7];a[7] = a[13];a[13] = b;b = a[11];a[11] = a[14];a[14] = b;return this;
    }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
      console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.");return this.toArray(a, b);
    }, getPosition: function () {
      var a;return function () {
        void 0 === a && (a = new q());console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
        return a.setFromMatrixColumn(this, 3);
      };
    }(), setPosition: function setPosition(a) {
      var b = this.elements;b[12] = a.x;b[13] = a.y;b[14] = a.z;return this;
    }, getInverse: function getInverse(a, b) {
      var c = this.elements,
          d = a.elements,
          e = d[0],
          f = d[1],
          g = d[2],
          h = d[3],
          k = d[4],
          m = d[5],
          l = d[6],
          n = d[7],
          p = d[8],
          r = d[9],
          x = d[10],
          t = d[11],
          q = d[12],
          u = d[13],
          v = d[14],
          d = d[15],
          I = r * v * n - u * x * n + u * l * t - m * v * t - r * l * d + m * x * d,
          y = q * x * n - p * v * n - q * l * t + k * v * t + p * l * d - k * x * d,
          E = p * u * n - q * r * n + q * m * t - k * u * t - p * m * d + k * r * d,
          H = q * r * l - p * u * l - q * m * x + k * u * x + p * m * v - k * r * v,
          F = e * I + f * y + g * E + h * H;if (0 === F) {
        if (!0 === b) throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
        console.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");return this.identity();
      }F = 1 / F;c[0] = I * F;c[1] = (u * x * h - r * v * h - u * g * t + f * v * t + r * g * d - f * x * d) * F;c[2] = (m * v * h - u * l * h + u * g * n - f * v * n - m * g * d + f * l * d) * F;c[3] = (r * l * h - m * x * h - r * g * n + f * x * n + m * g * t - f * l * t) * F;c[4] = y * F;c[5] = (p * v * h - q * x * h + q * g * t - e * v * t - p * g * d + e * x * d) * F;c[6] = (q * l * h - k * v * h - q * g * n + e * v * n + k * g * d - e * l * d) * F;c[7] = (k * x * h - p * l * h + p * g * n - e * x * n - k * g * t + e * l * t) * F;c[8] = E * F;c[9] = (q * r * h - p * u * h - q * f * t + e * u * t + p * f * d - e * r * d) * F;c[10] = (k * u * h - q * m * h + q * f * n - e * u * n - k * f * d + e * m * d) * F;c[11] = (p * m * h - k * r * h - p * f * n + e * r * n + k * f * t - e * m * t) * F;c[12] = H * F;c[13] = (p * u * g - q * r * g + q * f * x - e * u * x - p * f * v + e * r * v) * F;c[14] = (q * m * g - k * u * g - q * f * l + e * u * l + k * f * v - e * m * v) * F;c[15] = (k * r * g - p * m * g + p * f * l - e * r * l - k * f * x + e * m * x) * F;return this;
    }, scale: function scale(a) {
      var b = this.elements,
          c = a.x,
          d = a.y;a = a.z;b[0] *= c;b[4] *= d;b[8] *= a;b[1] *= c;b[5] *= d;b[9] *= a;b[2] *= c;b[6] *= d;b[10] *= a;b[3] *= c;b[7] *= d;b[11] *= a;return this;
    }, getMaxScaleOnAxis: function getMaxScaleOnAxis() {
      var a = this.elements;return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
    }, makeTranslation: function makeTranslation(a, b, c) {
      this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);return this;
    }, makeRotationX: function makeRotationX(a) {
      var b = Math.cos(a);a = Math.sin(a);this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);return this;
    }, makeRotationY: function makeRotationY(a) {
      var b = Math.cos(a);a = Math.sin(a);this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);return this;
    }, makeRotationZ: function makeRotationZ(a) {
      var b = Math.cos(a);a = Math.sin(a);this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
    }, makeRotationAxis: function makeRotationAxis(a, b) {
      var c = Math.cos(b),
          d = Math.sin(b),
          e = 1 - c,
          f = a.x,
          g = a.y,
          h = a.z,
          k = e * f,
          m = e * g;this.set(k * f + c, k * g - d * h, k * h + d * g, 0, k * g + d * h, m * g + c, m * h - d * f, 0, k * h - d * g, m * h + d * f, e * h * h + c, 0, 0, 0, 0, 1);return this;
    }, makeScale: function makeScale(a, b, c) {
      this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);return this;
    }, compose: function compose(a, b, c) {
      this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this;
    }, decompose: function () {
      var a, b;return function (c, d, e) {
        void 0 === a && (a = new q(), b = new J());var f = this.elements,
            g = a.set(f[0], f[1], f[2]).length(),
            h = a.set(f[4], f[5], f[6]).length(),
            k = a.set(f[8], f[9], f[10]).length();0 > this.determinant() && (g = -g);c.x = f[12];c.y = f[13];c.z = f[14];b.elements.set(this.elements);c = 1 / g;var f = 1 / h,
            m = 1 / k;b.elements[0] *= c;b.elements[1] *= c;b.elements[2] *= c;b.elements[4] *= f;b.elements[5] *= f;b.elements[6] *= f;b.elements[8] *= m;b.elements[9] *= m;b.elements[10] *= m;d.setFromRotationMatrix(b);e.x = g;e.y = h;e.z = k;return this;
      };
    }(), makeFrustum: function makeFrustum(a, b, c, d, e, f) {
      var g = this.elements;g[0] = 2 * e / (b - a);g[4] = 0;g[8] = (b + a) / (b - a);g[12] = 0;g[1] = 0;g[5] = 2 * e / (d - c);
      g[9] = (d + c) / (d - c);g[13] = 0;g[2] = 0;g[6] = 0;g[10] = -(f + e) / (f - e);g[14] = -2 * f * e / (f - e);g[3] = 0;g[7] = 0;g[11] = -1;g[15] = 0;return this;
    }, makePerspective: function makePerspective(a, b, c, d) {
      a = c * Math.tan(T.DEG2RAD * a * .5);var e = -a;return this.makeFrustum(e * b, a * b, e, a, c, d);
    }, makeOrthographic: function makeOrthographic(a, b, c, d, e, f) {
      var g = this.elements,
          h = 1 / (b - a),
          k = 1 / (c - d),
          m = 1 / (f - e);g[0] = 2 * h;g[4] = 0;g[8] = 0;g[12] = -((b + a) * h);g[1] = 0;g[5] = 2 * k;g[9] = 0;g[13] = -((c + d) * k);g[2] = 0;g[6] = 0;g[10] = -2 * m;g[14] = -((f + e) * m);g[3] = 0;g[7] = 0;g[11] = 0;g[15] = 1;return this;
    }, equals: function equals(a) {
      var b = this.elements;a = a.elements;for (var c = 0; 16 > c; c++) {
        if (b[c] !== a[c]) return !1;
      }return !0;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);for (var c = 0; 16 > c; c++) {
        this.elements[c] = a[c + b];
      }return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];a[b + 9] = c[9];a[b + 10] = c[10];a[b + 11] = c[11];a[b + 12] = c[12];a[b + 13] = c[13];a[b + 14] = c[14];a[b + 15] = c[15];return a;
    } };Xa.prototype = Object.create(da.prototype);
  Xa.prototype.constructor = Xa;Xa.prototype.isCubeTexture = !0;Object.defineProperty(Xa.prototype, "images", { get: function get() {
      return this.image;
    }, set: function set(a) {
      this.image = a;
    } });var ie = new da(),
      je = new Xa(),
      fe = [],
      he = [];ne.prototype.setValue = function (a, b) {
    for (var c = this.seq, d = 0, e = c.length; d !== e; ++d) {
      var f = c[d];f.setValue(a, b[f.id]);
    }
  };var zd = /([\w\d_]+)(\])?(\[|\.)?/g;Ya.prototype.setValue = function (a, b, c) {
    b = this.map[b];void 0 !== b && b.setValue(a, c, this.renderer);
  };Ya.prototype.set = function (a, b, c) {
    var d = this.map[c];
    void 0 !== d && d.setValue(a, b[c], this.renderer);
  };Ya.prototype.setOptional = function (a, b, c) {
    b = b[c];void 0 !== b && this.setValue(a, c, b);
  };Ya.upload = function (a, b, c, d) {
    for (var e = 0, f = b.length; e !== f; ++e) {
      var g = b[e],
          h = c[g.id];!1 !== h.needsUpdate && g.setValue(a, h.value, d);
    }
  };Ya.seqWithValue = function (a, b) {
    for (var c = [], d = 0, e = a.length; d !== e; ++d) {
      var f = a[d];f.id in b && c.push(f);
    }return c;
  };var La = { merge: function merge(a) {
      for (var b = {}, c = 0; c < a.length; c++) {
        var d = this.clone(a[c]),
            e;for (e in d) {
          b[e] = d[e];
        }
      }return b;
    }, clone: function clone(a) {
      var b = {},
          c;for (c in a) {
        b[c] = {};for (var d in a[c]) {
          var e = a[c][d];e && (e.isColor || e.isMatrix3 || e.isMatrix4 || e.isVector2 || e.isVector3 || e.isVector4 || e.isTexture) ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
        }
      }return b;
    } },
      X = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n", alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n", alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",
    aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n", aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
    begin_vertex: "\nvec3 transformed = vec3( position );\n", beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n", bsdfs: "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
    bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
    clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n",
    clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
    color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n", color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n",
    cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
    defaultnormal_vertex: "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n", emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",
    emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n", encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n", encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n",
    envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
    envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
    envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n", envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
    fog_fragment: "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n", fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
    lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n", lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
    lights_pars: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
    lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n", lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
    lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
    lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
    lights_template: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
    logdepthbuf_fragment: "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n", logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n",
    map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n", map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n", map_particle_fragment: "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n", map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n",
    metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n", metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
    morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif", morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
    normal_flip: "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n", normal_fragment: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
    normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",
    packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
    premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n", project_vertex: "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n", roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n",
    roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
    shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
    shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
    shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
    skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
    skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n", skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
    specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n", tonemapping_pars_fragment: "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
    uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n",
    uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
    uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n", cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
    cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n", depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
    depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
    distanceRGBA_frag: "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n", distanceRGBA_vert: "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n",
    equirect_frag: "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n", equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
    linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n", meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n",
    meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n",
    meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n",
    meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",
    normal_frag: "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n", normal_vert: "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
    points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",
    shadow_frag: "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n", shadow_vert: "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n" };O.prototype = { constructor: O,
    isColor: !0, r: 1, g: 1, b: 1, set: function set(a) {
      a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);return this;
    }, setScalar: function setScalar(a) {
      this.b = this.g = this.r = a;return this;
    }, setHex: function setHex(a) {
      a = Math.floor(a);this.r = (a >> 16 & 255) / 255;this.g = (a >> 8 & 255) / 255;this.b = (a & 255) / 255;return this;
    }, setRGB: function setRGB(a, b, c) {
      this.r = a;this.g = b;this.b = c;return this;
    }, setHSL: function () {
      function a(a, c, d) {
        0 > d && (d += 1);1 < d && --d;return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
      }return function (b, c, d) {
        b = T.euclideanModulo(b, 1);c = T.clamp(c, 0, 1);d = T.clamp(d, 0, 1);0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));return this;
      };
    }(), setStyle: function setStyle(a) {
      function b(b) {
        void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
      }var c;if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
        var d = c[2];switch (c[1]) {case "rgb":case "rgba":
            if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;if (c = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;break;case "hsl":case "hsla":
            if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
              var d = parseFloat(c[1]) / 360,
                  e = parseInt(c[2], 10) / 100,
                  f = parseInt(c[3], 10) / 100;b(c[5]);return this.setHSL(d, e, f);
            }}
      } else if (c = /^\#([A-Fa-f0-9]+)$/.exec(a)) {
        c = c[1];d = c.length;if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
      }a && 0 < a.length && (c = He[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));return this;
    }, clone: function clone() {
      return new this.constructor(this.r, this.g, this.b);
    }, copy: function copy(a) {
      this.r = a.r;this.g = a.g;this.b = a.b;return this;
    }, copyGammaToLinear: function copyGammaToLinear(a, b) {
      void 0 === b && (b = 2);this.r = Math.pow(a.r, b);this.g = Math.pow(a.g, b);this.b = Math.pow(a.b, b);return this;
    }, copyLinearToGamma: function copyLinearToGamma(a, b) {
      void 0 === b && (b = 2);var c = 0 < b ? 1 / b : 1;this.r = Math.pow(a.r, c);this.g = Math.pow(a.g, c);this.b = Math.pow(a.b, c);return this;
    }, convertGammaToLinear: function convertGammaToLinear() {
      var a = this.r,
          b = this.g,
          c = this.b;this.r = a * a;this.g = b * b;this.b = c * c;return this;
    }, convertLinearToGamma: function convertLinearToGamma() {
      this.r = Math.sqrt(this.r);this.g = Math.sqrt(this.g);this.b = Math.sqrt(this.b);return this;
    }, getHex: function getHex() {
      return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
    }, getHexString: function getHexString() {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    }, getHSL: function getHSL(a) {
      a = a || { h: 0, s: 0, l: 0 };var b = this.r,
          c = this.g,
          d = this.b,
          e = Math.max(b, c, d),
          f = Math.min(b, c, d),
          g,
          h = (f + e) / 2;if (f === e) f = g = 0;else {
        var k = e - f,
            f = .5 >= h ? k / (e + f) : k / (2 - e - f);switch (e) {case b:
            g = (c - d) / k + (c < d ? 6 : 0);break;case c:
            g = (d - b) / k + 2;break;case d:
            g = (b - c) / k + 4;}g /= 6;
      }a.h = g;a.s = f;a.l = h;return a;
    }, getStyle: function getStyle() {
      return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
    }, offsetHSL: function offsetHSL(a, b, c) {
      var d = this.getHSL();d.h += a;d.s += b;d.l += c;this.setHSL(d.h, d.s, d.l);return this;
    }, add: function add(a) {
      this.r += a.r;this.g += a.g;this.b += a.b;return this;
    }, addColors: function addColors(a, b) {
      this.r = a.r + b.r;this.g = a.g + b.g;this.b = a.b + b.b;return this;
    }, addScalar: function addScalar(a) {
      this.r += a;this.g += a;this.b += a;return this;
    }, sub: function sub(a) {
      this.r = Math.max(0, this.r - a.r);this.g = Math.max(0, this.g - a.g);this.b = Math.max(0, this.b - a.b);return this;
    }, multiply: function multiply(a) {
      this.r *= a.r;this.g *= a.g;this.b *= a.b;return this;
    }, multiplyScalar: function multiplyScalar(a) {
      this.r *= a;this.g *= a;this.b *= a;return this;
    }, lerp: function lerp(a, b) {
      this.r += (a.r - this.r) * b;this.g += (a.g - this.g) * b;this.b += (a.b - this.b) * b;return this;
    }, equals: function equals(a) {
      return a.r === this.r && a.g === this.g && a.b === this.b;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);this.r = a[b];this.g = a[b + 1];this.b = a[b + 2];return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.r;a[b + 1] = this.g;a[b + 2] = this.b;return a;
    }, toJSON: function toJSON() {
      return this.getHex();
    } };var He = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981,
    cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146,
    floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323,
    lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273,
    moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797,
    silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 },
      W = { common: { diffuse: { value: new O(15658734) }, opacity: { value: 1 }, map: { value: null }, offsetRepeat: { value: new ga(0, 0, 1, 1) }, specularMap: { value: null }, alphaMap: { value: null }, envMap: { value: null }, flipEnvMap: { value: -1 },
      reflectivity: { value: 1 }, refractionRatio: { value: .98 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new B(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } },
    fog: { fogDensity: { value: 2.5E-4 }, fogNear: { value: 1 }, fogFar: { value: 2E3 }, fogColor: { value: new O(16777215) } }, lights: { ambientLightColor: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] },
      spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } } }, points: { diffuse: { value: new O(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, offsetRepeat: { value: new ga(0, 0, 1, 1) } } },
      Gb = { basic: { uniforms: La.merge([W.common, W.aomap, W.fog]), vertexShader: X.meshbasic_vert,
      fragmentShader: X.meshbasic_frag }, lambert: { uniforms: La.merge([W.common, W.aomap, W.lightmap, W.emissivemap, W.fog, W.lights, { emissive: { value: new O(0) } }]), vertexShader: X.meshlambert_vert, fragmentShader: X.meshlambert_frag }, phong: { uniforms: La.merge([W.common, W.aomap, W.lightmap, W.emissivemap, W.bumpmap, W.normalmap, W.displacementmap, W.fog, W.lights, { emissive: { value: new O(0) }, specular: { value: new O(1118481) }, shininess: { value: 30 } }]), vertexShader: X.meshphong_vert, fragmentShader: X.meshphong_frag }, standard: { uniforms: La.merge([W.common, W.aomap, W.lightmap, W.emissivemap, W.bumpmap, W.normalmap, W.displacementmap, W.roughnessmap, W.metalnessmap, W.fog, W.lights, { emissive: { value: new O(0) }, roughness: { value: .5 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } }]), vertexShader: X.meshphysical_vert, fragmentShader: X.meshphysical_frag }, points: { uniforms: La.merge([W.points, W.fog]), vertexShader: X.points_vert, fragmentShader: X.points_frag }, dashed: { uniforms: La.merge([W.common, W.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: X.linedashed_vert,
      fragmentShader: X.linedashed_frag }, depth: { uniforms: La.merge([W.common, W.displacementmap]), vertexShader: X.depth_vert, fragmentShader: X.depth_frag }, normal: { uniforms: { opacity: { value: 1 } }, vertexShader: X.normal_vert, fragmentShader: X.normal_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: X.cube_vert, fragmentShader: X.cube_frag }, equirect: { uniforms: { tEquirect: { value: null }, tFlip: { value: -1 } }, vertexShader: X.equirect_vert, fragmentShader: X.equirect_frag }, distanceRGBA: { uniforms: { lightPos: { value: new q() } },
      vertexShader: X.distanceRGBA_vert, fragmentShader: X.distanceRGBA_frag } };Gb.physical = { uniforms: La.merge([Gb.standard.uniforms, { clearCoat: { value: 0 }, clearCoatRoughness: { value: 0 } }]), vertexShader: X.meshphysical_vert, fragmentShader: X.meshphysical_frag };ic.prototype = { constructor: ic, set: function set(a, b) {
      this.min.copy(a);this.max.copy(b);return this;
    }, setFromPoints: function setFromPoints(a) {
      this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
        this.expandByPoint(a[b]);
      }return this;
    }, setFromCenterAndSize: function () {
      var a = new B();return function (b, c) {
        var d = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
      };
    }(), clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.min.copy(a.min);this.max.copy(a.max);return this;
    }, makeEmpty: function makeEmpty() {
      this.min.x = this.min.y = Infinity;this.max.x = this.max.y = -Infinity;return this;
    }, isEmpty: function isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }, getCenter: function getCenter(a) {
      a = a || new B();return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    },
    getSize: function getSize(a) {
      a = a || new B();return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
    }, expandByPoint: function expandByPoint(a) {
      this.min.min(a);this.max.max(a);return this;
    }, expandByVector: function expandByVector(a) {
      this.min.sub(a);this.max.add(a);return this;
    }, expandByScalar: function expandByScalar(a) {
      this.min.addScalar(-a);this.max.addScalar(a);return this;
    }, containsPoint: function containsPoint(a) {
      return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
    }, containsBox: function containsBox(a) {
      return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y ? !0 : !1;
    }, getParameter: function getParameter(a, b) {
      return (b || new B()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
    }, intersectsBox: function intersectsBox(a) {
      return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
    }, clampPoint: function clampPoint(a, b) {
      return (b || new B()).copy(a).clamp(this.min, this.max);
    }, distanceToPoint: function () {
      var a = new B();return function (b) {
        return a.copy(b).clamp(this.min, this.max).sub(b).length();
      };
    }(), intersect: function intersect(a) {
      this.min.max(a.min);
      this.max.min(a.max);return this;
    }, union: function union(a) {
      this.min.min(a.min);this.max.max(a.max);return this;
    }, translate: function translate(a) {
      this.min.add(a);this.max.add(a);return this;
    }, equals: function equals(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    } };U.prototype = { constructor: U, isMaterial: !0, get needsUpdate() {
      return this._needsUpdate;
    }, set needsUpdate(a) {
      !0 === a && this.update();this._needsUpdate = a;
    }, setValues: function setValues(a) {
      if (void 0 !== a) for (var b in a) {
        var c = a[b];if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");else {
          var d = this[b];void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d && d.isColor ? d.set(c) : d && d.isVector3 && c && c.isVector3 ? d.copy(c) : this[b] = "overdraw" === b ? Number(c) : c;
        }
      }
    }, toJSON: function toJSON(a) {
      function b(a) {
        var b = [],
            c;for (c in a) {
          var d = a[c];delete d.metadata;b.push(d);
        }return b;
      }var c = void 0 === a;c && (a = { textures: {}, images: {} });var d = { metadata: { version: 4.4, type: "Material", generator: "Material.toJSON" } };d.uuid = this.uuid;d.type = this.type;
      "" !== this.name && (d.name = this.name);this.color && this.color.isColor && (d.color = this.color.getHex());void 0 !== this.roughness && (d.roughness = this.roughness);void 0 !== this.metalness && (d.metalness = this.metalness);this.emissive && this.emissive.isColor && (d.emissive = this.emissive.getHex());this.specular && this.specular.isColor && (d.specular = this.specular.getHex());void 0 !== this.shininess && (d.shininess = this.shininess);this.map && this.map.isTexture && (d.map = this.map.toJSON(a).uuid);this.alphaMap && this.alphaMap.isTexture && (d.alphaMap = this.alphaMap.toJSON(a).uuid);this.lightMap && this.lightMap.isTexture && (d.lightMap = this.lightMap.toJSON(a).uuid);this.bumpMap && this.bumpMap.isTexture && (d.bumpMap = this.bumpMap.toJSON(a).uuid, d.bumpScale = this.bumpScale);this.normalMap && this.normalMap.isTexture && (d.normalMap = this.normalMap.toJSON(a).uuid, d.normalScale = this.normalScale.toArray());this.displacementMap && this.displacementMap.isTexture && (d.displacementMap = this.displacementMap.toJSON(a).uuid, d.displacementScale = this.displacementScale, d.displacementBias = this.displacementBias);this.roughnessMap && this.roughnessMap.isTexture && (d.roughnessMap = this.roughnessMap.toJSON(a).uuid);this.metalnessMap && this.metalnessMap.isTexture && (d.metalnessMap = this.metalnessMap.toJSON(a).uuid);this.emissiveMap && this.emissiveMap.isTexture && (d.emissiveMap = this.emissiveMap.toJSON(a).uuid);this.specularMap && this.specularMap.isTexture && (d.specularMap = this.specularMap.toJSON(a).uuid);this.envMap && this.envMap.isTexture && (d.envMap = this.envMap.toJSON(a).uuid, d.reflectivity = this.reflectivity);void 0 !== this.size && (d.size = this.size);void 0 !== this.sizeAttenuation && (d.sizeAttenuation = this.sizeAttenuation);1 !== this.blending && (d.blending = this.blending);2 !== this.shading && (d.shading = this.shading);0 !== this.side && (d.side = this.side);0 !== this.vertexColors && (d.vertexColors = this.vertexColors);1 > this.opacity && (d.opacity = this.opacity);!0 === this.transparent && (d.transparent = this.transparent);d.depthFunc = this.depthFunc;d.depthTest = this.depthTest;d.depthWrite = this.depthWrite;0 < this.alphaTest && (d.alphaTest = this.alphaTest);!0 === this.premultipliedAlpha && (d.premultipliedAlpha = this.premultipliedAlpha);!0 === this.wireframe && (d.wireframe = this.wireframe);1 < this.wireframeLinewidth && (d.wireframeLinewidth = this.wireframeLinewidth);"round" !== this.wireframeLinecap && (d.wireframeLinecap = this.wireframeLinecap);"round" !== this.wireframeLinejoin && (d.wireframeLinejoin = this.wireframeLinejoin);d.skinning = this.skinning;d.morphTargets = this.morphTargets;c && (c = b(a.textures), a = b(a.images), 0 < c.length && (d.textures = c), 0 < a.length && (d.images = a));return d;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.name = a.name;this.fog = a.fog;this.lights = a.lights;this.blending = a.blending;this.side = a.side;this.shading = a.shading;this.vertexColors = a.vertexColors;this.opacity = a.opacity;this.transparent = a.transparent;this.blendSrc = a.blendSrc;this.blendDst = a.blendDst;this.blendEquation = a.blendEquation;this.blendSrcAlpha = a.blendSrcAlpha;this.blendDstAlpha = a.blendDstAlpha;this.blendEquationAlpha = a.blendEquationAlpha;
      this.depthFunc = a.depthFunc;this.depthTest = a.depthTest;this.depthWrite = a.depthWrite;this.colorWrite = a.colorWrite;this.precision = a.precision;this.polygonOffset = a.polygonOffset;this.polygonOffsetFactor = a.polygonOffsetFactor;this.polygonOffsetUnits = a.polygonOffsetUnits;this.alphaTest = a.alphaTest;this.premultipliedAlpha = a.premultipliedAlpha;this.overdraw = a.overdraw;this.visible = a.visible;this.clipShadows = a.clipShadows;this.clipIntersection = a.clipIntersection;a = a.clippingPlanes;var b = null;if (null !== a) for (var c = a.length, b = Array(c), d = 0; d !== c; ++d) {
        b[d] = a[d].clone();
      }this.clippingPlanes = b;return this;
    }, update: function update() {
      this.dispatchEvent({ type: "update" });
    }, dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    } };Object.assign(U.prototype, sa.prototype);var oe = 0;Fa.prototype = Object.create(U.prototype);Fa.prototype.constructor = Fa;Fa.prototype.isShaderMaterial = !0;Fa.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.fragmentShader = a.fragmentShader;this.vertexShader = a.vertexShader;this.uniforms = La.clone(a.uniforms);
    this.defines = a.defines;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.lights = a.lights;this.clipping = a.clipping;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;this.extensions = a.extensions;return this;
  };Fa.prototype.toJSON = function (a) {
    a = U.prototype.toJSON.call(this, a);a.uniforms = this.uniforms;a.vertexShader = this.vertexShader;a.fragmentShader = this.fragmentShader;return a;
  };Za.prototype = Object.create(U.prototype);Za.prototype.constructor = Za;Za.prototype.isMeshDepthMaterial = !0;Za.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.depthPacking = a.depthPacking;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.map = a.map;this.alphaMap = a.alphaMap;this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
  };Ba.prototype = { constructor: Ba, isBox3: !0, set: function set(a, b) {
      this.min.copy(a);
      this.max.copy(b);return this;
    }, setFromArray: function setFromArray(a) {
      for (var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, k = a.length; h < k; h += 3) {
        var m = a[h],
            l = a[h + 1],
            n = a[h + 2];m < b && (b = m);l < c && (c = l);n < d && (d = n);m > e && (e = m);l > f && (f = l);n > g && (g = n);
      }this.min.set(b, c, d);this.max.set(e, f, g);
    }, setFromPoints: function setFromPoints(a) {
      this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
        this.expandByPoint(a[b]);
      }return this;
    }, setFromCenterAndSize: function () {
      var a = new q();return function (b, c) {
        var d = a.copy(c).multiplyScalar(.5);
        this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
      };
    }(), setFromObject: function () {
      var a = new q();return function (b) {
        var c = this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function (b) {
          var e = b.geometry;if (void 0 !== e) if (e && e.isGeometry) for (var e = e.vertices, f = 0, g = e.length; f < g; f++) {
            a.copy(e[f]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
          } else if (e && e.isBufferGeometry && (g = e.attributes.position, void 0 !== g)) {
            var h;g && g.isInterleavedBufferAttribute ? (e = g.data.array, f = g.offset, h = g.data.stride) : (e = g.array, f = 0, h = 3);for (g = e.length; f < g; f += h) {
              a.fromArray(e, f), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
            }
          }
        });return this;
      };
    }(), clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.min.copy(a.min);this.max.copy(a.max);return this;
    }, makeEmpty: function makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;this.max.x = this.max.y = this.max.z = -Infinity;return this;
    }, isEmpty: function isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }, getCenter: function getCenter(a) {
      a = a || new q();
      return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    }, getSize: function getSize(a) {
      a = a || new q();return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
    }, expandByPoint: function expandByPoint(a) {
      this.min.min(a);this.max.max(a);return this;
    }, expandByVector: function expandByVector(a) {
      this.min.sub(a);this.max.add(a);return this;
    }, expandByScalar: function expandByScalar(a) {
      this.min.addScalar(-a);this.max.addScalar(a);return this;
    }, containsPoint: function containsPoint(a) {
      return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
    }, containsBox: function containsBox(a) {
      return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z ? !0 : !1;
    }, getParameter: function getParameter(a, b) {
      return (b || new q()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
    }, intersectsBox: function intersectsBox(a) {
      return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
    }, intersectsSphere: function () {
      var a;return function (b) {
        void 0 === a && (a = new q());this.clampPoint(b.center, a);return a.distanceToSquared(b.center) <= b.radius * b.radius;
      };
    }(), intersectsPlane: function intersectsPlane(a) {
      var b, c;0 < a.normal.x ? (b = a.normal.x * this.min.x, c = a.normal.x * this.max.x) : (b = a.normal.x * this.max.x, c = a.normal.x * this.min.x);0 < a.normal.y ? (b += a.normal.y * this.min.y, c += a.normal.y * this.max.y) : (b += a.normal.y * this.max.y, c += a.normal.y * this.min.y);0 < a.normal.z ? (b += a.normal.z * this.min.z, c += a.normal.z * this.max.z) : (b += a.normal.z * this.max.z, c += a.normal.z * this.min.z);return b <= a.constant && c >= a.constant;
    }, clampPoint: function clampPoint(a, b) {
      return (b || new q()).copy(a).clamp(this.min, this.max);
    }, distanceToPoint: function () {
      var a = new q();return function (b) {
        return a.copy(b).clamp(this.min, this.max).sub(b).length();
      };
    }(), getBoundingSphere: function () {
      var a = new q();return function (b) {
        b = b || new Ca();this.getCenter(b.center);b.radius = .5 * this.getSize(a).length();return b;
      };
    }(), intersect: function intersect(a) {
      this.min.max(a.min);this.max.min(a.max);
      this.isEmpty() && this.makeEmpty();return this;
    }, union: function union(a) {
      this.min.min(a.min);this.max.max(a.max);return this;
    }, applyMatrix4: function () {
      var a = [new q(), new q(), new q(), new q(), new q(), new q(), new q(), new q()];return function (b) {
        if (this.isEmpty()) return this;a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);this.setFromPoints(a);return this;
      };
    }(), translate: function translate(a) {
      this.min.add(a);this.max.add(a);return this;
    }, equals: function equals(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    } };Ca.prototype = { constructor: Ca, set: function set(a, b) {
      this.center.copy(a);this.radius = b;return this;
    }, setFromPoints: function () {
      var a = new Ba();return function (b, c) {
        var d = this.center;void 0 !== c ? d.copy(c) : a.setFromPoints(b).getCenter(d);for (var e = 0, f = 0, g = b.length; f < g; f++) {
          e = Math.max(e, d.distanceToSquared(b[f]));
        }this.radius = Math.sqrt(e);return this;
      };
    }(), clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.center.copy(a.center);this.radius = a.radius;return this;
    }, empty: function empty() {
      return 0 >= this.radius;
    }, containsPoint: function containsPoint(a) {
      return a.distanceToSquared(this.center) <= this.radius * this.radius;
    }, distanceToPoint: function distanceToPoint(a) {
      return a.distanceTo(this.center) - this.radius;
    }, intersectsSphere: function intersectsSphere(a) {
      var b = this.radius + a.radius;return a.center.distanceToSquared(this.center) <= b * b;
    }, intersectsBox: function intersectsBox(a) {
      return a.intersectsSphere(this);
    }, intersectsPlane: function intersectsPlane(a) {
      return Math.abs(this.center.dot(a.normal) - a.constant) <= this.radius;
    }, clampPoint: function clampPoint(a, b) {
      var c = this.center.distanceToSquared(a),
          d = b || new q();d.copy(a);c > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));return d;
    }, getBoundingBox: function getBoundingBox(a) {
      a = a || new Ba();a.set(this.center, this.center);a.expandByScalar(this.radius);return a;
    }, applyMatrix4: function applyMatrix4(a) {
      this.center.applyMatrix4(a);this.radius *= a.getMaxScaleOnAxis();return this;
    }, translate: function translate(a) {
      this.center.add(a);return this;
    }, equals: function equals(a) {
      return a.center.equals(this.center) && a.radius === this.radius;
    } };Ia.prototype = { constructor: Ia, isMatrix3: !0, set: function set(a, b, c, d, e, f, g, h, k) {
      var m = this.elements;m[0] = a;m[1] = d;m[2] = g;m[3] = b;m[4] = e;m[5] = h;m[6] = c;m[7] = f;m[8] = k;return this;
    }, identity: function identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);return this;
    }, clone: function clone() {
      return new this.constructor().fromArray(this.elements);
    }, copy: function copy(a) {
      a = a.elements;this.set(a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8]);return this;
    }, setFromMatrix4: function setFromMatrix4(a) {
      a = a.elements;this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);return this;
    }, applyToVector3Array: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new q());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
          a.fromArray(b, c), a.applyMatrix3(this), a.toArray(b, c);
        }return b;
      };
    }(), applyToBuffer: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new q());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
          a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(c, a.x, a.y, a.z);
        }return b;
      };
    }(), multiplyScalar: function multiplyScalar(a) {
      var b = this.elements;b[0] *= a;b[3] *= a;b[6] *= a;b[1] *= a;b[4] *= a;b[7] *= a;b[2] *= a;b[5] *= a;b[8] *= a;return this;
    }, determinant: function determinant() {
      var a = this.elements,
          b = a[0],
          c = a[1],
          d = a[2],
          e = a[3],
          f = a[4],
          g = a[5],
          h = a[6],
          k = a[7],
          a = a[8];return b * f * a - b * g * k - c * e * a + c * g * h + d * e * k - d * f * h;
    }, getInverse: function getInverse(a, b) {
      a && a.isMatrix4 && console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var c = a.elements,
          d = this.elements,
          e = c[0],
          f = c[1],
          g = c[2],
          h = c[3],
          k = c[4],
          m = c[5],
          l = c[6],
          n = c[7],
          c = c[8],
          p = c * k - m * n,
          r = m * l - c * h,
          q = n * h - k * l,
          t = e * p + f * r + g * q;if (0 === t) {
        if (!0 === b) throw Error("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");return this.identity();
      }t = 1 / t;d[0] = p * t;d[1] = (g * n - c * f) * t;d[2] = (m * f - g * k) * t;d[3] = r * t;d[4] = (c * e - g * l) * t;d[5] = (g * h - m * e) * t;d[6] = q * t;d[7] = (f * l - n * e) * t;d[8] = (k * e - f * h) * t;return this;
    }, transpose: function transpose() {
      var a,
          b = this.elements;a = b[1];b[1] = b[3];b[3] = a;a = b[2];b[2] = b[6];b[6] = a;a = b[5];b[5] = b[7];b[7] = a;return this;
    }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
      console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.");return this.toArray(a, b);
    }, getNormalMatrix: function getNormalMatrix(a) {
      return this.setFromMatrix4(a).getInverse(this).transpose();
    },
    transposeIntoArray: function transposeIntoArray(a) {
      var b = this.elements;a[0] = b[0];a[1] = b[3];a[2] = b[6];a[3] = b[1];a[4] = b[4];a[5] = b[7];a[6] = b[2];a[7] = b[5];a[8] = b[8];return this;
    }, fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);for (var c = 0; 9 > c; c++) {
        this.elements[c] = a[c + b];
      }return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];return a;
    } };va.prototype = { constructor: va, set: function set(a, b) {
      this.normal.copy(a);
      this.constant = b;return this;
    }, setComponents: function setComponents(a, b, c, d) {
      this.normal.set(a, b, c);this.constant = d;return this;
    }, setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(a, b) {
      this.normal.copy(a);this.constant = -b.dot(this.normal);return this;
    }, setFromCoplanarPoints: function () {
      var a = new q(),
          b = new q();return function (c, d, e) {
        d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();this.setFromNormalAndCoplanarPoint(d, c);return this;
      };
    }(), clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.normal.copy(a.normal);
      this.constant = a.constant;return this;
    }, normalize: function normalize() {
      var a = 1 / this.normal.length();this.normal.multiplyScalar(a);this.constant *= a;return this;
    }, negate: function negate() {
      this.constant *= -1;this.normal.negate();return this;
    }, distanceToPoint: function distanceToPoint(a) {
      return this.normal.dot(a) + this.constant;
    }, distanceToSphere: function distanceToSphere(a) {
      return this.distanceToPoint(a.center) - a.radius;
    }, projectPoint: function projectPoint(a, b) {
      return this.orthoPoint(a, b).sub(a).negate();
    }, orthoPoint: function orthoPoint(a, b) {
      var c = this.distanceToPoint(a);return (b || new q()).copy(this.normal).multiplyScalar(c);
    }, intersectLine: function () {
      var a = new q();return function (b, c) {
        var d = c || new q(),
            e = b.delta(a),
            f = this.normal.dot(e);if (0 === f) {
          if (0 === this.distanceToPoint(b.start)) return d.copy(b.start);
        } else return f = -(b.start.dot(this.normal) + this.constant) / f, 0 > f || 1 < f ? void 0 : d.copy(e).multiplyScalar(f).add(b.start);
      };
    }(), intersectsLine: function intersectsLine(a) {
      var b = this.distanceToPoint(a.start);a = this.distanceToPoint(a.end);return 0 > b && 0 < a || 0 > a && 0 < b;
    }, intersectsBox: function intersectsBox(a) {
      return a.intersectsPlane(this);
    },
    intersectsSphere: function intersectsSphere(a) {
      return a.intersectsPlane(this);
    }, coplanarPoint: function coplanarPoint(a) {
      return (a || new q()).copy(this.normal).multiplyScalar(-this.constant);
    }, applyMatrix4: function () {
      var a = new q(),
          b = new Ia();return function (c, d) {
        var e = this.coplanarPoint(a).applyMatrix4(c),
            f = d || b.getNormalMatrix(c),
            f = this.normal.applyMatrix3(f).normalize();this.constant = -e.dot(f);return this;
      };
    }(), translate: function translate(a) {
      this.constant -= a.dot(this.normal);return this;
    }, equals: function equals(a) {
      return a.normal.equals(this.normal) && a.constant === this.constant;
    } };jc.prototype = { constructor: jc, set: function set(a, b, c, d, e, f) {
      var g = this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      for (var b = this.planes, c = 0; 6 > c; c++) {
        b[c].copy(a.planes[c]);
      }return this;
    }, setFromMatrix: function setFromMatrix(a) {
      var b = this.planes,
          c = a.elements;a = c[0];var d = c[1],
          e = c[2],
          f = c[3],
          g = c[4],
          h = c[5],
          k = c[6],
          m = c[7],
          l = c[8],
          n = c[9],
          p = c[10],
          r = c[11],
          q = c[12],
          t = c[13],
          D = c[14],
          c = c[15];
      b[0].setComponents(f - a, m - g, r - l, c - q).normalize();b[1].setComponents(f + a, m + g, r + l, c + q).normalize();b[2].setComponents(f + d, m + h, r + n, c + t).normalize();b[3].setComponents(f - d, m - h, r - n, c - t).normalize();b[4].setComponents(f - e, m - k, r - p, c - D).normalize();b[5].setComponents(f + e, m + k, r + p, c + D).normalize();return this;
    }, intersectsObject: function () {
      var a = new Ca();return function (b) {
        var c = b.geometry;null === c.boundingSphere && c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a);
      };
    }(),
    intersectsSprite: function () {
      var a = new Ca();return function (b) {
        a.center.set(0, 0, 0);a.radius = .7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a);
      };
    }(), intersectsSphere: function intersectsSphere(a) {
      var b = this.planes,
          c = a.center;a = -a.radius;for (var d = 0; 6 > d; d++) {
        if (b[d].distanceToPoint(c) < a) return !1;
      }return !0;
    }, intersectsBox: function () {
      var a = new q(),
          b = new q();return function (c) {
        for (var d = this.planes, e = 0; 6 > e; e++) {
          var f = d[e];a.x = 0 < f.normal.x ? c.min.x : c.max.x;b.x = 0 < f.normal.x ? c.max.x : c.min.x;a.y = 0 < f.normal.y ? c.min.y : c.max.y;b.y = 0 < f.normal.y ? c.max.y : c.min.y;a.z = 0 < f.normal.z ? c.min.z : c.max.z;b.z = 0 < f.normal.z ? c.max.z : c.min.z;var g = f.distanceToPoint(a),
              f = f.distanceToPoint(b);if (0 > g && 0 > f) return !1;
        }return !0;
      };
    }(), containsPoint: function containsPoint(a) {
      for (var b = this.planes, c = 0; 6 > c; c++) {
        if (0 > b[c].distanceToPoint(a)) return !1;
      }return !0;
    } };ab.prototype = { constructor: ab, set: function set(a, b) {
      this.origin.copy(a);this.direction.copy(b);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.origin.copy(a.origin);
      this.direction.copy(a.direction);return this;
    }, at: function at(a, b) {
      return (b || new q()).copy(this.direction).multiplyScalar(a).add(this.origin);
    }, lookAt: function lookAt(a) {
      this.direction.copy(a).sub(this.origin).normalize();return this;
    }, recast: function () {
      var a = new q();return function (b) {
        this.origin.copy(this.at(b, a));return this;
      };
    }(), closestPointToPoint: function closestPointToPoint(a, b) {
      var c = b || new q();c.subVectors(a, this.origin);var d = c.dot(this.direction);return 0 > d ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(d).add(this.origin);
    },
    distanceToPoint: function distanceToPoint(a) {
      return Math.sqrt(this.distanceSqToPoint(a));
    }, distanceSqToPoint: function () {
      var a = new q();return function (b) {
        var c = a.subVectors(b, this.origin).dot(this.direction);if (0 > c) return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b);
      };
    }(), distanceSqToSegment: function () {
      var a = new q(),
          b = new q(),
          c = new q();return function (d, e, f, g) {
        a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);
        var h = .5 * d.distanceTo(e),
            k = -this.direction.dot(b),
            m = c.dot(this.direction),
            l = -c.dot(b),
            n = c.lengthSq(),
            p = Math.abs(1 - k * k),
            r;0 < p ? (d = k * l - m, e = k * m - l, r = h * p, 0 <= d ? e >= -r ? e <= r ? (h = 1 / p, d *= h, e *= h, k = d * (d + k * e + 2 * m) + e * (k * d + e + 2 * l) + n) : (e = h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : (e = -h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : e <= -r ? (d = Math.max(0, -(-k * h + m)), e = 0 < d ? -h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n) : e <= r ? (d = 0, e = Math.min(Math.max(-h, -l), h), k = e * (e + 2 * l) + n) : (d = Math.max(0, -(k * h + m)), e = 0 < d ? h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n)) : (e = 0 < k ? -h : h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n);f && f.copy(this.direction).multiplyScalar(d).add(this.origin);g && g.copy(b).multiplyScalar(e).add(a);return k;
      };
    }(), intersectSphere: function () {
      var a = new q();return function (b, c) {
        a.subVectors(b.center, this.origin);var d = a.dot(this.direction),
            e = a.dot(a) - d * d,
            f = b.radius * b.radius;if (e > f) return null;f = Math.sqrt(f - e);e = d - f;d += f;return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
      };
    }(), intersectsSphere: function intersectsSphere(a) {
      return this.distanceToPoint(a.center) <= a.radius;
    }, distanceToPlane: function distanceToPlane(a) {
      var b = a.normal.dot(this.direction);if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;a = -(this.origin.dot(a.normal) + a.constant) / b;return 0 <= a ? a : null;
    }, intersectPlane: function intersectPlane(a, b) {
      var c = this.distanceToPlane(a);return null === c ? null : this.at(c, b);
    }, intersectsPlane: function intersectsPlane(a) {
      var b = a.distanceToPoint(this.origin);return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
    }, intersectBox: function intersectBox(a, b) {
      var c, d, e, f, g;d = 1 / this.direction.x;f = 1 / this.direction.y;g = 1 / this.direction.z;
      var h = this.origin;0 <= d ? (c = (a.min.x - h.x) * d, d *= a.max.x - h.x) : (c = (a.max.x - h.x) * d, d *= a.min.x - h.x);0 <= f ? (e = (a.min.y - h.y) * f, f *= a.max.y - h.y) : (e = (a.max.y - h.y) * f, f *= a.min.y - h.y);if (c > f || e > d) return null;if (e > c || c !== c) c = e;if (f < d || d !== d) d = f;0 <= g ? (e = (a.min.z - h.z) * g, g *= a.max.z - h.z) : (e = (a.max.z - h.z) * g, g *= a.min.z - h.z);if (c > g || e > d) return null;if (e > c || c !== c) c = e;if (g < d || d !== d) d = g;return 0 > d ? null : this.at(0 <= c ? c : d, b);
    }, intersectsBox: function () {
      var a = new q();return function (b) {
        return null !== this.intersectBox(b, a);
      };
    }(), intersectTriangle: function () {
      var a = new q(),
          b = new q(),
          c = new q(),
          d = new q();return function (e, f, g, h, k) {
        b.subVectors(f, e);c.subVectors(g, e);d.crossVectors(b, c);f = this.direction.dot(d);if (0 < f) {
          if (h) return null;h = 1;
        } else if (0 > f) h = -1, f = -f;else return null;a.subVectors(this.origin, e);e = h * this.direction.dot(c.crossVectors(a, c));if (0 > e) return null;g = h * this.direction.dot(b.cross(a));if (0 > g || e + g > f) return null;e = -h * a.dot(d);return 0 > e ? null : this.at(e / f, k);
      };
    }(), applyMatrix4: function applyMatrix4(a) {
      this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);
      this.direction.sub(this.origin);this.direction.normalize();return this;
    }, equals: function equals(a) {
      return a.origin.equals(this.origin) && a.direction.equals(this.direction);
    } };bb.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");bb.DefaultOrder = "XYZ";bb.prototype = { constructor: bb, isEuler: !0, get x() {
      return this._x;
    }, set x(a) {
      this._x = a;this.onChangeCallback();
    }, get y() {
      return this._y;
    }, set y(a) {
      this._y = a;this.onChangeCallback();
    }, get z() {
      return this._z;
    }, set z(a) {
      this._z = a;this.onChangeCallback();
    }, get order() {
      return this._order;
    },
    set order(a) {
      this._order = a;this.onChangeCallback();
    }, set: function set(a, b, c, d) {
      this._x = a;this._y = b;this._z = c;this._order = d || this._order;this.onChangeCallback();return this;
    }, clone: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }, copy: function copy(a) {
      this._x = a._x;this._y = a._y;this._z = a._z;this._order = a._order;this.onChangeCallback();return this;
    }, setFromRotationMatrix: function setFromRotationMatrix(a, b, c) {
      var d = T.clamp,
          e = a.elements;a = e[0];var f = e[4],
          g = e[8],
          h = e[1],
          k = e[5],
          m = e[9],
          l = e[2],
          n = e[6],
          e = e[10];b = b || this._order;"XYZ" === b ? (this._y = Math.asin(d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(-m, e), this._z = Math.atan2(-f, a)) : (this._x = Math.atan2(n, k), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._y = Math.atan2(g, e), this._z = Math.atan2(h, k)) : (this._y = Math.atan2(-l, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(n, -1, 1)), .99999 > Math.abs(n) ? (this._y = Math.atan2(-l, e), this._z = Math.atan2(-f, k)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(l, -1, 1)), .99999 > Math.abs(l) ? (this._x = Math.atan2(n, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-f, k))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-m, k), this._y = Math.atan2(-l, a)) : (this._x = 0, this._y = Math.atan2(g, e))) : "XZY" === b ? (this._z = Math.asin(-d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(n, k), this._y = Math.atan2(g, a)) : (this._x = Math.atan2(-m, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);this._order = b;if (!1 !== c) this.onChangeCallback();
      return this;
    }, setFromQuaternion: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new J());a.makeRotationFromQuaternion(b);return this.setFromRotationMatrix(a, c, d);
      };
    }(), setFromVector3: function setFromVector3(a, b) {
      return this.set(a.x, a.y, a.z, b || this._order);
    }, reorder: function () {
      var a = new ba();return function (b) {
        a.setFromEuler(this);return this.setFromQuaternion(a, b);
      };
    }(), equals: function equals(a) {
      return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
    }, fromArray: function fromArray(a) {
      this._x = a[0];this._y = a[1];
      this._z = a[2];void 0 !== a[3] && (this._order = a[3]);this.onChangeCallback();return this;
    }, toArray: function toArray(a, b) {
      void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._order;return a;
    }, toVector3: function toVector3(a) {
      return a ? a.set(this._x, this._y, this._z) : new q(this._x, this._y, this._z);
    }, onChange: function onChange(a) {
      this.onChangeCallback = a;return this;
    }, onChangeCallback: function onChangeCallback() {} };Yc.prototype = { constructor: Yc, set: function set(a) {
      this.mask = 1 << a;
    }, enable: function enable(a) {
      this.mask |= 1 << a;
    }, toggle: function toggle(a) {
      this.mask ^= 1 << a;
    }, disable: function disable(a) {
      this.mask &= ~(1 << a);
    }, test: function test(a) {
      return 0 !== (this.mask & a.mask);
    } };z.DefaultUp = new q(0, 1, 0);z.DefaultMatrixAutoUpdate = !0;Object.assign(z.prototype, sa.prototype, { isObject3D: !0, applyMatrix: function applyMatrix(a) {
      this.matrix.multiplyMatrices(a, this.matrix);this.matrix.decompose(this.position, this.quaternion, this.scale);
    }, setRotationFromAxisAngle: function setRotationFromAxisAngle(a, b) {
      this.quaternion.setFromAxisAngle(a, b);
    }, setRotationFromEuler: function setRotationFromEuler(a) {
      this.quaternion.setFromEuler(a, !0);
    }, setRotationFromMatrix: function setRotationFromMatrix(a) {
      this.quaternion.setFromRotationMatrix(a);
    },
    setRotationFromQuaternion: function setRotationFromQuaternion(a) {
      this.quaternion.copy(a);
    }, rotateOnAxis: function () {
      var a = new ba();return function (b, c) {
        a.setFromAxisAngle(b, c);this.quaternion.multiply(a);return this;
      };
    }(), rotateX: function () {
      var a = new q(1, 0, 0);return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(), rotateY: function () {
      var a = new q(0, 1, 0);return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(), rotateZ: function () {
      var a = new q(0, 0, 1);return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(), translateOnAxis: function () {
      var a = new q();
      return function (b, c) {
        a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this;
      };
    }(), translateX: function () {
      var a = new q(1, 0, 0);return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(), translateY: function () {
      var a = new q(0, 1, 0);return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(), translateZ: function () {
      var a = new q(0, 0, 1);return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(), localToWorld: function localToWorld(a) {
      return a.applyMatrix4(this.matrixWorld);
    }, worldToLocal: function () {
      var a = new J();return function (b) {
        return b.applyMatrix4(a.getInverse(this.matrixWorld));
      };
    }(), lookAt: function () {
      var a = new J();return function (b) {
        a.lookAt(b, this.position, this.up);this.quaternion.setFromRotationMatrix(a);
      };
    }(), add: function add(a) {
      if (1 < arguments.length) {
        for (var b = 0; b < arguments.length; b++) {
          this.add(arguments[b]);
        }return this;
      }if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({ type: "added" }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);return this;
    }, remove: function remove(a) {
      if (1 < arguments.length) for (var b = 0; b < arguments.length; b++) {
        this.remove(arguments[b]);
      }b = this.children.indexOf(a);-1 !== b && (a.parent = null, a.dispatchEvent({ type: "removed" }), this.children.splice(b, 1));
    }, getObjectById: function getObjectById(a) {
      return this.getObjectByProperty("id", a);
    }, getObjectByName: function getObjectByName(a) {
      return this.getObjectByProperty("name", a);
    }, getObjectByProperty: function getObjectByProperty(a, b) {
      if (this[a] === b) return this;for (var c = 0, d = this.children.length; c < d; c++) {
        var e = this.children[c].getObjectByProperty(a, b);if (void 0 !== e) return e;
      }
    }, getWorldPosition: function getWorldPosition(a) {
      a = a || new q();this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld);
    }, getWorldQuaternion: function () {
      var a = new q(),
          b = new q();return function (c) {
        c = c || new ba();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, c, b);return c;
      };
    }(), getWorldRotation: function () {
      var a = new ba();return function (b) {
        b = b || new bb();this.getWorldQuaternion(a);
        return b.setFromQuaternion(a, this.rotation.order, !1);
      };
    }(), getWorldScale: function () {
      var a = new q(),
          b = new ba();return function (c) {
        c = c || new q();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, b, c);return c;
      };
    }(), getWorldDirection: function () {
      var a = new ba();return function (b) {
        b = b || new q();this.getWorldQuaternion(a);return b.set(0, 0, 1).applyQuaternion(a);
      };
    }(), raycast: function raycast() {}, traverse: function traverse(a) {
      a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
        b[c].traverse(a);
      }
    }, traverseVisible: function traverseVisible(a) {
      if (!1 !== this.visible) {
        a(this);
        for (var b = this.children, c = 0, d = b.length; c < d; c++) {
          b[c].traverseVisible(a);
        }
      }
    }, traverseAncestors: function traverseAncestors(a) {
      var b = this.parent;null !== b && (a(b), b.traverseAncestors(a));
    }, updateMatrix: function updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);this.matrixWorldNeedsUpdate = !0;
    }, updateMatrixWorld: function updateMatrixWorld(a) {
      !0 === this.matrixAutoUpdate && this.updateMatrix();if (!0 === this.matrixWorldNeedsUpdate || !0 === a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;for (var b = this.children, c = 0, d = b.length; c < d; c++) {
        b[c].updateMatrixWorld(a);
      }
    }, toJSON: function toJSON(a) {
      function b(a) {
        var b = [],
            c;for (c in a) {
          var d = a[c];delete d.metadata;b.push(d);
        }return b;
      }var c = void 0 === a || "" === a,
          d = {};c && (a = { geometries: {}, materials: {}, textures: {}, images: {} }, d.metadata = { version: 4.4, type: "Object", generator: "Object3D.toJSON" });var e = {};e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);"{}" !== JSON.stringify(this.userData) && (e.userData = this.userData);!0 === this.castShadow && (e.castShadow = !0);!0 === this.receiveShadow && (e.receiveShadow = !0);!1 === this.visible && (e.visible = !1);e.matrix = this.matrix.toArray();void 0 !== this.geometry && (void 0 === a.geometries[this.geometry.uuid] && (a.geometries[this.geometry.uuid] = this.geometry.toJSON(a)), e.geometry = this.geometry.uuid);void 0 !== this.material && (void 0 === a.materials[this.material.uuid] && (a.materials[this.material.uuid] = this.material.toJSON(a)), e.material = this.material.uuid);if (0 < this.children.length) {
        e.children = [];for (var f = 0; f < this.children.length; f++) {
          e.children.push(this.children[f].toJSON(a).object);
        }
      }if (c) {
        var c = b(a.geometries),
            f = b(a.materials),
            g = b(a.textures);a = b(a.images);0 < c.length && (d.geometries = c);0 < f.length && (d.materials = f);0 < g.length && (d.textures = g);0 < a.length && (d.images = a);
      }d.object = e;return d;
    }, clone: function clone(a) {
      return new this.constructor().copy(this, a);
    }, copy: function copy(a, b) {
      void 0 === b && (b = !0);this.name = a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);
      this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate = a.matrixAutoUpdate;this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;this.visible = a.visible;this.castShadow = a.castShadow;this.receiveShadow = a.receiveShadow;this.frustumCulled = a.frustumCulled;this.renderOrder = a.renderOrder;this.userData = JSON.parse(JSON.stringify(a.userData));if (!0 === b) for (var c = 0; c < a.children.length; c++) {
        this.add(a.children[c].clone());
      }return this;
    } });var qe = 0;gb.prototype = { constructor: gb, set: function set(a, b) {
      this.start.copy(a);this.end.copy(b);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.start.copy(a.start);this.end.copy(a.end);return this;
    }, getCenter: function getCenter(a) {
      return (a || new q()).addVectors(this.start, this.end).multiplyScalar(.5);
    }, delta: function delta(a) {
      return (a || new q()).subVectors(this.end, this.start);
    }, distanceSq: function distanceSq() {
      return this.start.distanceToSquared(this.end);
    }, distance: function distance() {
      return this.start.distanceTo(this.end);
    }, at: function at(a, b) {
      var c = b || new q();
      return this.delta(c).multiplyScalar(a).add(this.start);
    }, closestPointToPointParameter: function () {
      var a = new q(),
          b = new q();return function (c, d) {
        a.subVectors(c, this.start);b.subVectors(this.end, this.start);var e = b.dot(b),
            e = b.dot(a) / e;d && (e = T.clamp(e, 0, 1));return e;
      };
    }(), closestPointToPoint: function closestPointToPoint(a, b, c) {
      a = this.closestPointToPointParameter(a, b);c = c || new q();return this.delta(c).multiplyScalar(a).add(this.start);
    }, applyMatrix4: function applyMatrix4(a) {
      this.start.applyMatrix4(a);this.end.applyMatrix4(a);return this;
    }, equals: function equals(a) {
      return a.start.equals(this.start) && a.end.equals(this.end);
    } };wa.normal = function () {
    var a = new q();return function (b, c, d, e) {
      e = e || new q();e.subVectors(d, c);a.subVectors(b, c);e.cross(a);b = e.lengthSq();return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
    };
  }();wa.barycoordFromPoint = function () {
    var a = new q(),
        b = new q(),
        c = new q();return function (d, e, f, g, h) {
      a.subVectors(g, e);b.subVectors(f, e);c.subVectors(d, e);d = a.dot(a);e = a.dot(b);f = a.dot(c);var k = b.dot(b);g = b.dot(c);var m = d * k - e * e;h = h || new q();if (0 === m) return h.set(-2, -1, -1);m = 1 / m;k = (k * f - e * g) * m;d = (d * g - e * f) * m;return h.set(1 - k - d, d, k);
    };
  }();wa.containsPoint = function () {
    var a = new q();return function (b, c, d, e) {
      b = wa.barycoordFromPoint(b, c, d, e, a);return 0 <= b.x && 0 <= b.y && 1 >= b.x + b.y;
    };
  }();wa.prototype = { constructor: wa, set: function set(a, b, c) {
      this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;
    }, setFromPointsAndIndices: function setFromPointsAndIndices(a, b, c, d) {
      this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);
      return this;
    }, area: function () {
      var a = new q(),
          b = new q();return function () {
        a.subVectors(this.c, this.b);b.subVectors(this.a, this.b);return .5 * a.cross(b).length();
      };
    }(), midpoint: function midpoint(a) {
      return (a || new q()).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }, normal: function normal(a) {
      return wa.normal(this.a, this.b, this.c, a);
    }, plane: function plane(a) {
      return (a || new va()).setFromCoplanarPoints(this.a, this.b, this.c);
    }, barycoordFromPoint: function barycoordFromPoint(a, b) {
      return wa.barycoordFromPoint(a, this.a, this.b, this.c, b);
    }, containsPoint: function containsPoint(a) {
      return wa.containsPoint(a, this.a, this.b, this.c);
    }, closestPointToPoint: function () {
      var a, b, c, d;return function (e, f) {
        void 0 === a && (a = new va(), b = [new gb(), new gb(), new gb()], c = new q(), d = new q());var g = f || new q(),
            h = Infinity;a.setFromCoplanarPoints(this.a, this.b, this.c);a.projectPoint(e, c);if (!0 === this.containsPoint(c)) g.copy(c);else {
          b[0].set(this.a, this.b);b[1].set(this.b, this.c);b[2].set(this.c, this.a);for (var k = 0; k < b.length; k++) {
            b[k].closestPointToPoint(c, !0, d);var m = c.distanceToSquared(d);m < h && (h = m, g.copy(d));
          }
        }return g;
      };
    }(), equals: function equals(a) {
      return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
    } };ea.prototype = { constructor: ea, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.a = a.a;this.b = a.b;this.c = a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex = a.materialIndex;for (var b = 0, c = a.vertexNormals.length; b < c; b++) {
        this.vertexNormals[b] = a.vertexNormals[b].clone();
      }b = 0;for (c = a.vertexColors.length; b < c; b++) {
        this.vertexColors[b] = a.vertexColors[b].clone();
      }return this;
    } };Ma.prototype = Object.create(U.prototype);Ma.prototype.constructor = Ma;Ma.prototype.isMeshBasicMaterial = !0;Ma.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;return this;
  };C.prototype = { constructor: C, isBufferAttribute: !0, set needsUpdate(a) {
      !0 === a && this.version++;
    }, setArray: function setArray(a) {
      if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count = void 0 !== a ? a.length / this.itemSize : 0;this.array = a;
    }, setDynamic: function setDynamic(a) {
      this.dynamic = a;return this;
    }, copy: function copy(a) {
      this.array = new a.array.constructor(a.array);this.itemSize = a.itemSize;this.count = a.count;this.normalized = a.normalized;this.dynamic = a.dynamic;return this;
    }, copyAt: function copyAt(a, b, c) {
      a *= this.itemSize;c *= b.itemSize;for (var d = 0, e = this.itemSize; d < e; d++) {
        this.array[a + d] = b.array[c + d];
      }return this;
    }, copyArray: function copyArray(a) {
      this.array.set(a);return this;
    }, copyColorsArray: function copyColorsArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), f = new O());b[c++] = f.r;b[c++] = f.g;b[c++] = f.b;
      }return this;
    }, copyIndicesArray: function copyIndicesArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];b[c++] = f.a;b[c++] = f.b;b[c++] = f.c;
      }return this;
    }, copyVector2sArray: function copyVector2sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), f = new B());b[c++] = f.x;b[c++] = f.y;
      }return this;
    }, copyVector3sArray: function copyVector3sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), f = new q());b[c++] = f.x;b[c++] = f.y;b[c++] = f.z;
      }return this;
    }, copyVector4sArray: function copyVector4sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), f = new ga());b[c++] = f.x;b[c++] = f.y;b[c++] = f.z;b[c++] = f.w;
      }return this;
    }, set: function set(a, b) {
      void 0 === b && (b = 0);this.array.set(a, b);return this;
    }, getX: function getX(a) {
      return this.array[a * this.itemSize];
    }, setX: function setX(a, b) {
      this.array[a * this.itemSize] = b;return this;
    }, getY: function getY(a) {
      return this.array[a * this.itemSize + 1];
    }, setY: function setY(a, b) {
      this.array[a * this.itemSize + 1] = b;return this;
    }, getZ: function getZ(a) {
      return this.array[a * this.itemSize + 2];
    }, setZ: function setZ(a, b) {
      this.array[a * this.itemSize + 2] = b;return this;
    }, getW: function getW(a) {
      return this.array[a * this.itemSize + 3];
    }, setW: function setW(a, b) {
      this.array[a * this.itemSize + 3] = b;return this;
    }, setXY: function setXY(a, b, c) {
      a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;return this;
    }, setXYZ: function setXYZ(a, b, c, d) {
      a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;return this;
    }, setXYZW: function setXYZW(a, b, c, d, e) {
      a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;this.array[a + 3] = e;return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    } };Object.assign(Q.prototype, sa.prototype, { isGeometry: !0, applyMatrix: function applyMatrix(a) {
      for (var b = new Ia().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) {
        this.vertices[c].applyMatrix4(a);
      }c = 0;for (d = this.faces.length; c < d; c++) {
        a = this.faces[c];a.normal.applyMatrix3(b).normalize();for (var e = 0, f = a.vertexNormals.length; e < f; e++) {
          a.vertexNormals[e].applyMatrix3(b).normalize();
        }
      }null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();this.normalsNeedUpdate = this.verticesNeedUpdate = !0;return this;
    }, rotateX: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationX(b);this.applyMatrix(a);return this;
      };
    }(), rotateY: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationY(b);this.applyMatrix(a);return this;
      };
    }(), rotateZ: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationZ(b);this.applyMatrix(a);return this;
      };
    }(), translate: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new J());a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
      };
    }(), scale: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new J());a.makeScale(b, c, d);this.applyMatrix(a);return this;
      };
    }(), lookAt: function () {
      var a;return function (b) {
        void 0 === a && (a = new z());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
      };
    }(), fromBufferGeometry: function fromBufferGeometry(a) {
      function b(a, b, d, e) {
        var f = void 0 !== g ? [l[a].clone(), l[b].clone(), l[d].clone()] : [],
            r = void 0 !== h ? [c.colors[a].clone(), c.colors[b].clone(), c.colors[d].clone()] : [];e = new ea(a, b, d, f, r, e);c.faces.push(e);void 0 !== k && c.faceVertexUvs[0].push([n[a].clone(), n[b].clone(), n[d].clone()]);void 0 !== m && c.faceVertexUvs[1].push([p[a].clone(), p[b].clone(), p[d].clone()]);
      }var c = this,
          d = null !== a.index ? a.index.array : void 0,
          e = a.attributes,
          f = e.position.array,
          g = void 0 !== e.normal ? e.normal.array : void 0,
          h = void 0 !== e.color ? e.color.array : void 0,
          k = void 0 !== e.uv ? e.uv.array : void 0,
          m = void 0 !== e.uv2 ? e.uv2.array : void 0;void 0 !== m && (this.faceVertexUvs[1] = []);for (var l = [], n = [], p = [], r = e = 0; e < f.length; e += 3, r += 2) {
        c.vertices.push(new q(f[e], f[e + 1], f[e + 2])), void 0 !== g && l.push(new q(g[e], g[e + 1], g[e + 2])), void 0 !== h && c.colors.push(new O(h[e], h[e + 1], h[e + 2])), void 0 !== k && n.push(new B(k[r], k[r + 1])), void 0 !== m && p.push(new B(m[r], m[r + 1]));
      }if (void 0 !== d) {
        if (f = a.groups, 0 < f.length) for (e = 0; e < f.length; e++) {
          for (var x = f[e], t = x.start, D = x.count, r = t, t = t + D; r < t; r += 3) {
            b(d[r], d[r + 1], d[r + 2], x.materialIndex);
          }
        } else for (e = 0; e < d.length; e += 3) {
          b(d[e], d[e + 1], d[e + 2]);
        }
      } else for (e = 0; e < f.length / 3; e += 3) {
        b(e, e + 1, e + 2);
      }this.computeFaceNormals();null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());return this;
    }, center: function center() {
      this.computeBoundingBox();var a = this.boundingBox.getCenter().negate();this.translate(a.x, a.y, a.z);return a;
    }, normalize: function normalize() {
      this.computeBoundingSphere();var a = this.boundingSphere.center,
          b = this.boundingSphere.radius,
          b = 0 === b ? 1 : 1 / b,
          c = new J();c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);this.applyMatrix(c);return this;
    }, computeFaceNormals: function computeFaceNormals() {
      for (var a = new q(), b = new q(), c = 0, d = this.faces.length; c < d; c++) {
        var e = this.faces[c],
            f = this.vertices[e.a],
            g = this.vertices[e.b];a.subVectors(this.vertices[e.c], g);b.subVectors(f, g);a.cross(b);a.normalize();e.normal.copy(a);
      }
    }, computeVertexNormals: function computeVertexNormals(a) {
      void 0 === a && (a = !0);var b, c, d;d = Array(this.vertices.length);b = 0;for (c = this.vertices.length; b < c; b++) {
        d[b] = new q();
      }if (a) {
        var e,
            f,
            g,
            h = new q(),
            k = new q();a = 0;for (b = this.faces.length; a < b; a++) {
          c = this.faces[a], e = this.vertices[c.a], f = this.vertices[c.b], g = this.vertices[c.c], h.subVectors(g, f), k.subVectors(e, f), h.cross(k), d[c.a].add(h), d[c.b].add(h), d[c.c].add(h);
        }
      } else for (this.computeFaceNormals(), a = 0, b = this.faces.length; a < b; a++) {
        c = this.faces[a], d[c.a].add(c.normal), d[c.b].add(c.normal), d[c.c].add(c.normal);
      }b = 0;for (c = this.vertices.length; b < c; b++) {
        d[b].normalize();
      }a = 0;for (b = this.faces.length; a < b; a++) {
        c = this.faces[a], e = c.vertexNormals, 3 === e.length ? (e[0].copy(d[c.a]), e[1].copy(d[c.b]), e[2].copy(d[c.c])) : (e[0] = d[c.a].clone(), e[1] = d[c.b].clone(), e[2] = d[c.c].clone());
      }0 < this.faces.length && (this.normalsNeedUpdate = !0);
    }, computeFlatVertexNormals: function computeFlatVertexNormals() {
      var a, b, c;this.computeFaceNormals();a = 0;for (b = this.faces.length; a < b; a++) {
        c = this.faces[a];var d = c.vertexNormals;3 === d.length ? (d[0].copy(c.normal), d[1].copy(c.normal), d[2].copy(c.normal)) : (d[0] = c.normal.clone(), d[1] = c.normal.clone(), d[2] = c.normal.clone());
      }0 < this.faces.length && (this.normalsNeedUpdate = !0);
    }, computeMorphNormals: function computeMorphNormals() {
      var a, b, c, d, e;c = 0;for (d = this.faces.length; c < d; c++) {
        for (e = this.faces[c], e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone(), e.__originalVertexNormals || (e.__originalVertexNormals = []), a = 0, b = e.vertexNormals.length; a < b; a++) {
          e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : e.__originalVertexNormals[a] = e.vertexNormals[a].clone();
        }
      }var f = new Q();f.faces = this.faces;a = 0;for (b = this.morphTargets.length; a < b; a++) {
        if (!this.morphNormals[a]) {
          this.morphNormals[a] = {};this.morphNormals[a].faceNormals = [];this.morphNormals[a].vertexNormals = [];e = this.morphNormals[a].faceNormals;var g = this.morphNormals[a].vertexNormals,
              h,
              k;c = 0;for (d = this.faces.length; c < d; c++) {
            h = new q(), k = { a: new q(), b: new q(), c: new q() }, e.push(h), g.push(k);
          }
        }g = this.morphNormals[a];f.vertices = this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c = 0;for (d = this.faces.length; c < d; c++) {
          e = this.faces[c], h = g.faceNormals[c], k = g.vertexNormals[c], h.copy(e.normal), k.a.copy(e.vertexNormals[0]), k.b.copy(e.vertexNormals[1]), k.c.copy(e.vertexNormals[2]);
        }
      }c = 0;for (d = this.faces.length; c < d; c++) {
        e = this.faces[c], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
      }
    }, computeTangents: function computeTangents() {
      console.warn("THREE.Geometry: .computeTangents() has been removed.");
    }, computeLineDistances: function computeLineDistances() {
      for (var a = 0, b = this.vertices, c = 0, d = b.length; c < d; c++) {
        0 < c && (a += b[c].distanceTo(b[c - 1])), this.lineDistances[c] = a;
      }
    }, computeBoundingBox: function computeBoundingBox() {
      null === this.boundingBox && (this.boundingBox = new Ba());this.boundingBox.setFromPoints(this.vertices);
    }, computeBoundingSphere: function computeBoundingSphere() {
      null === this.boundingSphere && (this.boundingSphere = new Ca());this.boundingSphere.setFromPoints(this.vertices);
    }, merge: function merge(a, b, c) {
      if (!1 === (a && a.isGeometry)) console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);else {
        var d,
            e = this.vertices.length,
            f = this.vertices,
            g = a.vertices,
            h = this.faces,
            k = a.faces,
            m = this.faceVertexUvs[0],
            l = a.faceVertexUvs[0],
            n = this.colors,
            p = a.colors;void 0 === c && (c = 0);void 0 !== b && (d = new Ia().getNormalMatrix(b));a = 0;for (var r = g.length; a < r; a++) {
          var q = g[a].clone();void 0 !== b && q.applyMatrix4(b);f.push(q);
        }a = 0;for (r = p.length; a < r; a++) {
          n.push(p[a].clone());
        }a = 0;for (r = k.length; a < r; a++) {
          var g = k[a],
              t = g.vertexNormals,
              p = g.vertexColors,
              n = new ea(g.a + e, g.b + e, g.c + e);n.normal.copy(g.normal);void 0 !== d && n.normal.applyMatrix3(d).normalize();b = 0;for (f = t.length; b < f; b++) {
            q = t[b].clone(), void 0 !== d && q.applyMatrix3(d).normalize(), n.vertexNormals.push(q);
          }n.color.copy(g.color);
          b = 0;for (f = p.length; b < f; b++) {
            q = p[b], n.vertexColors.push(q.clone());
          }n.materialIndex = g.materialIndex + c;h.push(n);
        }a = 0;for (r = l.length; a < r; a++) {
          if (c = l[a], d = [], void 0 !== c) {
            b = 0;for (f = c.length; b < f; b++) {
              d.push(c[b].clone());
            }m.push(d);
          }
        }
      }
    }, mergeMesh: function mergeMesh(a) {
      !1 === (a && a.isMesh) ? console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a) : (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix));
    }, mergeVertices: function mergeVertices() {
      var a = {},
          b = [],
          c = [],
          d,
          e = Math.pow(10, 4),
          f,
          g;f = 0;for (g = this.vertices.length; f < g; f++) {
        d = this.vertices[f], d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e), void 0 === a[d] ? (a[d] = f, b.push(this.vertices[f]), c[f] = b.length - 1) : c[f] = c[a[d]];
      }a = [];f = 0;for (g = this.faces.length; f < g; f++) {
        for (e = this.faces[f], e.a = c[e.a], e.b = c[e.b], e.c = c[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++) {
          if (e[d] === e[(d + 1) % 3]) {
            a.push(f);break;
          }
        }
      }for (f = a.length - 1; 0 <= f; f--) {
        for (e = a[f], this.faces.splice(e, 1), c = 0, g = this.faceVertexUvs.length; c < g; c++) {
          this.faceVertexUvs[c].splice(e, 1);
        }
      }f = this.vertices.length - b.length;this.vertices = b;return f;
    }, sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {
      for (var a = this.faces, b = a.length, c = 0; c < b; c++) {
        a[c]._id = c;
      }a.sort(function (a, b) {
        return a.materialIndex - b.materialIndex;
      });var d = this.faceVertexUvs[0],
          e = this.faceVertexUvs[1],
          f,
          g;d && d.length === b && (f = []);e && e.length === b && (g = []);for (c = 0; c < b; c++) {
        var h = a[c]._id;f && f.push(d[h]);g && g.push(e[h]);
      }f && (this.faceVertexUvs[0] = f);g && (this.faceVertexUvs[1] = g);
    }, toJSON: function toJSON() {
      function a(a, b, c) {
        return c ? a | 1 << b : a & ~(1 << b);
      }function b(a) {
        var b = a.x.toString() + a.y.toString() + a.z.toString();if (void 0 !== m[b]) return m[b];m[b] = k.length / 3;k.push(a.x, a.y, a.z);return m[b];
      }function c(a) {
        var b = a.r.toString() + a.g.toString() + a.b.toString();if (void 0 !== n[b]) return n[b];n[b] = l.length;l.push(a.getHex());return n[b];
      }function d(a) {
        var b = a.x.toString() + a.y.toString();if (void 0 !== r[b]) return r[b];r[b] = p.length / 2;p.push(a.x, a.y);return r[b];
      }var e = { metadata: { version: 4.4, type: "Geometry", generator: "Geometry.toJSON" } };e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);if (void 0 !== this.parameters) {
        var f = this.parameters,
            g;for (g in f) {
          void 0 !== f[g] && (e[g] = f[g]);
        }return e;
      }f = [];for (g = 0; g < this.vertices.length; g++) {
        var h = this.vertices[g];f.push(h.x, h.y, h.z);
      }var h = [],
          k = [],
          m = {},
          l = [],
          n = {},
          p = [],
          r = {};for (g = 0; g < this.faces.length; g++) {
        var q = this.faces[g],
            t = void 0 !== this.faceVertexUvs[0][g],
            D = 0 < q.normal.length(),
            u = 0 < q.vertexNormals.length,
            v = 1 !== q.color.r || 1 !== q.color.g || 1 !== q.color.b,
            I = 0 < q.vertexColors.length,
            y = 0,
            y = a(y, 0, 0),
            y = a(y, 1, !0),
            y = a(y, 2, !1),
            y = a(y, 3, t),
            y = a(y, 4, D),
            y = a(y, 5, u),
            y = a(y, 6, v),
            y = a(y, 7, I);h.push(y);h.push(q.a, q.b, q.c);h.push(q.materialIndex);t && (t = this.faceVertexUvs[0][g], h.push(d(t[0]), d(t[1]), d(t[2])));D && h.push(b(q.normal));u && (D = q.vertexNormals, h.push(b(D[0]), b(D[1]), b(D[2])));v && h.push(c(q.color));I && (q = q.vertexColors, h.push(c(q[0]), c(q[1]), c(q[2])));
      }e.data = {};e.data.vertices = f;e.data.normals = k;0 < l.length && (e.data.colors = l);0 < p.length && (e.data.uvs = [p]);e.data.faces = h;return e;
    }, clone: function clone() {
      return new Q().copy(this);
    }, copy: function copy(a) {
      this.vertices = [];this.faces = [];this.faceVertexUvs = [[]];this.colors = [];for (var b = a.vertices, c = 0, d = b.length; c < d; c++) {
        this.vertices.push(b[c].clone());
      }b = a.colors;c = 0;for (d = b.length; c < d; c++) {
        this.colors.push(b[c].clone());
      }b = a.faces;c = 0;for (d = b.length; c < d; c++) {
        this.faces.push(b[c].clone());
      }c = 0;for (d = a.faceVertexUvs.length; c < d; c++) {
        b = a.faceVertexUvs[c];void 0 === this.faceVertexUvs[c] && (this.faceVertexUvs[c] = []);for (var e = 0, f = b.length; e < f; e++) {
          for (var g = b[e], h = [], k = 0, m = g.length; k < m; k++) {
            h.push(g[k].clone());
          }this.faceVertexUvs[c].push(h);
        }
      }return this;
    },
    dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    } });var ad = 0;Object.assign(re.prototype, sa.prototype, { computeBoundingBox: Q.prototype.computeBoundingBox, computeBoundingSphere: Q.prototype.computeBoundingSphere, computeFaceNormals: function computeFaceNormals() {
      console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.");
    }, computeVertexNormals: function computeVertexNormals() {
      console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.");
    }, computeGroups: function computeGroups(a) {
      var b,
          c = [],
          d;a = a.faces;for (var e = 0; e < a.length; e++) {
        var f = a[e];f.materialIndex !== d && (d = f.materialIndex, void 0 !== b && (b.count = 3 * e - b.start, c.push(b)), b = { start: 3 * e, materialIndex: d });
      }void 0 !== b && (b.count = 3 * e - b.start, c.push(b));this.groups = c;
    }, fromGeometry: function fromGeometry(a) {
      var b = a.faces,
          c = a.vertices,
          d = a.faceVertexUvs,
          e = d[0] && 0 < d[0].length,
          f = d[1] && 0 < d[1].length,
          g = a.morphTargets,
          h = g.length,
          k;if (0 < h) {
        k = [];for (var m = 0; m < h; m++) {
          k[m] = [];
        }this.morphTargets.position = k;
      }var l = a.morphNormals,
          n = l.length,
          p;if (0 < n) {
        p = [];for (m = 0; m < n; m++) {
          p[m] = [];
        }this.morphTargets.normal = p;
      }for (var r = a.skinIndices, q = a.skinWeights, t = r.length === c.length, D = q.length === c.length, m = 0; m < b.length; m++) {
        var u = b[m];this.vertices.push(c[u.a], c[u.b], c[u.c]);var v = u.vertexNormals;3 === v.length ? this.normals.push(v[0], v[1], v[2]) : (v = u.normal, this.normals.push(v, v, v));v = u.vertexColors;3 === v.length ? this.colors.push(v[0], v[1], v[2]) : (v = u.color, this.colors.push(v, v, v));!0 === e && (v = d[0][m], void 0 !== v ? this.uvs.push(v[0], v[1], v[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", m), this.uvs.push(new B(), new B(), new B())));!0 === f && (v = d[1][m], void 0 !== v ? this.uvs2.push(v[0], v[1], v[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", m), this.uvs2.push(new B(), new B(), new B())));for (v = 0; v < h; v++) {
          var I = g[v].vertices;k[v].push(I[u.a], I[u.b], I[u.c]);
        }for (v = 0; v < n; v++) {
          I = l[v].vertexNormals[m], p[v].push(I.a, I.b, I.c);
        }t && this.skinIndices.push(r[u.a], r[u.b], r[u.c]);D && this.skinWeights.push(q[u.a], q[u.b], q[u.c]);
      }this.computeGroups(a);this.verticesNeedUpdate = a.verticesNeedUpdate;
      this.normalsNeedUpdate = a.normalsNeedUpdate;this.colorsNeedUpdate = a.colorsNeedUpdate;this.uvsNeedUpdate = a.uvsNeedUpdate;this.groupsNeedUpdate = a.groupsNeedUpdate;return this;
    }, dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    } });Object.assign(G.prototype, sa.prototype, { isBufferGeometry: !0, getIndex: function getIndex() {
      return this.index;
    }, setIndex: function setIndex(a) {
      this.index = a;
    }, addAttribute: function addAttribute(a, b, c) {
      if (!1 === (b && b.isBufferAttribute) && !1 === (b && b.isInterleavedBufferAttribute)) console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new C(b, c));else if ("index" === a) console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b);else return this.attributes[a] = b, this;
    }, getAttribute: function getAttribute(a) {
      return this.attributes[a];
    }, removeAttribute: function removeAttribute(a) {
      delete this.attributes[a];return this;
    }, addGroup: function addGroup(a, b, c) {
      this.groups.push({ start: a, count: b, materialIndex: void 0 !== c ? c : 0 });
    }, clearGroups: function clearGroups() {
      this.groups = [];
    }, setDrawRange: function setDrawRange(a, b) {
      this.drawRange.start = a;this.drawRange.count = b;
    }, applyMatrix: function applyMatrix(a) {
      var b = this.attributes.position;void 0 !== b && (a.applyToVector3Array(b.array), b.needsUpdate = !0);b = this.attributes.normal;void 0 !== b && (new Ia().getNormalMatrix(a).applyToVector3Array(b.array), b.needsUpdate = !0);null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();return this;
    }, rotateX: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationX(b);this.applyMatrix(a);return this;
      };
    }(), rotateY: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationY(b);this.applyMatrix(a);return this;
      };
    }(), rotateZ: function () {
      var a;return function (b) {
        void 0 === a && (a = new J());a.makeRotationZ(b);this.applyMatrix(a);return this;
      };
    }(), translate: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new J());a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
      };
    }(), scale: function () {
      var a;return function (b, c, d) {
        void 0 === a && (a = new J());a.makeScale(b, c, d);this.applyMatrix(a);return this;
      };
    }(), lookAt: function () {
      var a;return function (b) {
        void 0 === a && (a = new z());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
      };
    }(), center: function center() {
      this.computeBoundingBox();var a = this.boundingBox.getCenter().negate();this.translate(a.x, a.y, a.z);return a;
    }, setFromObject: function setFromObject(a) {
      var b = a.geometry;if (a && a.isPoints || a && a.isLine) {
        a = new ha(3 * b.vertices.length, 3);var c = new ha(3 * b.colors.length, 3);this.addAttribute("position", a.copyVector3sArray(b.vertices));this.addAttribute("color", c.copyColorsArray(b.colors));b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new ha(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
      } else a && a.isMesh && b && b.isGeometry && this.fromGeometry(b);return this;
    }, updateFromObject: function updateFromObject(a) {
      var b = a.geometry;if (a && a.isMesh) {
        var c = b.__directGeometry;!0 === b.elementsNeedUpdate && (c = void 0, b.elementsNeedUpdate = !1);if (void 0 === c) return this.fromGeometry(b);c.verticesNeedUpdate = b.verticesNeedUpdate;c.normalsNeedUpdate = b.normalsNeedUpdate;c.colorsNeedUpdate = b.colorsNeedUpdate;c.uvsNeedUpdate = b.uvsNeedUpdate;c.groupsNeedUpdate = b.groupsNeedUpdate;b.verticesNeedUpdate = !1;b.normalsNeedUpdate = !1;b.colorsNeedUpdate = !1;b.uvsNeedUpdate = !1;b.groupsNeedUpdate = !1;b = c;
      }!0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);!0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);!0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);return this;
    }, fromGeometry: function fromGeometry(a) {
      a.__directGeometry = new re().fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry);
    }, fromDirectGeometry: function fromDirectGeometry(a) {
      var b = new Float32Array(3 * a.vertices.length);this.addAttribute("position", new C(b, 3).copyVector3sArray(a.vertices));0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new C(b, 3).copyVector3sArray(a.normals)));0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new C(b, 3).copyColorsArray(a.colors)));0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new C(b, 2).copyVector2sArray(a.uvs)));0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new C(b, 2).copyVector2sArray(a.uvs2)));0 < a.indices.length && (b = new (65535 < a.vertices.length ? Uint32Array : Uint16Array)(3 * a.indices.length), this.setIndex(new C(b, 1).copyIndicesArray(a.indices)));this.groups = a.groups;for (var c in a.morphTargets) {
        for (var b = [], d = a.morphTargets[c], e = 0, f = d.length; e < f; e++) {
          var g = d[e],
              h = new ha(3 * g.length, 3);b.push(h.copyVector3sArray(g));
        }this.morphAttributes[c] = b;
      }0 < a.skinIndices.length && (c = new ha(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));0 < a.skinWeights.length && (c = new ha(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());return this;
    }, computeBoundingBox: function computeBoundingBox() {
      null === this.boundingBox && (this.boundingBox = new Ba());var a = this.attributes.position.array;void 0 !== a ? this.boundingBox.setFromArray(a) : this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }, computeBoundingSphere: function () {
      var a = new Ba(),
          b = new q();return function () {
        null === this.boundingSphere && (this.boundingSphere = new Ca());var c = this.attributes.position;if (c) {
          var c = c.array,
              d = this.boundingSphere.center;a.setFromArray(c);a.getCenter(d);for (var e = 0, f = 0, g = c.length; f < g; f += 3) {
            b.fromArray(c, f), e = Math.max(e, d.distanceToSquared(b));
          }this.boundingSphere.radius = Math.sqrt(e);isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      };
    }(), computeFaceNormals: function computeFaceNormals() {}, computeVertexNormals: function computeVertexNormals() {
      var a = this.index,
          b = this.attributes,
          c = this.groups;if (b.position) {
        var d = b.position.array;if (void 0 === b.normal) this.addAttribute("normal", new C(new Float32Array(d.length), 3));else for (var e = b.normal.array, f = 0, g = e.length; f < g; f++) {
          e[f] = 0;
        }var e = b.normal.array,
            h,
            k,
            m,
            l = new q(),
            n = new q(),
            p = new q(),
            r = new q(),
            x = new q();if (a) {
          a = a.array;0 === c.length && this.addGroup(0, a.length);for (var t = 0, D = c.length; t < D; ++t) {
            for (f = c[t], g = f.start, h = f.count, f = g, g += h; f < g; f += 3) {
              h = 3 * a[f + 0], k = 3 * a[f + 1], m = 3 * a[f + 2], l.fromArray(d, h), n.fromArray(d, k), p.fromArray(d, m), r.subVectors(p, n), x.subVectors(l, n), r.cross(x), e[h] += r.x, e[h + 1] += r.y, e[h + 2] += r.z, e[k] += r.x, e[k + 1] += r.y, e[k + 2] += r.z, e[m] += r.x, e[m + 1] += r.y, e[m + 2] += r.z;
            }
          }
        } else for (f = 0, g = d.length; f < g; f += 9) {
          l.fromArray(d, f), n.fromArray(d, f + 3), p.fromArray(d, f + 6), r.subVectors(p, n), x.subVectors(l, n), r.cross(x), e[f] = r.x, e[f + 1] = r.y, e[f + 2] = r.z, e[f + 3] = r.x, e[f + 4] = r.y, e[f + 5] = r.z, e[f + 6] = r.x, e[f + 7] = r.y, e[f + 8] = r.z;
        }this.normalizeNormals();b.normal.needsUpdate = !0;
      }
    }, merge: function merge(a, b) {
      if (!1 === (a && a.isBufferGeometry)) console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);else {
        void 0 === b && (b = 0);var c = this.attributes,
            d;for (d in c) {
          if (void 0 !== a.attributes[d]) for (var e = c[d].array, f = a.attributes[d], g = f.array, h = 0, f = f.itemSize * b; h < g.length; h++, f++) {
            e[f] = g[h];
          }
        }return this;
      }
    }, normalizeNormals: function normalizeNormals() {
      for (var a = this.attributes.normal.array, b, c, d, e = 0, f = a.length; e < f; e += 3) {
        b = a[e], c = a[e + 1], d = a[e + 2], b = 1 / Math.sqrt(b * b + c * c + d * d), a[e] *= b, a[e + 1] *= b, a[e + 2] *= b;
      }
    }, toNonIndexed: function toNonIndexed() {
      if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;var a = new G(),
          b = this.index.array,
          c = this.attributes,
          d;for (d in c) {
        for (var e = c[d], f = e.array, e = e.itemSize, g = new f.constructor(b.length * e), h, k = 0, m = 0, l = b.length; m < l; m++) {
          h = b[m] * e;for (var n = 0; n < e; n++) {
            g[k++] = f[h++];
          }
        }a.addAttribute(d, new C(g, e));
      }return a;
    }, toJSON: function toJSON() {
      var a = { metadata: { version: 4.4, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
      a.uuid = this.uuid;a.type = this.type;"" !== this.name && (a.name = this.name);if (void 0 !== this.parameters) {
        var b = this.parameters,
            c;for (c in b) {
          void 0 !== b[c] && (a[c] = b[c]);
        }return a;
      }a.data = { attributes: {} };var d = this.index;null !== d && (b = Array.prototype.slice.call(d.array), a.data.index = { type: d.array.constructor.name, array: b });d = this.attributes;for (c in d) {
        var e = d[c],
            b = Array.prototype.slice.call(e.array);a.data.attributes[c] = { itemSize: e.itemSize, type: e.array.constructor.name, array: b, normalized: e.normalized };
      }c = this.groups;
      0 < c.length && (a.data.groups = JSON.parse(JSON.stringify(c)));c = this.boundingSphere;null !== c && (a.data.boundingSphere = { center: c.center.toArray(), radius: c.radius });return a;
    }, clone: function clone() {
      return new G().copy(this);
    }, copy: function copy(a) {
      var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
          c;for (c in b) {
        this.addAttribute(c, b[c].clone());
      }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
        var d = a[c];this.addGroup(d.start, d.count, d.materialIndex);
      }return this;
    }, dispose: function dispose() {
      this.dispatchEvent({ type: "dispose" });
    } });
  G.MaxIndex = 65535;ya.prototype = Object.assign(Object.create(z.prototype), { constructor: ya, isMesh: !0, setDrawMode: function setDrawMode(a) {
      this.drawMode = a;
    }, copy: function copy(a) {
      z.prototype.copy.call(this, a);this.drawMode = a.drawMode;return this;
    }, updateMorphTargets: function updateMorphTargets() {
      var a = this.geometry.morphTargets;if (void 0 !== a && 0 < a.length) {
        this.morphTargetInfluences = [];this.morphTargetDictionary = {};for (var b = 0, c = a.length; b < c; b++) {
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a[b].name] = b;
        }
      }
    }, raycast: function () {
      function a(a, b, c, d, e, f, g) {
        wa.barycoordFromPoint(a, b, c, d, t);e.multiplyScalar(t.x);f.multiplyScalar(t.y);g.multiplyScalar(t.z);e.add(f).add(g);return e.clone();
      }function b(a, b, c, d, e, f, g) {
        var h = a.material;if (null === (1 === h.side ? c.intersectTriangle(f, e, d, !0, g) : c.intersectTriangle(d, e, f, 2 !== h.side, g))) return null;u.copy(g);u.applyMatrix4(a.matrixWorld);c = b.ray.origin.distanceTo(u);return c < b.near || c > b.far ? null : { distance: c, point: u.clone(), object: a };
      }function c(c, d, e, f, m, l, n, w) {
        g.fromArray(f, 3 * l);h.fromArray(f, 3 * n);k.fromArray(f, 3 * w);if (c = b(c, d, e, g, h, k, D)) m && (p.fromArray(m, 2 * l), r.fromArray(m, 2 * n), x.fromArray(m, 2 * w), c.uv = a(D, g, h, k, p, r, x)), c.face = new ea(l, n, w, wa.normal(g, h, k)), c.faceIndex = l;return c;
      }var d = new J(),
          e = new ab(),
          f = new Ca(),
          g = new q(),
          h = new q(),
          k = new q(),
          m = new q(),
          l = new q(),
          n = new q(),
          p = new B(),
          r = new B(),
          x = new B(),
          t = new q(),
          D = new q(),
          u = new q();return function (q, t) {
        var u = this.geometry,
            E = this.material,
            H = this.matrixWorld;if (void 0 !== E && (null === u.boundingSphere && u.computeBoundingSphere(), f.copy(u.boundingSphere), f.applyMatrix4(H), !1 !== q.ray.intersectsSphere(f) && (d.getInverse(H), e.copy(q.ray).applyMatrix4(d), null === u.boundingBox || !1 !== e.intersectsBox(u.boundingBox)))) {
          var F, M;if (u && u.isBufferGeometry) {
            var B,
                K,
                E = u.index,
                H = u.attributes,
                u = H.position.array;void 0 !== H.uv && (F = H.uv.array);if (null !== E) for (var H = E.array, z = 0, C = H.length; z < C; z += 3) {
              if (E = H[z], B = H[z + 1], K = H[z + 2], M = c(this, q, e, u, F, E, B, K)) M.faceIndex = Math.floor(z / 3), t.push(M);
            } else for (z = 0, C = u.length; z < C; z += 9) {
              if (E = z / 3, B = E + 1, K = E + 2, M = c(this, q, e, u, F, E, B, K)) M.index = E, t.push(M);
            }
          } else if (u && u.isGeometry) {
            var G,
                J,
                H = E && E.isMultiMaterial,
                z = !0 === H ? E.materials : null,
                C = u.vertices;B = u.faces;K = u.faceVertexUvs[0];0 < K.length && (F = K);for (var N = 0, P = B.length; N < P; N++) {
              var R = B[N];M = !0 === H ? z[R.materialIndex] : E;if (void 0 !== M) {
                K = C[R.a];G = C[R.b];J = C[R.c];if (!0 === M.morphTargets) {
                  M = u.morphTargets;var S = this.morphTargetInfluences;g.set(0, 0, 0);h.set(0, 0, 0);k.set(0, 0, 0);for (var Q = 0, V = M.length; Q < V; Q++) {
                    var O = S[Q];if (0 !== O) {
                      var L = M[Q].vertices;g.addScaledVector(m.subVectors(L[R.a], K), O);h.addScaledVector(l.subVectors(L[R.b], G), O);k.addScaledVector(n.subVectors(L[R.c], J), O);
                    }
                  }g.add(K);h.add(G);k.add(J);K = g;G = h;J = k;
                }if (M = b(this, q, e, K, G, J, D)) F && (S = F[N], p.copy(S[0]), r.copy(S[1]), x.copy(S[2]), M.uv = a(D, K, G, J, p, r, x)), M.face = R, M.faceIndex = N, t.push(M);
              }
            }
          }
        }
      };
    }(), clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    } });hb.prototype = Object.create(G.prototype);hb.prototype.constructor = hb;ib.prototype = Object.create(G.prototype);ib.prototype.constructor = ib;Z.prototype = Object.create(z.prototype);Z.prototype.constructor = Z;Z.prototype.isCamera = !0;Z.prototype.getWorldDirection = function () {
    var a = new ba();return function (b) {
      b = b || new q();this.getWorldQuaternion(a);return b.set(0, 0, -1).applyQuaternion(a);
    };
  }();Z.prototype.lookAt = function () {
    var a = new J();return function (b) {
      a.lookAt(this.position, b, this.up);this.quaternion.setFromRotationMatrix(a);
    };
  }();Z.prototype.clone = function () {
    return new this.constructor().copy(this);
  };Z.prototype.copy = function (a) {
    z.prototype.copy.call(this, a);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this;
  };
  Ea.prototype = Object.assign(Object.create(Z.prototype), { constructor: Ea, isPerspectiveCamera: !0, copy: function copy(a) {
      Z.prototype.copy.call(this, a);this.fov = a.fov;this.zoom = a.zoom;this.near = a.near;this.far = a.far;this.focus = a.focus;this.aspect = a.aspect;this.view = null === a.view ? null : Object.assign({}, a.view);this.filmGauge = a.filmGauge;this.filmOffset = a.filmOffset;return this;
    }, setFocalLength: function setFocalLength(a) {
      a = .5 * this.getFilmHeight() / a;this.fov = 2 * T.RAD2DEG * Math.atan(a);this.updateProjectionMatrix();
    }, getFocalLength: function getFocalLength() {
      var a = Math.tan(.5 * T.DEG2RAD * this.fov);return .5 * this.getFilmHeight() / a;
    }, getEffectiveFOV: function getEffectiveFOV() {
      return 2 * T.RAD2DEG * Math.atan(Math.tan(.5 * T.DEG2RAD * this.fov) / this.zoom);
    }, getFilmWidth: function getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }, getFilmHeight: function getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }, setViewOffset: function setViewOffset(a, b, c, d, e, f) {
      this.aspect = a / b;this.view = { fullWidth: a, fullHeight: b, offsetX: c, offsetY: d, width: e, height: f };this.updateProjectionMatrix();
    }, clearViewOffset: function clearViewOffset() {
      this.view = null;this.updateProjectionMatrix();
    }, updateProjectionMatrix: function updateProjectionMatrix() {
      var a = this.near,
          b = a * Math.tan(.5 * T.DEG2RAD * this.fov) / this.zoom,
          c = 2 * b,
          d = this.aspect * c,
          e = -.5 * d,
          f = this.view;if (null !== f) var g = f.fullWidth,
          h = f.fullHeight,
          e = e + f.offsetX * d / g,
          b = b - f.offsetY * c / h,
          d = f.width / g * d,
          c = f.height / h * c;f = this.filmOffset;0 !== f && (e += a * f / this.getFilmWidth());this.projectionMatrix.makeFrustum(e, e + d, b - c, b, a, this.far);
    }, toJSON: function toJSON(a) {
      a = z.prototype.toJSON.call(this, a);a.object.fov = this.fov;a.object.zoom = this.zoom;a.object.near = this.near;a.object.far = this.far;a.object.focus = this.focus;a.object.aspect = this.aspect;null !== this.view && (a.object.view = Object.assign({}, this.view));a.object.filmGauge = this.filmGauge;a.object.filmOffset = this.filmOffset;return a;
    } });Hb.prototype = Object.assign(Object.create(Z.prototype), { constructor: Hb, isOrthographicCamera: !0, copy: function copy(a) {
      Z.prototype.copy.call(this, a);this.left = a.left;this.right = a.right;this.top = a.top;this.bottom = a.bottom;this.near = a.near;this.far = a.far;this.zoom = a.zoom;this.view = null === a.view ? null : Object.assign({}, a.view);return this;
    }, setViewOffset: function setViewOffset(a, b, c, d, e, f) {
      this.view = { fullWidth: a, fullHeight: b, offsetX: c, offsetY: d, width: e, height: f };this.updateProjectionMatrix();
    }, clearViewOffset: function clearViewOffset() {
      this.view = null;this.updateProjectionMatrix();
    }, updateProjectionMatrix: function updateProjectionMatrix() {
      var a = (this.right - this.left) / (2 * this.zoom),
          b = (this.top - this.bottom) / (2 * this.zoom),
          c = (this.right + this.left) / 2,
          d = (this.top + this.bottom) / 2,
          e = c - a,
          c = c + a,
          a = d + b,
          b = d - b;if (null !== this.view) var c = this.zoom / (this.view.width / this.view.fullWidth),
          b = this.zoom / (this.view.height / this.view.fullHeight),
          f = (this.right - this.left) / this.view.width,
          d = (this.top - this.bottom) / this.view.height,
          e = e + this.view.offsetX / c * f,
          c = e + this.view.width / c * f,
          a = a - this.view.offsetY / b * d,
          b = a - this.view.height / b * d;this.projectionMatrix.makeOrthographic(e, c, a, b, this.near, this.far);
    }, toJSON: function toJSON(a) {
      a = z.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.left = this.left;a.object.right = this.right;a.object.top = this.top;a.object.bottom = this.bottom;a.object.near = this.near;a.object.far = this.far;null !== this.view && (a.object.view = Object.assign({}, this.view));return a;
    } });var sf = 0;Ib.prototype.isFogExp2 = !0;Ib.prototype.clone = function () {
    return new Ib(this.color.getHex(), this.density);
  };Ib.prototype.toJSON = function (a) {
    return { type: "FogExp2", color: this.color.getHex(), density: this.density };
  };Jb.prototype.isFog = !0;Jb.prototype.clone = function () {
    return new Jb(this.color.getHex(), this.near, this.far);
  };Jb.prototype.toJSON = function (a) {
    return { type: "Fog",
      color: this.color.getHex(), near: this.near, far: this.far };
  };jb.prototype = Object.create(z.prototype);jb.prototype.constructor = jb;jb.prototype.copy = function (a, b) {
    z.prototype.copy.call(this, a, b);null !== a.background && (this.background = a.background.clone());null !== a.fog && (this.fog = a.fog.clone());null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());this.autoUpdate = a.autoUpdate;this.matrixAutoUpdate = a.matrixAutoUpdate;return this;
  };jb.prototype.toJSON = function (a) {
    var b = z.prototype.toJSON.call(this, a);null !== this.background && (b.object.background = this.background.toJSON(a));null !== this.fog && (b.object.fog = this.fog.toJSON());return b;
  };Ed.prototype = Object.assign(Object.create(z.prototype), { constructor: Ed, isLensFlare: !0, copy: function copy(a) {
      z.prototype.copy.call(this, a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback = a.customUpdateCallback;for (var b = 0, c = a.lensFlares.length; b < c; b++) {
        this.lensFlares.push(a.lensFlares[b]);
      }return this;
    }, add: function add(a, b, c, d, e, f) {
      void 0 === b && (b = -1);void 0 === c && (c = 0);void 0 === f && (f = 1);void 0 === e && (e = new O(16777215));void 0 === d && (d = 1);c = Math.min(c, Math.max(0, c));this.lensFlares.push({ texture: a, size: b, distance: c, x: 0, y: 0, z: 0, scale: 1, rotation: 0, opacity: f, color: e, blending: d });
    }, updateLensFlares: function updateLensFlares() {
      var a,
          b = this.lensFlares.length,
          c,
          d = 2 * -this.positionScreen.x,
          e = 2 * -this.positionScreen.y;for (a = 0; a < b; a++) {
        c = this.lensFlares[a], c.x = this.positionScreen.x + d * c.distance, c.y = this.positionScreen.y + e * c.distance, c.wantedRotation = c.x * Math.PI * .25, c.rotation += .25 * (c.wantedRotation - c.rotation);
      }
    } });kb.prototype = Object.create(U.prototype);kb.prototype.constructor = kb;kb.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.rotation = a.rotation;return this;
  };mc.prototype = Object.assign(Object.create(z.prototype), { constructor: mc, isSprite: !0, raycast: function () {
      var a = new q();return function (b, c) {
        a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.distanceSqToPoint(a);d > this.scale.x * this.scale.y / 4 || c.push({ distance: Math.sqrt(d), point: this.position,
          face: null, object: this });
      };
    }(), clone: function clone() {
      return new this.constructor(this.material).copy(this);
    } });nc.prototype = Object.assign(Object.create(z.prototype), { constructor: nc, copy: function copy(a) {
      z.prototype.copy.call(this, a, !1);a = a.levels;for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];this.addLevel(d.object.clone(), d.distance);
      }return this;
    }, addLevel: function addLevel(a, b) {
      void 0 === b && (b = 0);b = Math.abs(b);for (var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++) {}c.splice(d, 0, { distance: b, object: a });this.add(a);
    }, getObjectForDistance: function getObjectForDistance(a) {
      for (var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++) {}return b[c - 1].object;
    }, raycast: function () {
      var a = new q();return function (b, c) {
        a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b, c);
      };
    }(), update: function () {
      var a = new q(),
          b = new q();return function (c) {
        var d = this.levels;if (1 < d.length) {
          a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c = a.distanceTo(b);d[0].object.visible = !0;for (var e = 1, f = d.length; e < f; e++) {
            if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;else break;
          }for (; e < f; e++) {
            d[e].object.visible = !1;
          }
        }
      };
    }(), toJSON: function toJSON(a) {
      a = z.prototype.toJSON.call(this, a);a.object.levels = [];for (var b = this.levels, c = 0, d = b.length; c < d; c++) {
        var e = b[c];a.object.levels.push({ object: e.object.uuid, distance: e.distance });
      }return a;
    } });lb.prototype = Object.create(da.prototype);lb.prototype.constructor = lb;lb.prototype.isDataTexture = !0;Object.assign(bd.prototype, { calculateInverses: function calculateInverses() {
      this.boneInverses = [];for (var a = 0, b = this.bones.length; a < b; a++) {
        var c = new J();this.bones[a] && c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c);
      }
    }, pose: function pose() {
      for (var a, b = 0, c = this.bones.length; b < c; b++) {
        (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
      }b = 0;for (c = this.bones.length; b < c; b++) {
        if (a = this.bones[b]) a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
      }
    }, update: function () {
      var a = new J();return function () {
        for (var b = 0, c = this.bones.length; b < c; b++) {
          a.multiplyMatrices(this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix, this.boneInverses[b]), a.toArray(this.boneMatrices, 16 * b);
        }this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
      };
    }(), clone: function clone() {
      return new bd(this.bones, this.boneInverses, this.useVertexTexture);
    } });cd.prototype = Object.assign(Object.create(z.prototype), { constructor: cd, isBone: !0, copy: function copy(a) {
      z.prototype.copy.call(this, a);this.skin = a.skin;return this;
    } });dd.prototype = Object.assign(Object.create(ya.prototype), { constructor: dd, isSkinnedMesh: !0, bind: function bind(a, b) {
      this.skeleton = a;void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b);
    }, pose: function pose() {
      this.skeleton.pose();
    }, normalizeSkinWeights: function normalizeSkinWeights() {
      if (this.geometry && this.geometry.isGeometry) for (var a = 0; a < this.geometry.skinWeights.length; a++) {
        var b = this.geometry.skinWeights[a],
            c = 1 / b.lengthManhattan();Infinity !== c ? b.multiplyScalar(c) : b.set(1, 0, 0, 0);
      } else if (this.geometry && this.geometry.isBufferGeometry) for (var b = new ga(), d = this.geometry.attributes.skinWeight, a = 0; a < d.count; a++) {
        b.x = d.getX(a), b.y = d.getY(a), b.z = d.getZ(a), b.w = d.getW(a), c = 1 / b.lengthManhattan(), Infinity !== c ? b.multiplyScalar(c) : b.set(1, 0, 0, 0), d.setXYZW(a, b.x, b.y, b.z, b.w);
      }
    }, updateMatrixWorld: function updateMatrixWorld(a) {
      ya.prototype.updateMatrixWorld.call(this, !0);"attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh unrecognized bindMode: " + this.bindMode);
    }, clone: function clone() {
      return new this.constructor(this.geometry, this.material, this.skeleton.useVertexTexture).copy(this);
    } });oa.prototype = Object.create(U.prototype);oa.prototype.constructor = oa;oa.prototype.isLineBasicMaterial = !0;oa.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.linecap = a.linecap;this.linejoin = a.linejoin;return this;
  };Ta.prototype = Object.assign(Object.create(z.prototype), { constructor: Ta, isLine: !0, raycast: function () {
      var a = new J(),
          b = new ab(),
          c = new Ca();return function (d, e) {
        var f = d.linePrecision,
            f = f * f,
            g = this.geometry,
            h = this.matrixWorld;null === g.boundingSphere && g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(h);if (!1 !== d.ray.intersectsSphere(c)) {
          a.getInverse(h);b.copy(d.ray).applyMatrix4(a);var k = new q(),
              m = new q(),
              h = new q(),
              l = new q(),
              n = this && this.isLineSegments ? 2 : 1;if (g && g.isBufferGeometry) {
            var p = g.index,
                r = g.attributes.position.array;if (null !== p) for (var p = p.array, g = 0, x = p.length - 1; g < x; g += n) {
              var t = p[g + 1];k.fromArray(r, 3 * p[g]);m.fromArray(r, 3 * t);t = b.distanceSqToSegment(k, m, l, h);t > f || (l.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(l), t < d.near || t > d.far || e.push({ distance: t, point: h.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
            } else for (g = 0, x = r.length / 3 - 1; g < x; g += n) {
              k.fromArray(r, 3 * g), m.fromArray(r, 3 * g + 3), t = b.distanceSqToSegment(k, m, l, h), t > f || (l.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(l), t < d.near || t > d.far || e.push({ distance: t, point: h.clone().applyMatrix4(this.matrixWorld),
                index: g, face: null, faceIndex: null, object: this }));
            }
          } else if (g && g.isGeometry) for (k = g.vertices, m = k.length, g = 0; g < m - 1; g += n) {
            t = b.distanceSqToSegment(k[g], k[g + 1], l, h), t > f || (l.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(l), t < d.near || t > d.far || e.push({ distance: t, point: h.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
          }
        }
      };
    }(), clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    } });la.prototype = Object.assign(Object.create(Ta.prototype), { constructor: la, isLineSegments: !0 });xa.prototype = Object.create(U.prototype);xa.prototype.constructor = xa;xa.prototype.isPointsMaterial = !0;xa.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.size = a.size;this.sizeAttenuation = a.sizeAttenuation;return this;
  };Kb.prototype = Object.assign(Object.create(z.prototype), { constructor: Kb, isPoints: !0, raycast: function () {
      var a = new J(),
          b = new ab(),
          c = new Ca();return function (d, e) {
        function f(a, c) {
          var f = b.distanceSqToPoint(a);
          if (f < l) {
            var h = b.closestPointToPoint(a);h.applyMatrix4(k);var m = d.ray.origin.distanceTo(h);m < d.near || m > d.far || e.push({ distance: m, distanceToRay: Math.sqrt(f), point: h.clone(), index: c, face: null, object: g });
          }
        }var g = this,
            h = this.geometry,
            k = this.matrixWorld,
            m = d.params.Points.threshold;null === h.boundingSphere && h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);if (!1 !== d.ray.intersectsSphere(c)) {
          a.getInverse(k);b.copy(d.ray).applyMatrix4(a);var m = m / ((this.scale.x + this.scale.y + this.scale.z) / 3),
              l = m * m,
              m = new q();if (h && h.isBufferGeometry) {
            var n = h.index,
                h = h.attributes.position.array;if (null !== n) for (var p = n.array, n = 0, r = p.length; n < r; n++) {
              var x = p[n];m.fromArray(h, 3 * x);f(m, x);
            } else for (n = 0, p = h.length / 3; n < p; n++) {
              m.fromArray(h, 3 * n), f(m, n);
            }
          } else for (m = h.vertices, n = 0, p = m.length; n < p; n++) {
            f(m[n], n);
          }
        }
      };
    }(), clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    } });oc.prototype = Object.assign(Object.create(z.prototype), { constructor: oc });ed.prototype = Object.create(da.prototype);ed.prototype.constructor = ed;Lb.prototype = Object.create(da.prototype);Lb.prototype.constructor = Lb;Lb.prototype.isCompressedTexture = !0;fd.prototype = Object.create(da.prototype);fd.prototype.constructor = fd;pc.prototype = Object.create(da.prototype);pc.prototype.constructor = pc;pc.prototype.isDepthTexture = !0;Mb.prototype = Object.create(G.prototype);Mb.prototype.constructor = Mb;Nb.prototype = Object.create(G.prototype);Nb.prototype.constructor = Nb;qc.prototype = Object.create(Q.prototype);qc.prototype.constructor = qc;ua.prototype = Object.create(G.prototype);
  ua.prototype.constructor = ua;rc.prototype = Object.create(ua.prototype);rc.prototype.constructor = rc;sc.prototype = Object.create(Q.prototype);sc.prototype.constructor = sc;tc.prototype = Object.create(ua.prototype);tc.prototype.constructor = tc;uc.prototype = Object.create(Q.prototype);uc.prototype.constructor = uc;vc.prototype = Object.create(ua.prototype);vc.prototype.constructor = vc;wc.prototype = Object.create(Q.prototype);wc.prototype.constructor = wc;xc.prototype = Object.create(ua.prototype);xc.prototype.constructor = xc;yc.prototype = Object.create(Q.prototype);yc.prototype.constructor = yc;zc.prototype = Object.create(Q.prototype);zc.prototype.constructor = zc;Ob.prototype = Object.create(G.prototype);Ob.prototype.constructor = Ob;Ac.prototype = Object.create(Q.prototype);Ac.prototype.constructor = Ac;Pb.prototype = Object.create(G.prototype);Pb.prototype.constructor = Pb;Bc.prototype = Object.create(Q.prototype);Bc.prototype.constructor = Bc;Qb.prototype = Object.create(G.prototype);Qb.prototype.constructor = Qb;Cc.prototype = Object.create(Q.prototype);
  Cc.prototype.constructor = Cc;var ra = { area: function area(a) {
      for (var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++) {
        c += a[d].x * a[e].y - a[e].x * a[d].y;
      }return .5 * c;
    }, triangulate: function () {
      return function (a, b) {
        var c = a.length;if (3 > c) return null;var d = [],
            e = [],
            f = [],
            g,
            h,
            k;if (0 < ra.area(a)) for (h = 0; h < c; h++) {
          e[h] = h;
        } else for (h = 0; h < c; h++) {
          e[h] = c - 1 - h;
        }var m = 2 * c;for (h = c - 1; 2 < c;) {
          if (0 >= m--) {
            console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()");break;
          }g = h;c <= g && (g = 0);h = g + 1;c <= h && (h = 0);k = h + 1;c <= k && (k = 0);var l;a: {
            var n, p, r, q, t, D, u, v;n = a[e[g]].x;p = a[e[g]].y;r = a[e[h]].x;q = a[e[h]].y;t = a[e[k]].x;D = a[e[k]].y;if (0 >= (r - n) * (D - p) - (q - p) * (t - n)) l = !1;else {
              var I, y, E, H, F, M, B, z, C, G;I = t - r;y = D - q;E = n - t;H = p - D;F = r - n;M = q - p;for (l = 0; l < c; l++) {
                if (u = a[e[l]].x, v = a[e[l]].y, !(u === n && v === p || u === r && v === q || u === t && v === D) && (B = u - n, z = v - p, C = u - r, G = v - q, u -= t, v -= D, C = I * G - y * C, B = F * z - M * B, z = E * v - H * u, C >= -Number.EPSILON && z >= -Number.EPSILON && B >= -Number.EPSILON)) {
                  l = !1;break a;
                }
              }l = !0;
            }
          }if (l) {
            d.push([a[e[g]], a[e[h]], a[e[k]]]);f.push([e[g], e[h], e[k]]);g = h;for (k = h + 1; k < c; g++, k++) {
              e[g] = e[k];
            }c--;m = 2 * c;
          }
        }return b ? f : d;
      };
    }(), triangulateShape: function triangulateShape(a, b) {
      function c(a) {
        var b = a.length;2 < b && a[b - 1].equals(a[0]) && a.pop();
      }function d(a, b, c) {
        return a.x !== b.x ? a.x < b.x ? a.x <= c.x && c.x <= b.x : b.x <= c.x && c.x <= a.x : a.y < b.y ? a.y <= c.y && c.y <= b.y : b.y <= c.y && c.y <= a.y;
      }function e(a, b, c, e, f) {
        var g = b.x - a.x,
            h = b.y - a.y,
            k = e.x - c.x,
            m = e.y - c.y,
            l = a.x - c.x,
            n = a.y - c.y,
            p = h * k - g * m,
            q = h * l - g * n;if (Math.abs(p) > Number.EPSILON) {
          if (0 < p) {
            if (0 > q || q > p) return [];k = m * l - k * n;if (0 > k || k > p) return [];
          } else {
            if (0 < q || q < p) return [];k = m * l - k * n;if (0 < k || k < p) return [];
          }if (0 === k) return !f || 0 !== q && q !== p ? [a] : [];if (k === p) return !f || 0 !== q && q !== p ? [b] : [];if (0 === q) return [c];if (q === p) return [e];f = k / p;return [{ x: a.x + f * g, y: a.y + f * h }];
        }if (0 !== q || m * l !== k * n) return [];h = 0 === g && 0 === h;k = 0 === k && 0 === m;if (h && k) return a.x !== c.x || a.y !== c.y ? [] : [a];if (h) return d(c, e, a) ? [a] : [];if (k) return d(a, b, c) ? [c] : [];0 !== g ? (a.x < b.x ? (g = a, k = a.x, h = b, a = b.x) : (g = b, k = b.x, h = a, a = a.x), c.x < e.x ? (b = c, p = c.x, m = e, c = e.x) : (b = e, p = e.x, m = c, c = c.x)) : (a.y < b.y ? (g = a, k = a.y, h = b, a = b.y) : (g = b, k = b.y, h = a, a = a.y), c.y < e.y ? (b = c, p = c.y, m = e, c = e.y) : (b = e, p = e.y, m = c, c = c.y));return k <= p ? a < p ? [] : a === p ? f ? [] : [b] : a <= c ? [b, h] : [b, m] : k > c ? [] : k === c ? f ? [] : [g] : a <= c ? [g, h] : [g, m];
      }function f(a, b, c, d) {
        var e = b.x - a.x,
            f = b.y - a.y;b = c.x - a.x;c = c.y - a.y;var g = d.x - a.x;d = d.y - a.y;a = e * c - f * b;e = e * d - f * g;return Math.abs(a) > Number.EPSILON ? (b = g * c - d * b, 0 < a ? 0 <= e && 0 <= b : 0 <= e || 0 <= b) : 0 < e;
      }c(a);b.forEach(c);var g,
          h,
          k,
          m,
          l,
          n = {};k = a.concat();g = 0;for (h = b.length; g < h; g++) {
        Array.prototype.push.apply(k, b[g]);
      }g = 0;for (h = k.length; g < h; g++) {
        l = k[g].x + ":" + k[g].y, void 0 !== n[l] && console.warn("THREE.ShapeUtils: Duplicate point", l, g), n[l] = g;
      }g = function (a, b) {
        function c(a, b) {
          var d = h.length - 1,
              e = a - 1;0 > e && (e = d);var g = a + 1;g > d && (g = 0);d = f(h[a], h[e], h[g], k[b]);if (!d) return !1;d = k.length - 1;e = b - 1;0 > e && (e = d);g = b + 1;g > d && (g = 0);return (d = f(k[b], k[e], k[g], h[a])) ? !0 : !1;
        }function d(a, b) {
          var c, f;for (c = 0; c < h.length; c++) {
            if (f = c + 1, f %= h.length, f = e(a, b, h[c], h[f], !0), 0 < f.length) return !0;
          }return !1;
        }function g(a, c) {
          var d, f, h, k;for (d = 0; d < m.length; d++) {
            for (f = b[m[d]], h = 0; h < f.length; h++) {
              if (k = h + 1, k %= f.length, k = e(a, c, f[h], f[k], !0), 0 < k.length) return !0;
            }
          }return !1;
        }var h = a.concat(),
            k,
            m = [],
            l,
            n,
            p,
            q,
            w,
            B = [],
            z,
            C,
            G,
            J = 0;for (l = b.length; J < l; J++) {
          m.push(J);
        }z = 0;for (var N = 2 * m.length; 0 < m.length;) {
          N--;if (0 > N) {
            console.log("Infinite Loop! Holes left:" + m.length + ", Probably Hole outside Shape!");break;
          }for (n = z; n < h.length; n++) {
            p = h[n];l = -1;for (J = 0; J < m.length; J++) {
              if (q = m[J], w = p.x + ":" + p.y + ":" + q, void 0 === B[w]) {
                k = b[q];for (C = 0; C < k.length; C++) {
                  if (q = k[C], c(n, C) && !d(p, q) && !g(p, q)) {
                    l = C;m.splice(J, 1);z = h.slice(0, n + 1);q = h.slice(n);C = k.slice(l);G = k.slice(0, l + 1);h = z.concat(C).concat(G).concat(q);z = n;
                    break;
                  }
                }if (0 <= l) break;B[w] = !0;
              }
            }if (0 <= l) break;
          }
        }return h;
      }(a, b);var p = ra.triangulate(g, !1);g = 0;for (h = p.length; g < h; g++) {
        for (m = p[g], k = 0; 3 > k; k++) {
          l = m[k].x + ":" + m[k].y, l = n[l], void 0 !== l && (m[k] = l);
        }
      }return p.concat();
    }, isClockWise: function isClockWise(a) {
      return 0 > ra.area(a);
    }, b2: function () {
      return function (a, b, c, d) {
        var e = 1 - a;return e * e * b + 2 * (1 - a) * a * c + a * a * d;
      };
    }(), b3: function () {
      return function (a, b, c, d, e) {
        var f = 1 - a,
            g = 1 - a;return f * f * f * b + 3 * g * g * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
      };
    }() };za.prototype = Object.create(Q.prototype);za.prototype.constructor = za;za.prototype.addShapeList = function (a, b) {
    for (var c = a.length, d = 0; d < c; d++) {
      this.addShape(a[d], b);
    }
  };za.prototype.addShape = function (a, b) {
    function c(a, b, c) {
      b || console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a);
    }function d(a, b, c) {
      var d, e, f;e = a.x - b.x;f = a.y - b.y;d = c.x - a.x;var g = c.y - a.y,
          h = e * e + f * f;if (Math.abs(e * g - f * d) > Number.EPSILON) {
        var k = Math.sqrt(h),
            m = Math.sqrt(d * d + g * g),
            h = b.x - f / k;b = b.y + e / k;g = ((c.x - g / m - h) * g - (c.y + d / m - b) * d) / (e * g - f * d);d = h + e * g - a.x;e = b + f * g - a.y;f = d * d + e * e;if (2 >= f) return new B(d, e);f = Math.sqrt(f / 2);
      } else a = !1, e > Number.EPSILON ? d > Number.EPSILON && (a = !0) : e < -Number.EPSILON ? d < -Number.EPSILON && (a = !0) : Math.sign(f) === Math.sign(g) && (a = !0), a ? (d = -f, f = Math.sqrt(h)) : (d = e, e = f, f = Math.sqrt(h / 2));return new B(d / f, e / f);
    }function e(a, b) {
      var c, d;for (L = a.length; 0 <= --L;) {
        c = L;d = L - 1;0 > d && (d = a.length - 1);var e,
            f = r + 2 * l;for (e = 0; e < f; e++) {
          var g = T * e,
              h = T * (e + 1),
              k = b + c + g,
              g = b + d + g,
              m = b + d + h,
              h = b + c + h,
              k = k + K,
              g = g + K,
              m = m + K,
              h = h + K;C.faces.push(new ea(k, g, h, null, null, 1));C.faces.push(new ea(g, m, h, null, null, 1));k = u.generateSideWallUV(C, k, g, m, h);C.faceVertexUvs[0].push([k[0], k[1], k[3]]);C.faceVertexUvs[0].push([k[1], k[2], k[3]]);
        }
      }
    }function f(a, b, c) {
      C.vertices.push(new q(a, b, c));
    }function g(a, b, c) {
      a += K;b += K;c += K;C.faces.push(new ea(a, b, c, null, null, 0));a = u.generateTopUV(C, a, b, c);C.faceVertexUvs[0].push(a);
    }var h = void 0 !== b.amount ? b.amount : 100,
        k = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
        m = void 0 !== b.bevelSize ? b.bevelSize : k - 2,
        l = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
        n = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
        p = void 0 !== b.curveSegments ? b.curveSegments : 12,
        r = void 0 !== b.steps ? b.steps : 1,
        x = b.extrudePath,
        t,
        D = !1,
        u = void 0 !== b.UVGenerator ? b.UVGenerator : za.WorldUVGenerator,
        v,
        I,
        y,
        E;x && (t = x.getSpacedPoints(r), D = !0, n = !1, v = void 0 !== b.frames ? b.frames : x.computeFrenetFrames(r, !1), I = new q(), y = new q(), E = new q());n || (m = k = l = 0);var H,
        F,
        z,
        C = this,
        K = this.vertices.length,
        x = a.extractPoints(p),
        p = x.shape,
        G = x.holes;if (x = !ra.isClockWise(p)) {
      p = p.reverse();F = 0;for (z = G.length; F < z; F++) {
        H = G[F], ra.isClockWise(H) && (G[F] = H.reverse());
      }x = !1;
    }var J = ra.triangulateShape(p, G),
        Q = p;F = 0;for (z = G.length; F < z; F++) {
      H = G[F], p = p.concat(H);
    }var O,
        N,
        P,
        R,
        S,
        T = p.length,
        V,
        U = J.length,
        x = [],
        L = 0;P = Q.length;O = P - 1;for (N = L + 1; L < P; L++, O++, N++) {
      O === P && (O = 0), N === P && (N = 0), x[L] = d(Q[L], Q[O], Q[N]);
    }var W = [],
        X,
        Z = x.concat();F = 0;for (z = G.length; F < z; F++) {
      H = G[F];X = [];L = 0;P = H.length;O = P - 1;for (N = L + 1; L < P; L++, O++, N++) {
        O === P && (O = 0), N === P && (N = 0), X[L] = d(H[L], H[O], H[N]);
      }W.push(X);Z = Z.concat(X);
    }for (O = 0; O < l; O++) {
      P = O / l;R = k * Math.cos(P * Math.PI / 2);N = m * Math.sin(P * Math.PI / 2);L = 0;for (P = Q.length; L < P; L++) {
        S = c(Q[L], x[L], N), f(S.x, S.y, -R);
      }F = 0;for (z = G.length; F < z; F++) {
        for (H = G[F], X = W[F], L = 0, P = H.length; L < P; L++) {
          S = c(H[L], X[L], N), f(S.x, S.y, -R);
        }
      }
    }N = m;for (L = 0; L < T; L++) {
      S = n ? c(p[L], Z[L], N) : p[L], D ? (y.copy(v.normals[0]).multiplyScalar(S.x), I.copy(v.binormals[0]).multiplyScalar(S.y), E.copy(t[0]).add(y).add(I), f(E.x, E.y, E.z)) : f(S.x, S.y, 0);
    }for (P = 1; P <= r; P++) {
      for (L = 0; L < T; L++) {
        S = n ? c(p[L], Z[L], N) : p[L], D ? (y.copy(v.normals[P]).multiplyScalar(S.x), I.copy(v.binormals[P]).multiplyScalar(S.y), E.copy(t[P]).add(y).add(I), f(E.x, E.y, E.z)) : f(S.x, S.y, h / r * P);
      }
    }for (O = l - 1; 0 <= O; O--) {
      P = O / l;R = k * Math.cos(P * Math.PI / 2);N = m * Math.sin(P * Math.PI / 2);L = 0;for (P = Q.length; L < P; L++) {
        S = c(Q[L], x[L], N), f(S.x, S.y, h + R);
      }F = 0;for (z = G.length; F < z; F++) {
        for (H = G[F], X = W[F], L = 0, P = H.length; L < P; L++) {
          S = c(H[L], X[L], N), D ? f(S.x, S.y + t[r - 1].y, t[r - 1].x + R) : f(S.x, S.y, h + R);
        }
      }
    }(function () {
      if (n) {
        var a = 0 * T;for (L = 0; L < U; L++) {
          V = J[L], g(V[2] + a, V[1] + a, V[0] + a);
        }a = T * (r + 2 * l);for (L = 0; L < U; L++) {
          V = J[L], g(V[0] + a, V[1] + a, V[2] + a);
        }
      } else {
        for (L = 0; L < U; L++) {
          V = J[L], g(V[2], V[1], V[0]);
        }for (L = 0; L < U; L++) {
          V = J[L], g(V[0] + T * r, V[1] + T * r, V[2] + T * r);
        }
      }
    })();(function () {
      var a = 0;e(Q, a);a += Q.length;F = 0;for (z = G.length; F < z; F++) {
        H = G[F], e(H, a), a += H.length;
      }
    })();
  };za.WorldUVGenerator = { generateTopUV: function generateTopUV(a, b, c, d) {
      a = a.vertices;b = a[b];c = a[c];d = a[d];return [new B(b.x, b.y), new B(c.x, c.y), new B(d.x, d.y)];
    }, generateSideWallUV: function generateSideWallUV(a, b, c, d, e) {
      a = a.vertices;b = a[b];c = a[c];d = a[d];e = a[e];return .01 > Math.abs(b.y - c.y) ? [new B(b.x, 1 - b.z), new B(c.x, 1 - c.z), new B(d.x, 1 - d.z), new B(e.x, 1 - e.z)] : [new B(b.y, 1 - b.z), new B(c.y, 1 - c.z), new B(d.y, 1 - d.z), new B(e.y, 1 - e.z)];
    } };Dc.prototype = Object.create(za.prototype);Dc.prototype.constructor = Dc;mb.prototype = Object.create(G.prototype);mb.prototype.constructor = mb;Rb.prototype = Object.create(Q.prototype);Rb.prototype.constructor = Rb;Sb.prototype = Object.create(G.prototype);Sb.prototype.constructor = Sb;Ec.prototype = Object.create(Q.prototype);Ec.prototype.constructor = Ec;Fc.prototype = Object.create(Q.prototype);Fc.prototype.constructor = Fc;Tb.prototype = Object.create(G.prototype);Tb.prototype.constructor = Tb;Gc.prototype = Object.create(Q.prototype);
  Gc.prototype.constructor = Gc;cb.prototype = Object.create(Q.prototype);cb.prototype.constructor = cb;cb.prototype.addShapeList = function (a, b) {
    for (var c = 0, d = a.length; c < d; c++) {
      this.addShape(a[c], b);
    }return this;
  };cb.prototype.addShape = function (a, b) {
    void 0 === b && (b = {});var c = b.material,
        d = void 0 === b.UVGenerator ? za.WorldUVGenerator : b.UVGenerator,
        e,
        f,
        g,
        h = this.vertices.length;e = a.extractPoints(void 0 !== b.curveSegments ? b.curveSegments : 12);var k = e.shape,
        m = e.holes;if (!ra.isClockWise(k)) for (k = k.reverse(), e = 0, f = m.length; e < f; e++) {
      g = m[e], ra.isClockWise(g) && (m[e] = g.reverse());
    }var l = ra.triangulateShape(k, m);e = 0;for (f = m.length; e < f; e++) {
      g = m[e], k = k.concat(g);
    }m = k.length;f = l.length;for (e = 0; e < m; e++) {
      g = k[e], this.vertices.push(new q(g.x, g.y, 0));
    }for (e = 0; e < f; e++) {
      m = l[e], k = m[0] + h, g = m[1] + h, m = m[2] + h, this.faces.push(new ea(k, g, m, null, null, c)), this.faceVertexUvs[0].push(d.generateTopUV(this, k, g, m));
    }
  };Ub.prototype = Object.create(G.prototype);Ub.prototype.constructor = Ub;Ua.prototype = Object.create(G.prototype);Ua.prototype.constructor = Ua;nb.prototype = Object.create(Q.prototype);nb.prototype.constructor = nb;Hc.prototype = Object.create(nb.prototype);Hc.prototype.constructor = Hc;Ic.prototype = Object.create(Ua.prototype);Ic.prototype.constructor = Ic;Vb.prototype = Object.create(G.prototype);Vb.prototype.constructor = Vb;Jc.prototype = Object.create(Q.prototype);Jc.prototype.constructor = Jc;ob.prototype = Object.create(Q.prototype);ob.prototype.constructor = ob;var Na = Object.freeze({ WireframeGeometry: Mb, ParametricGeometry: qc, ParametricBufferGeometry: Nb, TetrahedronGeometry: sc,
    TetrahedronBufferGeometry: rc, OctahedronGeometry: uc, OctahedronBufferGeometry: tc, IcosahedronGeometry: wc, IcosahedronBufferGeometry: vc, DodecahedronGeometry: yc, DodecahedronBufferGeometry: xc, PolyhedronGeometry: zc, PolyhedronBufferGeometry: ua, TubeGeometry: Ac, TubeBufferGeometry: Ob, TorusKnotGeometry: Bc, TorusKnotBufferGeometry: Pb, TorusGeometry: Cc, TorusBufferGeometry: Qb, TextGeometry: Dc, SphereBufferGeometry: mb, SphereGeometry: Rb, RingGeometry: Ec, RingBufferGeometry: Sb, PlaneBufferGeometry: ib, PlaneGeometry: Fc, LatheGeometry: Gc,
    LatheBufferGeometry: Tb, ShapeGeometry: cb, ExtrudeGeometry: za, EdgesGeometry: Ub, ConeGeometry: Hc, ConeBufferGeometry: Ic, CylinderGeometry: nb, CylinderBufferGeometry: Ua, CircleBufferGeometry: Vb, CircleGeometry: Jc, BoxBufferGeometry: hb, BoxGeometry: ob });Wb.prototype = Object.create(Fa.prototype);Wb.prototype.constructor = Wb;Wb.prototype.isShadowMaterial = !0;Xb.prototype = Object.create(Fa.prototype);Xb.prototype.constructor = Xb;Xb.prototype.isRawShaderMaterial = !0;Kc.prototype = { constructor: Kc, isMultiMaterial: !0, toJSON: function toJSON(a) {
      for (var b = { metadata: { version: 4.2, type: "material", generator: "MaterialExporter" }, uuid: this.uuid, type: this.type, materials: [] }, c = this.materials, d = 0, e = c.length; d < e; d++) {
        var f = c[d].toJSON(a);delete f.metadata;b.materials.push(f);
      }b.visible = this.visible;return b;
    }, clone: function clone() {
      for (var a = new this.constructor(), b = 0; b < this.materials.length; b++) {
        a.materials.push(this.materials[b].clone());
      }a.visible = this.visible;return a;
    } };Oa.prototype = Object.create(U.prototype);Oa.prototype.constructor = Oa;Oa.prototype.isMeshStandardMaterial = !0;Oa.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.defines = { STANDARD: "" };this.color.copy(a.color);this.roughness = a.roughness;this.metalness = a.metalness;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.roughnessMap = a.roughnessMap;this.metalnessMap = a.metalnessMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.envMapIntensity = a.envMapIntensity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
  };pb.prototype = Object.create(Oa.prototype);pb.prototype.constructor = pb;pb.prototype.isMeshPhysicalMaterial = !0;pb.prototype.copy = function (a) {
    Oa.prototype.copy.call(this, a);this.defines = { PHYSICAL: "" };this.reflectivity = a.reflectivity;this.clearCoat = a.clearCoat;this.clearCoatRoughness = a.clearCoatRoughness;return this;
  };db.prototype = Object.create(U.prototype);db.prototype.constructor = db;db.prototype.isMeshPhongMaterial = !0;db.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess = a.shininess;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
  };qb.prototype = Object.create(U.prototype);qb.prototype.constructor = qb;qb.prototype.isMeshNormalMaterial = !0;qb.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
  };rb.prototype = Object.create(U.prototype);rb.prototype.constructor = rb;rb.prototype.isMeshLambertMaterial = !0;rb.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
  };sb.prototype = Object.create(U.prototype);sb.prototype.constructor = sb;sb.prototype.isLineDashedMaterial = !0;sb.prototype.copy = function (a) {
    U.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.scale = a.scale;this.dashSize = a.dashSize;this.gapSize = a.gapSize;return this;
  };var Df = Object.freeze({ ShadowMaterial: Wb, SpriteMaterial: kb, RawShaderMaterial: Xb, ShaderMaterial: Fa, PointsMaterial: xa,
    MultiMaterial: Kc, MeshPhysicalMaterial: pb, MeshStandardMaterial: Oa, MeshPhongMaterial: db, MeshNormalMaterial: qb, MeshLambertMaterial: rb, MeshDepthMaterial: Za, MeshBasicMaterial: Ma, LineDashedMaterial: sb, LineBasicMaterial: oa, Material: U }),
      ce = { enabled: !1, files: {}, add: function add(a, b) {
      !1 !== this.enabled && (this.files[a] = b);
    }, get: function get(a) {
      if (!1 !== this.enabled) return this.files[a];
    }, remove: function remove(a) {
      delete this.files[a];
    }, clear: function clear() {
      this.files = {};
    } },
      Ga = new Fd();Object.assign(Ja.prototype, { load: function load(a, b, c, d) {
      void 0 === a && (a = "");void 0 !== this.path && (a = this.path + a);var e = this,
          f = ce.get(a);if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function () {
        b && b(f);e.manager.itemEnd(a);
      }, 0), f;var g = a.match(/^data:(.*?)(;base64)?,(.*)$/);if (g) {
        var h = g[1],
            k = !!g[2],
            g = g[3],
            g = window.decodeURIComponent(g);k && (g = window.atob(g));try {
          var m,
              l = (this.responseType || "").toLowerCase();switch (l) {case "arraybuffer":case "blob":
              m = new ArrayBuffer(g.length);for (var n = new Uint8Array(m), k = 0; k < g.length; k++) {
                n[k] = g.charCodeAt(k);
              }"blob" === l && (m = new Blob([m], { type: h }));break;case "document":
              m = new DOMParser().parseFromString(g, h);break;case "json":
              m = JSON.parse(g);break;default:
              m = g;}window.setTimeout(function () {
            b && b(m);e.manager.itemEnd(a);
          }, 0);
        } catch (q) {
          window.setTimeout(function () {
            d && d(q);e.manager.itemError(a);
          }, 0);
        }
      } else {
        var p = new XMLHttpRequest();p.open("GET", a, !0);p.addEventListener("load", function (c) {
          var f = c.target.response;ce.add(a, f);200 === this.status ? (b && b(f), e.manager.itemEnd(a)) : 0 === this.status ? (console.warn("THREE.XHRLoader: HTTP Status 0 received."), b && b(f), e.manager.itemEnd(a)) : (d && d(c), e.manager.itemError(a));
        }, !1);void 0 !== c && p.addEventListener("progress", function (a) {
          c(a);
        }, !1);p.addEventListener("error", function (b) {
          d && d(b);e.manager.itemError(a);
        }, !1);void 0 !== this.responseType && (p.responseType = this.responseType);void 0 !== this.withCredentials && (p.withCredentials = this.withCredentials);p.overrideMimeType && p.overrideMimeType("text/plain");p.send(null);
      }e.manager.itemStart(a);return p;
    }, setPath: function setPath(a) {
      this.path = a;return this;
    }, setResponseType: function setResponseType(a) {
      this.responseType = a;return this;
    }, setWithCredentials: function setWithCredentials(a) {
      this.withCredentials = a;return this;
    } });Object.assign(we.prototype, { load: function load(a, b, c, d) {
      function e(e) {
        k.load(a[e], function (a) {
          a = f._parser(a, !0);g[e] = { width: a.width, height: a.height, format: a.format, mipmaps: a.mipmaps };m += 1;6 === m && (1 === a.mipmapCount && (h.minFilter = 1006), h.format = a.format, h.needsUpdate = !0, b && b(h));
        }, c, d);
      }var f = this,
          g = [],
          h = new Lb();h.image = g;var k = new Ja(this.manager);k.setPath(this.path);k.setResponseType("arraybuffer");if (Array.isArray(a)) for (var m = 0, l = 0, n = a.length; l < n; ++l) {
        e(l);
      } else k.load(a, function (a) {
        a = f._parser(a, !0);if (a.isCubemap) for (var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++) {
          g[d] = { mipmaps: [] };for (var e = 0; e < a.mipmapCount; e++) {
            g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + e]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
          }
        } else h.image.width = a.width, h.image.height = a.height, h.mipmaps = a.mipmaps;1 === a.mipmapCount && (h.minFilter = 1006);h.format = a.format;h.needsUpdate = !0;b && b(h);
      }, c, d);return h;
    }, setPath: function setPath(a) {
      this.path = a;
      return this;
    } });Object.assign(Gd.prototype, { load: function load(a, b, c, d) {
      var e = this,
          f = new lb(),
          g = new Ja(this.manager);g.setResponseType("arraybuffer");g.load(a, function (a) {
        if (a = e._parser(a)) void 0 !== a.image ? f.image = a.image : void 0 !== a.data && (f.image.width = a.width, f.image.height = a.height, f.image.data = a.data), f.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, f.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, f.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, f.minFilter = void 0 !== a.minFilter ? a.minFilter : 1008, f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (f.format = a.format), void 0 !== a.type && (f.type = a.type), void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps), 1 === a.mipmapCount && (f.minFilter = 1006), f.needsUpdate = !0, b && b(f, a);
      }, c, d);return f;
    } });Object.assign(Lc.prototype, { load: function load(a, b, c, d) {
      var e = this,
          f = document.createElementNS("http://www.w3.org/1999/xhtml", "img");f.onload = function () {
        f.onload = null;URL.revokeObjectURL(f.src);b && b(f);e.manager.itemEnd(a);
      };f.onerror = d;if (0 === a.indexOf("data:")) f.src = a;else {
        var g = new Ja();g.setPath(this.path);
        g.setResponseType("blob");g.setWithCredentials(this.withCredentials);g.load(a, function (a) {
          f.src = URL.createObjectURL(a);
        }, c, d);
      }e.manager.itemStart(a);return f;
    }, setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;return this;
    }, setWithCredentials: function setWithCredentials(a) {
      this.withCredentials = a;return this;
    }, setPath: function setPath(a) {
      this.path = a;return this;
    } });Object.assign(Hd.prototype, { load: function load(a, b, c, d) {
      function e(c) {
        g.load(a[c], function (a) {
          f.images[c] = a;h++;6 === h && (f.needsUpdate = !0, b && b(f));
        }, void 0, d);
      }var f = new Xa(),
          g = new Lc(this.manager);
      g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);var h = 0;for (c = 0; c < a.length; ++c) {
        e(c);
      }return f;
    }, setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;return this;
    }, setPath: function setPath(a) {
      this.path = a;return this;
    } });Object.assign(gd.prototype, { load: function load(a, b, c, d) {
      var e = new da(),
          f = new Lc(this.manager);f.setCrossOrigin(this.crossOrigin);f.setWithCredentials(this.withCredentials);f.setPath(this.path);f.load(a, function (c) {
        var d = 0 < a.search(/\.(jpg|jpeg)$/) || 0 === a.search(/^data\:image\/jpeg/);e.format = d ? 1022 : 1023;e.image = c;e.needsUpdate = !0;void 0 !== b && b(e);
      }, c, d);return e;
    }, setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;return this;
    }, setWithCredentials: function setWithCredentials(a) {
      this.withCredentials = a;return this;
    }, setPath: function setPath(a) {
      this.path = a;return this;
    } });pa.prototype = Object.assign(Object.create(z.prototype), { constructor: pa, isLight: !0, copy: function copy(a) {
      z.prototype.copy.call(this, a);this.color.copy(a.color);this.intensity = a.intensity;return this;
    }, toJSON: function toJSON(a) {
      a = z.prototype.toJSON.call(this, a);a.object.color = this.color.getHex();
      a.object.intensity = this.intensity;void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());void 0 !== this.distance && (a.object.distance = this.distance);void 0 !== this.angle && (a.object.angle = this.angle);void 0 !== this.decay && (a.object.decay = this.decay);void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());return a;
    } });hd.prototype = Object.assign(Object.create(pa.prototype), { constructor: hd, isHemisphereLight: !0, copy: function copy(a) {
      pa.prototype.copy.call(this, a);this.groundColor.copy(a.groundColor);return this;
    } });Object.assign(tb.prototype, { copy: function copy(a) {
      this.camera = a.camera.clone();this.bias = a.bias;this.radius = a.radius;this.mapSize.copy(a.mapSize);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, toJSON: function toJSON() {
      var a = {};0 !== this.bias && (a.bias = this.bias);1 !== this.radius && (a.radius = this.radius);if (512 !== this.mapSize.x || 512 !== this.mapSize.y) a.mapSize = this.mapSize.toArray();a.camera = this.camera.toJSON(!1).object;delete a.camera.matrix;
      return a;
    } });id.prototype = Object.assign(Object.create(tb.prototype), { constructor: id, isSpotLightShadow: !0, update: function update(a) {
      var b = 2 * T.RAD2DEG * a.angle,
          c = this.mapSize.width / this.mapSize.height;a = a.distance || 500;var d = this.camera;if (b !== d.fov || c !== d.aspect || a !== d.far) d.fov = b, d.aspect = c, d.far = a, d.updateProjectionMatrix();
    } });jd.prototype = Object.assign(Object.create(pa.prototype), { constructor: jd, isSpotLight: !0, copy: function copy(a) {
      pa.prototype.copy.call(this, a);this.distance = a.distance;this.angle = a.angle;this.penumbra = a.penumbra;this.decay = a.decay;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
    } });kd.prototype = Object.assign(Object.create(pa.prototype), { constructor: kd, isPointLight: !0, copy: function copy(a) {
      pa.prototype.copy.call(this, a);this.distance = a.distance;this.decay = a.decay;this.shadow = a.shadow.clone();return this;
    } });ld.prototype = Object.assign(Object.create(tb.prototype), { constructor: ld });md.prototype = Object.assign(Object.create(pa.prototype), { constructor: md, isDirectionalLight: !0, copy: function copy(a) {
      pa.prototype.copy.call(this, a);this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
    } });nd.prototype = Object.assign(Object.create(pa.prototype), { constructor: nd, isAmbientLight: !0 });var ma = { arraySlice: function arraySlice(a, b, c) {
      return ma.isTypedArray(a) ? new a.constructor(a.subarray(b, c)) : a.slice(b, c);
    }, convertArray: function convertArray(a, b, c) {
      return !a || !c && a.constructor === b ? a : "number" === typeof b.BYTES_PER_ELEMENT ? new b(a) : Array.prototype.slice.call(a);
    }, isTypedArray: function isTypedArray(a) {
      return ArrayBuffer.isView(a) && !(a instanceof DataView);
    }, getKeyframeOrder: function getKeyframeOrder(a) {
      for (var b = a.length, c = Array(b), d = 0; d !== b; ++d) {
        c[d] = d;
      }c.sort(function (b, c) {
        return a[b] - a[c];
      });return c;
    }, sortedArray: function sortedArray(a, b, c) {
      for (var d = a.length, e = new a.constructor(d), f = 0, g = 0; g !== d; ++f) {
        for (var h = c[f] * b, k = 0; k !== b; ++k) {
          e[g++] = a[h + k];
        }
      }return e;
    }, flattenJSON: function flattenJSON(a, b, c, d) {
      for (var e = 1, f = a[0]; void 0 !== f && void 0 === f[d];) {
        f = a[e++];
      }if (void 0 !== f) {
        var g = f[d];if (void 0 !== g) if (Array.isArray(g)) {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), c.push.apply(c, g)), f = a[e++];
          } while (void 0 !== f);
        } else if (void 0 !== g.toArray) {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), g.toArray(c, c.length)), f = a[e++];
          } while (void 0 !== f);
        } else {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), c.push(g)), f = a[e++];
          } while (void 0 !== f);
        }
      }
    } };qa.prototype = { constructor: qa, evaluate: function evaluate(a) {
      var b = this.parameterPositions,
          c = this._cachedIndex,
          d = b[c],
          e = b[c - 1];a: {
        b: {
          c: {
            d: if (!(a < d)) {
              for (var f = c + 2;;) {
                if (void 0 === d) {
                  if (a < e) break d;this._cachedIndex = c = b.length;return this.afterEnd_(c - 1, a, e);
                }if (c === f) break;e = d;d = b[++c];if (a < d) break b;
              }d = b.length;break c;
            }if (a >= e) break a;else {
              f = b[1];a < f && (c = 2, e = f);for (f = c - 2;;) {
                if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);if (c === f) break;d = e;e = b[--c - 1];if (a >= e) break b;
              }d = c;c = 0;
            }
          }for (; c < d;) {
            e = c + d >>> 1, a < b[e] ? d = e : c = e + 1;
          }d = b[c];e = b[c - 1];if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);if (void 0 === d) return this._cachedIndex = c = b.length, this.afterEnd_(c - 1, e, a);
        }this._cachedIndex = c;this.intervalChanged_(c, e, d);
      }return this.interpolate_(c, e, a, d);
    }, settings: null, DefaultSettings_: {}, getSettings_: function getSettings_() {
      return this.settings || this.DefaultSettings_;
    }, copySampleValue_: function copySampleValue_(a) {
      var b = this.resultBuffer,
          c = this.sampleValues,
          d = this.valueSize;a *= d;for (var e = 0; e !== d; ++e) {
        b[e] = c[a + e];
      }return b;
    }, interpolate_: function interpolate_(a, b, c, d) {
      throw Error("call to abstract method");
    }, intervalChanged_: function intervalChanged_(a, b, c) {} };Object.assign(qa.prototype, { beforeStart_: qa.prototype.copySampleValue_, afterEnd_: qa.prototype.copySampleValue_ });od.prototype = Object.assign(Object.create(qa.prototype), { constructor: od, DefaultSettings_: { endingStart: 2400, endingEnd: 2400 },
    intervalChanged_: function intervalChanged_(a, b, c) {
      var d = this.parameterPositions,
          e = a - 2,
          f = a + 1,
          g = d[e],
          h = d[f];if (void 0 === g) switch (this.getSettings_().endingStart) {case 2401:
          e = a;g = 2 * b - c;break;case 2402:
          e = d.length - 2;g = b + d[e] - d[e + 1];break;default:
          e = a, g = c;}if (void 0 === h) switch (this.getSettings_().endingEnd) {case 2401:
          f = a;h = 2 * c - b;break;case 2402:
          f = 1;h = c + d[1] - d[0];break;default:
          f = a - 1, h = b;}a = .5 * (c - b);d = this.valueSize;this._weightPrev = a / (b - g);this._weightNext = a / (h - c);this._offsetPrev = e * d;this._offsetNext = f * d;
    }, interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;a *= g;var h = a - g,
          k = this._offsetPrev,
          m = this._offsetNext,
          l = this._weightPrev,
          n = this._weightNext,
          p = (c - b) / (d - b);c = p * p;d = c * p;b = -l * d + 2 * l * c - l * p;l = (1 + l) * d + (-1.5 - 2 * l) * c + (-.5 + l) * p + 1;p = (-1 - n) * d + (1.5 + n) * c + .5 * p;n = n * d - n * c;for (c = 0; c !== g; ++c) {
        e[c] = b * f[k + c] + l * f[h + c] + p * f[a + c] + n * f[m + c];
      }return e;
    } });Mc.prototype = Object.assign(Object.create(qa.prototype), { constructor: Mc, interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;
      a *= g;var h = a - g;b = (c - b) / (d - b);c = 1 - b;for (d = 0; d !== g; ++d) {
        e[d] = f[h + d] * c + f[a + d] * b;
      }return e;
    } });pd.prototype = Object.assign(Object.create(qa.prototype), { constructor: pd, interpolate_: function interpolate_(a, b, c, d) {
      return this.copySampleValue_(a - 1);
    } });var Wa;Wa = { TimeBufferType: Float32Array, ValueBufferType: Float32Array, DefaultInterpolation: 2301, InterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(a) {
      return new pd(this.times, this.values, this.getValueSize(), a);
    }, InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
      return new Mc(this.times, this.values, this.getValueSize(), a);
    }, InterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(a) {
      return new od(this.times, this.values, this.getValueSize(), a);
    }, setInterpolation: function setInterpolation(a) {
      var b;switch (a) {case 2300:
          b = this.InterpolantFactoryMethodDiscrete;break;case 2301:
          b = this.InterpolantFactoryMethodLinear;break;case 2302:
          b = this.InterpolantFactoryMethodSmooth;}if (void 0 === b) {
        b = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;if (void 0 === this.createInterpolant) if (a !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);else throw Error(b);console.warn(b);
      } else this.createInterpolant = b;
    }, getInterpolation: function getInterpolation() {
      switch (this.createInterpolant) {case this.InterpolantFactoryMethodDiscrete:
          return 2300;case this.InterpolantFactoryMethodLinear:
          return 2301;case this.InterpolantFactoryMethodSmooth:
          return 2302;}
    }, getValueSize: function getValueSize() {
      return this.values.length / this.times.length;
    }, shift: function shift(a) {
      if (0 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
        b[c] += a;
      }return this;
    }, scale: function scale(a) {
      if (1 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
        b[c] *= a;
      }return this;
    }, trim: function trim(a, b) {
      for (var c = this.times, d = c.length, e = 0, f = d - 1; e !== d && c[e] < a;) {
        ++e;
      }for (; -1 !== f && c[f] > b;) {
        --f;
      }++f;if (0 !== e || f !== d) e >= f && (f = Math.max(f, 1), e = f - 1), d = this.getValueSize(), this.times = ma.arraySlice(c, e, f), this.values = ma.arraySlice(this.values, e * d, f * d);return this;
    }, validate: function validate() {
      var a = !0,
          b = this.getValueSize();0 !== b - Math.floor(b) && (console.error("invalid value size in track", this), a = !1);var c = this.times,
          b = this.values,
          d = c.length;0 === d && (console.error("track is empty", this), a = !1);for (var e = null, f = 0; f !== d; f++) {
        var g = c[f];if ("number" === typeof g && isNaN(g)) {
          console.error("time is not a valid number", this, f, g);a = !1;break;
        }if (null !== e && e > g) {
          console.error("out of order keys", this, f, g, e);a = !1;break;
        }e = g;
      }if (void 0 !== b && ma.isTypedArray(b)) for (f = 0, c = b.length; f !== c; ++f) {
        if (d = b[f], isNaN(d)) {
          console.error("value is not a valid number", this, f, d);a = !1;break;
        }
      }return a;
    }, optimize: function optimize() {
      for (var a = this.times, b = this.values, c = this.getValueSize(), d = 2302 === this.getInterpolation(), e = 1, f = a.length - 1, g = 1; g < f; ++g) {
        var h = !1,
            k = a[g];if (k !== a[g + 1] && (1 !== g || k !== k[0])) if (d) h = !0;else for (var m = g * c, l = m - c, n = m + c, k = 0; k !== c; ++k) {
          var p = b[m + k];if (p !== b[l + k] || p !== b[n + k]) {
            h = !0;break;
          }
        }if (h) {
          if (g !== e) for (a[e] = a[g], h = g * c, m = e * c, k = 0; k !== c; ++k) {
            b[m + k] = b[h + k];
          }++e;
        }
      }if (0 < f) {
        a[e] = a[f];h = f * c;m = e * c;for (k = 0; k !== c; ++k) {
          b[m + k] = b[h + k];
        }++e;
      }e !== a.length && (this.times = ma.arraySlice(a, 0, e), this.values = ma.arraySlice(b, 0, e * c));return this;
    } };Yb.prototype = Object.assign(Object.create(Wa), { constructor: Yb, ValueTypeName: "vector" });
  qd.prototype = Object.assign(Object.create(qa.prototype), { constructor: qd, interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;a *= g;b = (c - b) / (d - b);for (c = a + g; a !== c; a += 4) {
        ba.slerpFlat(e, 0, f, a - g, f, a, b);
      }return e;
    } });Nc.prototype = Object.assign(Object.create(Wa), { constructor: Nc, ValueTypeName: "quaternion", DefaultInterpolation: 2301, InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
      return new qd(this.times, this.values, this.getValueSize(), a);
    }, InterpolantFactoryMethodSmooth: void 0 });
  Zb.prototype = Object.assign(Object.create(Wa), { constructor: Zb, ValueTypeName: "number" });rd.prototype = Object.assign(Object.create(Wa), { constructor: rd, ValueTypeName: "string", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 });sd.prototype = Object.assign(Object.create(Wa), { constructor: sd, ValueTypeName: "bool", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 });
  td.prototype = Object.assign(Object.create(Wa), { constructor: td, ValueTypeName: "color" });vb.prototype = Wa;Wa.constructor = vb;Object.assign(vb, { parse: function parse(a) {
      if (void 0 === a.type) throw Error("track type undefined, can not parse");var b = vb._getTrackTypeForValueTypeName(a.type);if (void 0 === a.times) {
        var c = [],
            d = [];ma.flattenJSON(a.keys, c, d, "value");a.times = c;a.values = d;
      }return void 0 !== b.parse ? b.parse(a) : new b(a.name, a.times, a.values, a.interpolation);
    }, toJSON: function toJSON(a) {
      var b = a.constructor;if (void 0 !== b.toJSON) b = b.toJSON(a);else {
        var b = { name: a.name, times: ma.convertArray(a.times, Array), values: ma.convertArray(a.values, Array) },
            c = a.getInterpolation();c !== a.DefaultInterpolation && (b.interpolation = c);
      }b.type = a.ValueTypeName;return b;
    }, _getTrackTypeForValueTypeName: function _getTrackTypeForValueTypeName(a) {
      switch (a.toLowerCase()) {case "scalar":case "double":case "float":case "number":case "integer":
          return Zb;case "vector":case "vector2":case "vector3":case "vector4":
          return Yb;case "color":
          return td;case "quaternion":
          return Nc;case "bool":case "boolean":
          return sd;
        case "string":
          return rd;}throw Error("Unsupported typeName: " + a);
    } });Ha.prototype = { constructor: Ha, resetDuration: function resetDuration() {
      for (var a = 0, b = 0, c = this.tracks.length; b !== c; ++b) {
        var d = this.tracks[b],
            a = Math.max(a, d.times[d.times.length - 1]);
      }this.duration = a;
    }, trim: function trim() {
      for (var a = 0; a < this.tracks.length; a++) {
        this.tracks[a].trim(0, this.duration);
      }return this;
    }, optimize: function optimize() {
      for (var a = 0; a < this.tracks.length; a++) {
        this.tracks[a].optimize();
      }return this;
    } };Object.assign(Ha, { parse: function parse(a) {
      for (var b = [], c = a.tracks, d = 1 / (a.fps || 1), e = 0, f = c.length; e !== f; ++e) {
        b.push(vb.parse(c[e]).scale(d));
      }return new Ha(a.name, a.duration, b);
    }, toJSON: function toJSON(a) {
      var b = [],
          c = a.tracks;a = { name: a.name, duration: a.duration, tracks: b };for (var d = 0, e = c.length; d !== e; ++d) {
        b.push(vb.toJSON(c[d]));
      }return a;
    }, CreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(a, b, c, d) {
      for (var e = b.length, f = [], g = 0; g < e; g++) {
        var h = [],
            k = [];h.push((g + e - 1) % e, g, (g + 1) % e);k.push(0, 1, 0);var m = ma.getKeyframeOrder(h),
            h = ma.sortedArray(h, 1, m),
            k = ma.sortedArray(k, 1, m);d || 0 !== h[0] || (h.push(e), k.push(k[0]));f.push(new Zb(".morphTargetInfluences[" + b[g].name + "]", h, k).scale(1 / c));
      }return new Ha(a, -1, f);
    }, findByName: function findByName(a, b) {
      var c = a;Array.isArray(a) || (c = a.geometry && a.geometry.animations || a.animations);for (var d = 0; d < c.length; d++) {
        if (c[d].name === b) return c[d];
      }return null;
    }, CreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(a, b, c) {
      for (var d = {}, e = /^([\w-]*?)([\d]+)$/, f = 0, g = a.length; f < g; f++) {
        var h = a[f],
            k = h.name.match(e);if (k && 1 < k.length) {
          var m = k[1];(k = d[m]) || (d[m] = k = []);k.push(h);
        }
      }a = [];for (m in d) {
        a.push(Ha.CreateFromMorphTargetSequence(m, d[m], b, c));
      }return a;
    }, parseAnimation: function parseAnimation(a, b) {
      if (!a) return console.error("  no animation in JSONLoader data"), null;for (var c = function c(a, b, _c, d, e) {
        if (0 !== _c.length) {
          var f = [],
              g = [];ma.flattenJSON(_c, f, g, d);0 !== f.length && e.push(new a(b, f, g));
        }
      }, d = [], e = a.name || "default", f = a.length || -1, g = a.fps || 30, h = a.hierarchy || [], k = 0; k < h.length; k++) {
        var m = h[k].keys;if (m && 0 !== m.length) if (m[0].morphTargets) {
          for (var f = {}, l = 0; l < m.length; l++) {
            if (m[l].morphTargets) for (var n = 0; n < m[l].morphTargets.length; n++) {
              f[m[l].morphTargets[n]] = -1;
            }
          }for (var p in f) {
            for (var q = [], x = [], n = 0; n !== m[l].morphTargets.length; ++n) {
              var t = m[l];q.push(t.time);x.push(t.morphTarget === p ? 1 : 0);
            }d.push(new Zb(".morphTargetInfluence[" + p + "]", q, x));
          }f = f.length * (g || 1);
        } else l = ".bones[" + b[k].name + "]", c(Yb, l + ".position", m, "pos", d), c(Nc, l + ".quaternion", m, "rot", d), c(Yb, l + ".scale", m, "scl", d);
      }return 0 === d.length ? null : new Ha(e, f, d);
    } });Object.assign(ud.prototype, { load: function load(a, b, c, d) {
      var e = this;new Ja(e.manager).load(a, function (a) {
        b(e.parse(JSON.parse(a)));
      }, c, d);
    }, setTextures: function setTextures(a) {
      this.textures = a;
    }, parse: function parse(a) {
      function b(a) {
        void 0 === c[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);return c[a];
      }var c = this.textures,
          d = new Df[a.type]();void 0 !== a.uuid && (d.uuid = a.uuid);void 0 !== a.name && (d.name = a.name);void 0 !== a.color && d.color.setHex(a.color);void 0 !== a.roughness && (d.roughness = a.roughness);void 0 !== a.metalness && (d.metalness = a.metalness);void 0 !== a.emissive && d.emissive.setHex(a.emissive);void 0 !== a.specular && d.specular.setHex(a.specular);void 0 !== a.shininess && (d.shininess = a.shininess);
      void 0 !== a.uniforms && (d.uniforms = a.uniforms);void 0 !== a.vertexShader && (d.vertexShader = a.vertexShader);void 0 !== a.fragmentShader && (d.fragmentShader = a.fragmentShader);void 0 !== a.vertexColors && (d.vertexColors = a.vertexColors);void 0 !== a.fog && (d.fog = a.fog);void 0 !== a.shading && (d.shading = a.shading);void 0 !== a.blending && (d.blending = a.blending);void 0 !== a.side && (d.side = a.side);void 0 !== a.opacity && (d.opacity = a.opacity);void 0 !== a.transparent && (d.transparent = a.transparent);void 0 !== a.alphaTest && (d.alphaTest = a.alphaTest);void 0 !== a.depthTest && (d.depthTest = a.depthTest);void 0 !== a.depthWrite && (d.depthWrite = a.depthWrite);void 0 !== a.colorWrite && (d.colorWrite = a.colorWrite);void 0 !== a.wireframe && (d.wireframe = a.wireframe);void 0 !== a.wireframeLinewidth && (d.wireframeLinewidth = a.wireframeLinewidth);void 0 !== a.wireframeLinecap && (d.wireframeLinecap = a.wireframeLinecap);void 0 !== a.wireframeLinejoin && (d.wireframeLinejoin = a.wireframeLinejoin);void 0 !== a.skinning && (d.skinning = a.skinning);void 0 !== a.morphTargets && (d.morphTargets = a.morphTargets);void 0 !== a.size && (d.size = a.size);void 0 !== a.sizeAttenuation && (d.sizeAttenuation = a.sizeAttenuation);void 0 !== a.map && (d.map = b(a.map));void 0 !== a.alphaMap && (d.alphaMap = b(a.alphaMap), d.transparent = !0);void 0 !== a.bumpMap && (d.bumpMap = b(a.bumpMap));void 0 !== a.bumpScale && (d.bumpScale = a.bumpScale);void 0 !== a.normalMap && (d.normalMap = b(a.normalMap));if (void 0 !== a.normalScale) {
        var e = a.normalScale;!1 === Array.isArray(e) && (e = [e, e]);d.normalScale = new B().fromArray(e);
      }void 0 !== a.displacementMap && (d.displacementMap = b(a.displacementMap));void 0 !== a.displacementScale && (d.displacementScale = a.displacementScale);void 0 !== a.displacementBias && (d.displacementBias = a.displacementBias);void 0 !== a.roughnessMap && (d.roughnessMap = b(a.roughnessMap));void 0 !== a.metalnessMap && (d.metalnessMap = b(a.metalnessMap));void 0 !== a.emissiveMap && (d.emissiveMap = b(a.emissiveMap));void 0 !== a.emissiveIntensity && (d.emissiveIntensity = a.emissiveIntensity);void 0 !== a.specularMap && (d.specularMap = b(a.specularMap));void 0 !== a.envMap && (d.envMap = b(a.envMap));
      void 0 !== a.reflectivity && (d.reflectivity = a.reflectivity);void 0 !== a.lightMap && (d.lightMap = b(a.lightMap));void 0 !== a.lightMapIntensity && (d.lightMapIntensity = a.lightMapIntensity);void 0 !== a.aoMap && (d.aoMap = b(a.aoMap));void 0 !== a.aoMapIntensity && (d.aoMapIntensity = a.aoMapIntensity);if (void 0 !== a.materials) for (var e = 0, f = a.materials.length; e < f; e++) {
        d.materials.push(this.parse(a.materials[e]));
      }return d;
    } });Object.assign(Id.prototype, { load: function load(a, b, c, d) {
      var e = this;new Ja(e.manager).load(a, function (a) {
        b(e.parse(JSON.parse(a)));
      }, c, d);
    }, parse: function parse(a) {
      var b = new G(),
          c = a.data.index,
          d = { Int8Array: Int8Array, Uint8Array: Uint8Array, Uint8ClampedArray: Uint8ClampedArray, Int16Array: Int16Array, Uint16Array: Uint16Array, Int32Array: Int32Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array };void 0 !== c && (c = new d[c.type](c.array), b.setIndex(new C(c, 1)));var e = a.data.attributes,
          f;for (f in e) {
        var g = e[f],
            c = new d[g.type](g.array);b.addAttribute(f, new C(c, g.itemSize, g.normalized));
      }d = a.data.groups || a.data.drawcalls || a.data.offsets;
      if (void 0 !== d) for (f = 0, c = d.length; f !== c; ++f) {
        e = d[f], b.addGroup(e.start, e.count, e.materialIndex);
      }a = a.data.boundingSphere;void 0 !== a && (d = new q(), void 0 !== a.center && d.fromArray(a.center), b.boundingSphere = new Ca(d, a.radius));return b;
    } });wb.prototype = { constructor: wb, crossOrigin: void 0, extractUrlBase: function extractUrlBase(a) {
      a = a.split("/");if (1 === a.length) return "./";a.pop();return a.join("/") + "/";
    }, initMaterials: function initMaterials(a, b, c) {
      for (var d = [], e = 0; e < a.length; ++e) {
        d[e] = this.createMaterial(a[e], b, c);
      }return d;
    }, createMaterial: function () {
      var a, b, c;return function (d, e, f) {
        function g(a, c, d, g, k) {
          a = e + a;var l = wb.Handlers.get(a);null !== l ? a = l.load(a) : (b.setCrossOrigin(f), a = b.load(a));void 0 !== c && (a.repeat.fromArray(c), 1 !== c[0] && (a.wrapS = 1E3), 1 !== c[1] && (a.wrapT = 1E3));void 0 !== d && a.offset.fromArray(d);void 0 !== g && ("repeat" === g[0] && (a.wrapS = 1E3), "mirror" === g[0] && (a.wrapS = 1002), "repeat" === g[1] && (a.wrapT = 1E3), "mirror" === g[1] && (a.wrapT = 1002));void 0 !== k && (a.anisotropy = k);c = T.generateUUID();h[c] = a;return c;
        }void 0 === a && (a = new O());void 0 === b && (b = new gd());
        void 0 === c && (c = new ud());var h = {},
            k = { uuid: T.generateUUID(), type: "MeshLambertMaterial" },
            m;for (m in d) {
          var l = d[m];switch (m) {case "DbgColor":case "DbgIndex":case "opticalDensity":case "illumination":
              break;case "DbgName":
              k.name = l;break;case "blending":
              k.blending = Fe[l];break;case "colorAmbient":case "mapAmbient":
              console.warn("THREE.Loader.createMaterial:", m, "is no longer supported.");break;case "colorDiffuse":
              k.color = a.fromArray(l).getHex();break;case "colorSpecular":
              k.specular = a.fromArray(l).getHex();break;
            case "colorEmissive":
              k.emissive = a.fromArray(l).getHex();break;case "specularCoef":
              k.shininess = l;break;case "shading":
              "basic" === l.toLowerCase() && (k.type = "MeshBasicMaterial");"phong" === l.toLowerCase() && (k.type = "MeshPhongMaterial");"standard" === l.toLowerCase() && (k.type = "MeshStandardMaterial");break;case "mapDiffuse":
              k.map = g(l, d.mapDiffuseRepeat, d.mapDiffuseOffset, d.mapDiffuseWrap, d.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":
              break;
            case "mapEmissive":
              k.emissiveMap = g(l, d.mapEmissiveRepeat, d.mapEmissiveOffset, d.mapEmissiveWrap, d.mapEmissiveAnisotropy);break;case "mapEmissiveRepeat":case "mapEmissiveOffset":case "mapEmissiveWrap":case "mapEmissiveAnisotropy":
              break;case "mapLight":
              k.lightMap = g(l, d.mapLightRepeat, d.mapLightOffset, d.mapLightWrap, d.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":
              break;case "mapAO":
              k.aoMap = g(l, d.mapAORepeat, d.mapAOOffset, d.mapAOWrap, d.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":
              break;case "mapBump":
              k.bumpMap = g(l, d.mapBumpRepeat, d.mapBumpOffset, d.mapBumpWrap, d.mapBumpAnisotropy);break;case "mapBumpScale":
              k.bumpScale = l;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":
              break;case "mapNormal":
              k.normalMap = g(l, d.mapNormalRepeat, d.mapNormalOffset, d.mapNormalWrap, d.mapNormalAnisotropy);break;case "mapNormalFactor":
              k.normalScale = [l, l];break;
            case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":
              break;case "mapSpecular":
              k.specularMap = g(l, d.mapSpecularRepeat, d.mapSpecularOffset, d.mapSpecularWrap, d.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":
              break;case "mapMetalness":
              k.metalnessMap = g(l, d.mapMetalnessRepeat, d.mapMetalnessOffset, d.mapMetalnessWrap, d.mapMetalnessAnisotropy);break;case "mapMetalnessRepeat":case "mapMetalnessOffset":case "mapMetalnessWrap":case "mapMetalnessAnisotropy":
              break;
            case "mapRoughness":
              k.roughnessMap = g(l, d.mapRoughnessRepeat, d.mapRoughnessOffset, d.mapRoughnessWrap, d.mapRoughnessAnisotropy);break;case "mapRoughnessRepeat":case "mapRoughnessOffset":case "mapRoughnessWrap":case "mapRoughnessAnisotropy":
              break;case "mapAlpha":
              k.alphaMap = g(l, d.mapAlphaRepeat, d.mapAlphaOffset, d.mapAlphaWrap, d.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":
              break;case "flipSided":
              k.side = 1;break;case "doubleSided":
              k.side = 2;break;case "transparency":
              console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");k.opacity = l;break;case "depthTest":case "depthWrite":case "colorWrite":case "opacity":case "reflectivity":case "transparent":case "visible":case "wireframe":
              k[m] = l;break;case "vertexColors":
              !0 === l && (k.vertexColors = 2);"face" === l && (k.vertexColors = 1);break;default:
              console.error("THREE.Loader.createMaterial: Unsupported", m, l);}
        }"MeshBasicMaterial" === k.type && delete k.emissive;"MeshPhongMaterial" !== k.type && delete k.specular;1 > k.opacity && (k.transparent = !0);c.setTextures(h);return c.parse(k);
      };
    }() };wb.Handlers = { handlers: [], add: function add(a, b) {
      this.handlers.push(a, b);
    }, get: function get(a) {
      for (var b = this.handlers, c = 0, d = b.length; c < d; c += 2) {
        var e = b[c + 1];if (b[c].test(a)) return e;
      }return null;
    } };Object.assign(Jd.prototype, { load: function load(a, b, c, d) {
      var e = this,
          f = this.texturePath && "string" === typeof this.texturePath ? this.texturePath : wb.prototype.extractUrlBase(a),
          g = new Ja(this.manager);g.setWithCredentials(this.withCredentials);
      g.load(a, function (c) {
        c = JSON.parse(c);var d = c.metadata;if (void 0 !== d && (d = d.type, void 0 !== d)) {
          if ("object" === d.toLowerCase()) {
            console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.ObjectLoader instead.");return;
          }if ("scene" === d.toLowerCase()) {
            console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.SceneLoader instead.");return;
          }
        }c = e.parse(c, f);b(c.geometry, c.materials);
      }, c, d);
    }, setTexturePath: function setTexturePath(a) {
      this.texturePath = a;
    }, parse: function parse(a, b) {
      var c = new Q(),
          d = void 0 !== a.scale ? 1 / a.scale : 1;(function (b) {
        var d,
            g,
            h,
            k,
            l,
            w,
            n,
            p,
            r,
            x,
            t,
            D,
            u,
            v = a.faces;w = a.vertices;var z = a.normals,
            y = a.colors,
            E = 0;if (void 0 !== a.uvs) {
          for (d = 0; d < a.uvs.length; d++) {
            a.uvs[d].length && E++;
          }for (d = 0; d < E; d++) {
            c.faceVertexUvs[d] = [];
          }
        }k = 0;for (l = w.length; k < l;) {
          d = new q(), d.x = w[k++] * b, d.y = w[k++] * b, d.z = w[k++] * b, c.vertices.push(d);
        }k = 0;for (l = v.length; k < l;) {
          if (b = v[k++], r = b & 1, h = b & 2, d = b & 8, n = b & 16, x = b & 32, w = b & 64, b &= 128, r) {
            r = new ea();r.a = v[k];r.b = v[k + 1];r.c = v[k + 3];t = new ea();t.a = v[k + 1];t.b = v[k + 2];t.c = v[k + 3];k += 4;h && (h = v[k++], r.materialIndex = h, t.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < E; d++) {
              for (D = a.uvs[d], c.faceVertexUvs[d][h] = [], c.faceVertexUvs[d][h + 1] = [], g = 0; 4 > g; g++) {
                p = v[k++], u = D[2 * p], p = D[2 * p + 1], u = new B(u, p), 2 !== g && c.faceVertexUvs[d][h].push(u), 0 !== g && c.faceVertexUvs[d][h + 1].push(u);
              }
            }n && (n = 3 * v[k++], r.normal.set(z[n++], z[n++], z[n]), t.normal.copy(r.normal));if (x) for (d = 0; 4 > d; d++) {
              n = 3 * v[k++], x = new q(z[n++], z[n++], z[n]), 2 !== d && r.vertexNormals.push(x), 0 !== d && t.vertexNormals.push(x);
            }w && (w = v[k++], w = y[w], r.color.setHex(w), t.color.setHex(w));if (b) for (d = 0; 4 > d; d++) {
              w = v[k++], w = y[w], 2 !== d && r.vertexColors.push(new O(w)), 0 !== d && t.vertexColors.push(new O(w));
            }c.faces.push(r);c.faces.push(t);
          } else {
            r = new ea();r.a = v[k++];r.b = v[k++];r.c = v[k++];h && (h = v[k++], r.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < E; d++) {
              for (D = a.uvs[d], c.faceVertexUvs[d][h] = [], g = 0; 3 > g; g++) {
                p = v[k++], u = D[2 * p], p = D[2 * p + 1], u = new B(u, p), c.faceVertexUvs[d][h].push(u);
              }
            }n && (n = 3 * v[k++], r.normal.set(z[n++], z[n++], z[n]));if (x) for (d = 0; 3 > d; d++) {
              n = 3 * v[k++], x = new q(z[n++], z[n++], z[n]), r.vertexNormals.push(x);
            }w && (w = v[k++], r.color.setHex(y[w]));if (b) for (d = 0; 3 > d; d++) {
              w = v[k++], r.vertexColors.push(new O(y[w]));
            }c.faces.push(r);
          }
        }
      })(d);(function () {
        var b = void 0 !== a.influencesPerVertex ? a.influencesPerVertex : 2;if (a.skinWeights) for (var d = 0, g = a.skinWeights.length; d < g; d += b) {
          c.skinWeights.push(new ga(a.skinWeights[d], 1 < b ? a.skinWeights[d + 1] : 0, 2 < b ? a.skinWeights[d + 2] : 0, 3 < b ? a.skinWeights[d + 3] : 0));
        }if (a.skinIndices) for (d = 0, g = a.skinIndices.length; d < g; d += b) {
          c.skinIndices.push(new ga(a.skinIndices[d], 1 < b ? a.skinIndices[d + 1] : 0, 2 < b ? a.skinIndices[d + 2] : 0, 3 < b ? a.skinIndices[d + 3] : 0));
        }c.bones = a.bones;c.bones && 0 < c.bones.length && (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) && console.warn("When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
      })();(function (b) {
        if (void 0 !== a.morphTargets) for (var d = 0, g = a.morphTargets.length; d < g; d++) {
          c.morphTargets[d] = {};c.morphTargets[d].name = a.morphTargets[d].name;
          c.morphTargets[d].vertices = [];for (var h = c.morphTargets[d].vertices, k = a.morphTargets[d].vertices, l = 0, w = k.length; l < w; l += 3) {
            var n = new q();n.x = k[l] * b;n.y = k[l + 1] * b;n.z = k[l + 2] * b;h.push(n);
          }
        }if (void 0 !== a.morphColors && 0 < a.morphColors.length) for (console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'), b = c.faces, h = a.morphColors[0].colors, d = 0, g = b.length; d < g; d++) {
          b[d].color.fromArray(h, 3 * d);
        }
      })(d);(function () {
        var b = [],
            d = [];void 0 !== a.animation && d.push(a.animation);void 0 !== a.animations && (a.animations.length ? d = d.concat(a.animations) : d.push(a.animations));for (var g = 0; g < d.length; g++) {
          var h = Ha.parseAnimation(d[g], c.bones);h && b.push(h);
        }c.morphTargets && (d = Ha.CreateClipsFromMorphTargetSequences(c.morphTargets, 10), b = b.concat(d));0 < b.length && (c.animations = b);
      })();c.computeFaceNormals();c.computeBoundingSphere();if (void 0 === a.materials || 0 === a.materials.length) return { geometry: c };d = wb.prototype.initMaterials(a.materials, b, this.crossOrigin);return { geometry: c, materials: d };
    } });Object.assign(xe.prototype, { load: function load(a, b, c, d) {
      "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));var e = this;new Ja(e.manager).load(a, function (a) {
        e.parse(JSON.parse(a), b);
      }, c, d);
    }, setTexturePath: function setTexturePath(a) {
      this.texturePath = a;
    }, setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
    }, parse: function parse(a, b) {
      var c = this.parseGeometries(a.geometries),
          d = this.parseImages(a.images, function () {
        void 0 !== b && b(e);
      }),
          d = this.parseTextures(a.textures, d),
          d = this.parseMaterials(a.materials, d),
          e = this.parseObject(a.object, c, d);
      a.animations && (e.animations = this.parseAnimations(a.animations));void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);return e;
    }, parseGeometries: function parseGeometries(a) {
      var b = {};if (void 0 !== a) for (var c = new Jd(), d = new Id(), e = 0, f = a.length; e < f; e++) {
        var g,
            h = a[e];switch (h.type) {case "PlaneGeometry":case "PlaneBufferGeometry":
            g = new Na[h.type](h.width, h.height, h.widthSegments, h.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":
            g = new Na[h.type](h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":
            g = new Na[h.type](h.radius, h.segments, h.thetaStart, h.thetaLength);break;case "CylinderGeometry":case "CylinderBufferGeometry":
            g = new Na[h.type](h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);break;case "ConeGeometry":case "ConeBufferGeometry":
            g = new Na[h.type](h.radius, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);
            break;case "SphereGeometry":case "SphereBufferGeometry":
            g = new Na[h.type](h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);break;case "DodecahedronGeometry":case "IcosahedronGeometry":case "OctahedronGeometry":case "TetrahedronGeometry":
            g = new Na[h.type](h.radius, h.detail);break;case "RingGeometry":case "RingBufferGeometry":
            g = new Na[h.type](h.innerRadius, h.outerRadius, h.thetaSegments, h.phiSegments, h.thetaStart, h.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":
            g = new Na[h.type](h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":
            g = new Na[h.type](h.radius, h.tube, h.tubularSegments, h.radialSegments, h.p, h.q);break;case "LatheGeometry":case "LatheBufferGeometry":
            g = new Na[h.type](h.points, h.segments, h.phiStart, h.phiLength);break;case "BufferGeometry":
            g = d.parse(h);break;case "Geometry":
            g = c.parse(h.data, this.texturePath).geometry;break;default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + h.type + '"');continue;}g.uuid = h.uuid;void 0 !== h.name && (g.name = h.name);b[h.uuid] = g;
      }return b;
    }, parseMaterials: function parseMaterials(a, b) {
      var c = {};if (void 0 !== a) {
        var d = new ud();d.setTextures(b);for (var e = 0, f = a.length; e < f; e++) {
          var g = d.parse(a[e]);c[g.uuid] = g;
        }
      }return c;
    }, parseAnimations: function parseAnimations(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = Ha.parse(a[c]);b.push(d);
      }return b;
    }, parseImages: function parseImages(a, b) {
      function c(a) {
        d.manager.itemStart(a);return g.load(a, function () {
          d.manager.itemEnd(a);
        }, void 0, function () {
          d.manager.itemError(a);
        });
      }
      var d = this,
          e = {};if (void 0 !== a && 0 < a.length) {
        var f = new Fd(b),
            g = new Lc(f);g.setCrossOrigin(this.crossOrigin);for (var f = 0, h = a.length; f < h; f++) {
          var k = a[f],
              l = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(k.url) ? k.url : d.texturePath + k.url;e[k.uuid] = c(l);
        }
      }return e;
    }, parseTextures: function parseTextures(a, b) {
      function c(a, b) {
        if ("number" === typeof a) return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);return b[a];
      }var d = {};if (void 0 !== a) for (var e = 0, f = a.length; e < f; e++) {
        var g = a[e];void 0 === g.image && console.warn('THREE.ObjectLoader: No "image" specified for', g.uuid);void 0 === b[g.image] && console.warn("THREE.ObjectLoader: Undefined image", g.image);var h = new da(b[g.image]);h.needsUpdate = !0;h.uuid = g.uuid;void 0 !== g.name && (h.name = g.name);void 0 !== g.mapping && (h.mapping = c(g.mapping, Ge));void 0 !== g.offset && h.offset.fromArray(g.offset);void 0 !== g.repeat && h.repeat.fromArray(g.repeat);void 0 !== g.wrap && (h.wrapS = c(g.wrap[0], ae), h.wrapT = c(g.wrap[1], ae));void 0 !== g.minFilter && (h.minFilter = c(g.minFilter, be));
        void 0 !== g.magFilter && (h.magFilter = c(g.magFilter, be));void 0 !== g.anisotropy && (h.anisotropy = g.anisotropy);void 0 !== g.flipY && (h.flipY = g.flipY);d[g.uuid] = h;
      }return d;
    }, parseObject: function () {
      var a = new J();return function (b, c, d) {
        function e(a) {
          void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);return c[a];
        }function f(a) {
          if (void 0 !== a) return void 0 === d[a] && console.warn("THREE.ObjectLoader: Undefined material", a), d[a];
        }var g;switch (b.type) {case "Scene":
            g = new jb();void 0 !== b.background && Number.isInteger(b.background) && (g.background = new O(b.background));void 0 !== b.fog && ("Fog" === b.fog.type ? g.fog = new Jb(b.fog.color, b.fog.near, b.fog.far) : "FogExp2" === b.fog.type && (g.fog = new Ib(b.fog.color, b.fog.density)));break;case "PerspectiveCamera":
            g = new Ea(b.fov, b.aspect, b.near, b.far);void 0 !== b.focus && (g.focus = b.focus);void 0 !== b.zoom && (g.zoom = b.zoom);void 0 !== b.filmGauge && (g.filmGauge = b.filmGauge);void 0 !== b.filmOffset && (g.filmOffset = b.filmOffset);void 0 !== b.view && (g.view = Object.assign({}, b.view));break;case "OrthographicCamera":
            g = new Hb(b.left, b.right, b.top, b.bottom, b.near, b.far);break;case "AmbientLight":
            g = new nd(b.color, b.intensity);break;case "DirectionalLight":
            g = new md(b.color, b.intensity);break;case "PointLight":
            g = new kd(b.color, b.intensity, b.distance, b.decay);break;case "SpotLight":
            g = new jd(b.color, b.intensity, b.distance, b.angle, b.penumbra, b.decay);break;case "HemisphereLight":
            g = new hd(b.color, b.groundColor, b.intensity);break;case "Mesh":
            g = e(b.geometry);var h = f(b.material);g = g.bones && 0 < g.bones.length ? new dd(g, h) : new ya(g, h);break;case "LOD":
            g = new nc();break;case "Line":
            g = new Ta(e(b.geometry), f(b.material), b.mode);break;case "LineSegments":
            g = new la(e(b.geometry), f(b.material));break;case "PointCloud":case "Points":
            g = new Kb(e(b.geometry), f(b.material));break;case "Sprite":
            g = new mc(f(b.material));break;case "Group":
            g = new oc();break;default:
            g = new z();}g.uuid = b.uuid;void 0 !== b.name && (g.name = b.name);void 0 !== b.matrix ? (a.fromArray(b.matrix), a.decompose(g.position, g.quaternion, g.scale)) : (void 0 !== b.position && g.position.fromArray(b.position), void 0 !== b.rotation && g.rotation.fromArray(b.rotation), void 0 !== b.quaternion && g.quaternion.fromArray(b.quaternion), void 0 !== b.scale && g.scale.fromArray(b.scale));void 0 !== b.castShadow && (g.castShadow = b.castShadow);void 0 !== b.receiveShadow && (g.receiveShadow = b.receiveShadow);b.shadow && (void 0 !== b.shadow.bias && (g.shadow.bias = b.shadow.bias), void 0 !== b.shadow.radius && (g.shadow.radius = b.shadow.radius), void 0 !== b.shadow.mapSize && g.shadow.mapSize.fromArray(b.shadow.mapSize), void 0 !== b.shadow.camera && (g.shadow.camera = this.parseObject(b.shadow.camera)));void 0 !== b.visible && (g.visible = b.visible);void 0 !== b.userData && (g.userData = b.userData);if (void 0 !== b.children) for (var k in b.children) {
          g.add(this.parseObject(b.children[k], c, d));
        }if ("LOD" === b.type) for (b = b.levels, h = 0; h < b.length; h++) {
          var l = b[h];k = g.getObjectByProperty("uuid", l.object);void 0 !== k && g.addLevel(k, l.distance);
        }return g;
      };
    }() });ia.prototype = { constructor: ia, getPoint: function getPoint(a) {
      console.warn("THREE.Curve: Warning, getPoint() not implemented!");return null;
    }, getPointAt: function getPointAt(a) {
      a = this.getUtoTmapping(a);return this.getPoint(a);
    }, getPoints: function getPoints(a) {
      a || (a = 5);for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPoint(c / a));
      }return b;
    }, getSpacedPoints: function getSpacedPoints(a) {
      a || (a = 5);for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPointAt(c / a));
      }return b;
    }, getLength: function getLength() {
      var a = this.getLengths();return a[a.length - 1];
    }, getLengths: function getLengths(a) {
      a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;
      this.needsUpdate = !1;var b = [],
          c,
          d = this.getPoint(0),
          e,
          f = 0;b.push(0);for (e = 1; e <= a; e++) {
        c = this.getPoint(e / a), f += c.distanceTo(d), b.push(f), d = c;
      }return this.cacheArcLengths = b;
    }, updateArcLengths: function updateArcLengths() {
      this.needsUpdate = !0;this.getLengths();
    }, getUtoTmapping: function getUtoTmapping(a, b) {
      var c = this.getLengths(),
          d,
          e = c.length,
          f;f = b ? b : a * c[e - 1];for (var g = 0, h = e - 1, k; g <= h;) {
        if (d = Math.floor(g + (h - g) / 2), k = c[d] - f, 0 > k) g = d + 1;else if (0 < k) h = d - 1;else {
          h = d;break;
        }
      }d = h;if (c[d] === f) return d / (e - 1);g = c[d];return (d + (f - g) / (c[d + 1] - g)) / (e - 1);
    }, getTangent: function getTangent(a) {
      var b = a - 1E-4;a += 1E-4;0 > b && (b = 0);1 < a && (a = 1);b = this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize();
    }, getTangentAt: function getTangentAt(a) {
      a = this.getUtoTmapping(a);return this.getTangent(a);
    }, computeFrenetFrames: function computeFrenetFrames(a, b) {
      var c = new q(),
          d = [],
          e = [],
          f = [],
          g = new q(),
          h = new J(),
          k,
          l;for (k = 0; k <= a; k++) {
        l = k / a, d[k] = this.getTangentAt(l), d[k].normalize();
      }e[0] = new q();f[0] = new q();k = Number.MAX_VALUE;l = Math.abs(d[0].x);var w = Math.abs(d[0].y),
          n = Math.abs(d[0].z);l <= k && (k = l, c.set(1, 0, 0));w <= k && (k = w, c.set(0, 1, 0));n <= k && c.set(0, 0, 1);
      g.crossVectors(d[0], c).normalize();e[0].crossVectors(d[0], g);f[0].crossVectors(d[0], e[0]);for (k = 1; k <= a; k++) {
        e[k] = e[k - 1].clone(), f[k] = f[k - 1].clone(), g.crossVectors(d[k - 1], d[k]), g.length() > Number.EPSILON && (g.normalize(), c = Math.acos(T.clamp(d[k - 1].dot(d[k]), -1, 1)), e[k].applyMatrix4(h.makeRotationAxis(g, c))), f[k].crossVectors(d[k], e[k]);
      }if (!0 === b) for (c = Math.acos(T.clamp(e[0].dot(e[a]), -1, 1)), c /= a, 0 < d[0].dot(g.crossVectors(e[0], e[a])) && (c = -c), k = 1; k <= a; k++) {
        e[k].applyMatrix4(h.makeRotationAxis(d[k], c * k)), f[k].crossVectors(d[k], e[k]);
      }return { tangents: d, normals: e, binormals: f };
    } };ia.create = function (a, b) {
    a.prototype = Object.create(ia.prototype);a.prototype.constructor = a;a.prototype.getPoint = b;return a;
  };Sa.prototype = Object.create(ia.prototype);Sa.prototype.constructor = Sa;Sa.prototype.isLineCurve = !0;Sa.prototype.getPoint = function (a) {
    if (1 === a) return this.v2.clone();var b = this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b;
  };Sa.prototype.getPointAt = function (a) {
    return this.getPoint(a);
  };Sa.prototype.getTangent = function (a) {
    return this.v2.clone().sub(this.v1).normalize();
  };Oc.prototype = Object.assign(Object.create(ia.prototype), { constructor: Oc, add: function add(a) {
      this.curves.push(a);
    }, closePath: function closePath() {
      var a = this.curves[0].getPoint(0),
          b = this.curves[this.curves.length - 1].getPoint(1);a.equals(b) || this.curves.push(new Sa(b, a));
    }, getPoint: function getPoint(a) {
      var b = a * this.getLength(),
          c = this.getCurveLengths();for (a = 0; a < c.length;) {
        if (c[a] >= b) return b = c[a] - b, a = this.curves[a], c = a.getLength(), a.getPointAt(0 === c ? 0 : 1 - b / c);a++;
      }return null;
    },
    getLength: function getLength() {
      var a = this.getCurveLengths();return a[a.length - 1];
    }, updateArcLengths: function updateArcLengths() {
      this.needsUpdate = !0;this.cacheLengths = null;this.getLengths();
    }, getCurveLengths: function getCurveLengths() {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;for (var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++) {
        b += this.curves[c].getLength(), a.push(b);
      }return this.cacheLengths = a;
    }, getSpacedPoints: function getSpacedPoints(a) {
      a || (a = 40);for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPoint(c / a));
      }this.autoClose && b.push(b[0]);return b;
    }, getPoints: function getPoints(a) {
      a = a || 12;for (var b = [], c, d = 0, e = this.curves; d < e.length; d++) {
        for (var f = e[d], f = f.getPoints(f && f.isEllipseCurve ? 2 * a : f && f.isLineCurve ? 1 : f && f.isSplineCurve ? a * f.points.length : a), g = 0; g < f.length; g++) {
          var h = f[g];c && c.equals(h) || (b.push(h), c = h);
        }
      }this.autoClose && 1 < b.length && !b[b.length - 1].equals(b[0]) && b.push(b[0]);return b;
    }, createPointsGeometry: function createPointsGeometry(a) {
      a = this.getPoints(a);return this.createGeometry(a);
    }, createSpacedPointsGeometry: function createSpacedPointsGeometry(a) {
      a = this.getSpacedPoints(a);
      return this.createGeometry(a);
    }, createGeometry: function createGeometry(a) {
      for (var b = new Q(), c = 0, d = a.length; c < d; c++) {
        var e = a[c];b.vertices.push(new q(e.x, e.y, e.z || 0));
      }return b;
    } });Va.prototype = Object.create(ia.prototype);Va.prototype.constructor = Va;Va.prototype.isEllipseCurve = !0;Va.prototype.getPoint = function (a) {
    for (var b = 2 * Math.PI, c = this.aEndAngle - this.aStartAngle, d = Math.abs(c) < Number.EPSILON; 0 > c;) {
      c += b;
    }for (; c > b;) {
      c -= b;
    }c < Number.EPSILON && (c = d ? 0 : b);!0 !== this.aClockwise || d || (c = c === b ? -b : c - b);b = this.aStartAngle + a * c;a = this.aX + this.xRadius * Math.cos(b);var e = this.aY + this.yRadius * Math.sin(b);0 !== this.aRotation && (b = Math.cos(this.aRotation), c = Math.sin(this.aRotation), d = a - this.aX, e -= this.aY, a = d * b - e * c + this.aX, e = d * c + e * b + this.aY);return new B(a, e);
  };var Xc = { tangentQuadraticBezier: function tangentQuadraticBezier(a, b, c, d) {
      return 2 * (1 - a) * (c - b) + 2 * a * (d - c);
    }, tangentCubicBezier: function tangentCubicBezier(a, b, c, d, e) {
      return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e;
    }, tangentSpline: function tangentSpline(a, b, c, d, e) {
      return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a);
    }, interpolate: function interpolate(a, b, c, d, e) {
      a = .5 * (c - a);d = .5 * (d - b);var f = e * e;return (2 * b - 2 * c + a + d) * e * f + (-3 * b + 3 * c - 2 * a - d) * f + a * e + b;
    } };xb.prototype = Object.create(ia.prototype);xb.prototype.constructor = xb;xb.prototype.isSplineCurve = !0;xb.prototype.getPoint = function (a) {
    var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 === c ? c : c - 1],
        e = b[c],
        f = b[c > b.length - 2 ? b.length - 1 : c + 1],
        b = b[c > b.length - 3 ? b.length - 1 : c + 2],
        c = Xc.interpolate;return new B(c(d.x, e.x, f.x, b.x, a), c(d.y, e.y, f.y, b.y, a));
  };yb.prototype = Object.create(ia.prototype);
  yb.prototype.constructor = yb;yb.prototype.getPoint = function (a) {
    var b = ra.b3;return new B(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y));
  };yb.prototype.getTangent = function (a) {
    var b = Xc.tangentCubicBezier;return new B(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y)).normalize();
  };zb.prototype = Object.create(ia.prototype);zb.prototype.constructor = zb;zb.prototype.getPoint = function (a) {
    var b = ra.b2;return new B(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y));
  };zb.prototype.getTangent = function (a) {
    var b = Xc.tangentQuadraticBezier;return new B(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y)).normalize();
  };var de = Object.assign(Object.create(Oc.prototype), { fromPoints: function fromPoints(a) {
      this.moveTo(a[0].x, a[0].y);for (var b = 1, c = a.length; b < c; b++) {
        this.lineTo(a[b].x, a[b].y);
      }
    }, moveTo: function moveTo(a, b) {
      this.currentPoint.set(a, b);
    }, lineTo: function lineTo(a, b) {
      var c = new Sa(this.currentPoint.clone(), new B(a, b));
      this.curves.push(c);this.currentPoint.set(a, b);
    }, quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
      a = new zb(this.currentPoint.clone(), new B(a, b), new B(c, d));this.curves.push(a);this.currentPoint.set(c, d);
    }, bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
      a = new yb(this.currentPoint.clone(), new B(a, b), new B(c, d), new B(e, f));this.curves.push(a);this.currentPoint.set(e, f);
    }, splineThru: function splineThru(a) {
      var b = [this.currentPoint.clone()].concat(a),
          b = new xb(b);this.curves.push(b);this.currentPoint.copy(a[a.length - 1]);
    }, arc: function arc(a, b, c, d, e, f) {
      this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f);
    }, absarc: function absarc(a, b, c, d, e, f) {
      this.absellipse(a, b, c, c, d, e, f);
    }, ellipse: function ellipse(a, b, c, d, e, f, g, h) {
      this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f, g, h);
    }, absellipse: function absellipse(a, b, c, d, e, f, g, h) {
      a = new Va(a, b, c, d, e, f, g, h);0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));this.curves.push(a);a = a.getPoint(1);this.currentPoint.copy(a);
    } });Ab.prototype = Object.assign(Object.create(de), { constructor: Ab, getPointsHoles: function getPointsHoles(a) {
      for (var b = [], c = 0, d = this.holes.length; c < d; c++) {
        b[c] = this.holes[c].getPoints(a);
      }return b;
    }, extractAllPoints: function extractAllPoints(a) {
      return { shape: this.getPoints(a), holes: this.getPointsHoles(a) };
    }, extractPoints: function extractPoints(a) {
      return this.extractAllPoints(a);
    } });Pc.prototype = de;de.constructor = Pc;Kd.prototype = { moveTo: function moveTo(a, b) {
      this.currentPath = new Pc();this.subPaths.push(this.currentPath);this.currentPath.moveTo(a, b);
    }, lineTo: function lineTo(a, b) {
      this.currentPath.lineTo(a, b);
    }, quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
      this.currentPath.quadraticCurveTo(a, b, c, d);
    }, bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
      this.currentPath.bezierCurveTo(a, b, c, d, e, f);
    }, splineThru: function splineThru(a) {
      this.currentPath.splineThru(a);
    }, toShapes: function toShapes(a, b) {
      function c(a) {
        for (var b = [], c = 0, d = a.length; c < d; c++) {
          var e = a[c],
              f = new Ab();f.curves = e.curves;b.push(f);
        }return b;
      }function d(a, b) {
        for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
          var g = b[e],
              h = b[f],
              k = h.x - g.x,
              l = h.y - g.y;if (Math.abs(l) > Number.EPSILON) {
            if (0 > l && (g = b[f], k = -k, h = b[e], l = -l), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
              if (a.x === g.x) return !0;
            } else {
              e = l * (a.x - g.x) - k * (a.y - g.y);if (0 === e) return !0;0 > e || (d = !d);
            }
          } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
        }return d;
      }var e = ra.isClockWise,
          f = this.subPaths;if (0 === f.length) return [];if (!0 === b) return c(f);var g,
          h,
          k,
          l = [];if (1 === f.length) return h = f[0], k = new Ab(), k.curves = h.curves, l.push(k), l;var q = !e(f[0].getPoints()),
          q = a ? !q : q;k = [];var n = [],
          p = [],
          r = 0,
          x;n[r] = void 0;p[r] = [];for (var t = 0, D = f.length; t < D; t++) {
        h = f[t], x = h.getPoints(), g = e(x), (g = a ? !g : g) ? (!q && n[r] && r++, n[r] = { s: new Ab(), p: x }, n[r].s.curves = h.curves, q && r++, p[r] = []) : p[r].push({ h: h, p: x[0] });
      }if (!n[0]) return c(f);if (1 < n.length) {
        t = !1;h = [];e = 0;for (f = n.length; e < f; e++) {
          k[e] = [];
        }e = 0;for (f = n.length; e < f; e++) {
          for (g = p[e], q = 0; q < g.length; q++) {
            r = g[q];x = !0;for (D = 0; D < n.length; D++) {
              d(r.p, n[D].p) && (e !== D && h.push({ froms: e, tos: D, hole: q }), x ? (x = !1, k[D].push(r)) : t = !0);
            }x && k[e].push(r);
          }
        }0 < h.length && (t || (p = k));
      }t = 0;for (e = n.length; t < e; t++) {
        for (k = n[t].s, l.push(k), h = p[t], f = 0, g = h.length; f < g; f++) {
          k.holes.push(h[f].h);
        }
      }return l;
    } };Object.assign(Ld.prototype, { isFont: !0, generateShapes: function generateShapes(a, b, c) {
      void 0 === b && (b = 100);void 0 === c && (c = 4);var d = this.data;a = String(a).split("");var e = b / d.resolution,
          f = 0;b = [];for (var g = 0; g < a.length; g++) {
        var h;h = e;var k = f,
            l = d.glyphs[a[g]] || d.glyphs["?"];if (l) {
          var q = new Kd(),
              n = [],
              p = ra.b2,
              r = ra.b3,
              x,
              t,
              D,
              u,
              v,
              z,
              y,
              E;if (l.o) for (var B = l._cachedOutline || (l._cachedOutline = l.o.split(" ")), C = 0, G = B.length; C < G;) {
            switch (B[C++]) {case "m":
                x = B[C++] * h + k;t = B[C++] * h;q.moveTo(x, t);break;case "l":
                x = B[C++] * h + k;t = B[C++] * h;q.lineTo(x, t);break;case "q":
                x = B[C++] * h + k;t = B[C++] * h;v = B[C++] * h + k;z = B[C++] * h;q.quadraticCurveTo(v, z, x, t);if (u = n[n.length - 1]) {
                  D = u.x;u = u.y;for (var J = 1; J <= c; J++) {
                    var K = J / c;p(K, D, v, x);p(K, u, z, t);
                  }
                }break;case "b":
                if (x = B[C++] * h + k, t = B[C++] * h, v = B[C++] * h + k, z = B[C++] * h, y = B[C++] * h + k, E = B[C++] * h, q.bezierCurveTo(v, z, y, E, x, t), u = n[n.length - 1]) for (D = u.x, u = u.y, J = 1; J <= c; J++) {
                  K = J / c, r(K, D, v, y, x), r(K, u, z, E, t);
                }}
          }h = { offset: l.ha * h, path: q };
        } else h = void 0;f += h.offset;b.push(h.path);
      }c = [];d = 0;for (a = b.length; d < a; d++) {
        Array.prototype.push.apply(c, b[d].toShapes());
      }return c;
    } });Object.assign(ye.prototype, { load: function load(a, b, c, d) {
      var e = this;new Ja(this.manager).load(a, function (a) {
        var c;try {
          c = JSON.parse(a);
        } catch (d) {
          console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), c = JSON.parse(a.substring(65, a.length - 2));
        }a = e.parse(c);b && b(a);
      }, c, d);
    }, parse: function parse(a) {
      return new Ld(a);
    } });var Nd;Object.assign(Od.prototype, { load: function load(a, b, c, d) {
      var e = new Ja(this.manager);e.setResponseType("arraybuffer");e.load(a, function (a) {
        Md().decodeAudioData(a, function (a) {
          b(a);
        });
      }, c, d);
    } });Object.assign(ze.prototype, { update: function () {
      var a,
          b,
          c,
          d,
          e,
          f,
          g,
          h = new J(),
          k = new J();return function (l) {
        if (a !== this || b !== l.focus || c !== l.fov || d !== l.aspect * this.aspect || e !== l.near || f !== l.far || g !== l.zoom) {
          a = this;b = l.focus;c = l.fov;d = l.aspect * this.aspect;e = l.near;f = l.far;g = l.zoom;var q = l.projectionMatrix.clone(),
              n = this.eyeSep / 2,
              p = n * e / b,
              r = e * Math.tan(T.DEG2RAD * c * .5) / g,
              x;k.elements[12] = -n;h.elements[12] = n;n = -r * d + p;x = r * d + p;q.elements[0] = 2 * e / (x - n);q.elements[8] = (x + n) / (x - n);this.cameraL.projectionMatrix.copy(q);
          n = -r * d - p;x = r * d - p;q.elements[0] = 2 * e / (x - n);q.elements[8] = (x + n) / (x - n);this.cameraR.projectionMatrix.copy(q);
        }this.cameraL.matrixWorld.copy(l.matrixWorld).multiply(k);this.cameraR.matrixWorld.copy(l.matrixWorld).multiply(h);
      };
    }() });vd.prototype = Object.create(z.prototype);vd.prototype.constructor = vd;Pd.prototype = Object.assign(Object.create(z.prototype), { constructor: Pd, getInput: function getInput() {
      return this.gain;
    }, removeFilter: function removeFilter() {
      null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
    }, getFilter: function getFilter() {
      return this.filter;
    }, setFilter: function setFilter(a) {
      null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);this.filter = a;this.gain.connect(this.filter);this.filter.connect(this.context.destination);
    }, getMasterVolume: function getMasterVolume() {
      return this.gain.gain.value;
    }, setMasterVolume: function setMasterVolume(a) {
      this.gain.gain.value = a;
    }, updateMatrixWorld: function () {
      var a = new q(),
          b = new ba(),
          c = new q(),
          d = new q();return function (e) {
        z.prototype.updateMatrixWorld.call(this, e);e = this.context.listener;var f = this.up;this.matrixWorld.decompose(a, b, c);d.set(0, 0, -1).applyQuaternion(b);e.setPosition(a.x, a.y, a.z);e.setOrientation(d.x, d.y, d.z, f.x, f.y, f.z);
      };
    }() });$b.prototype = Object.assign(Object.create(z.prototype), { constructor: $b, getOutput: function getOutput() {
      return this.gain;
    }, setNodeSource: function setNodeSource(a) {
      this.hasPlaybackControl = !1;this.sourceType = "audioNode";this.source = a;this.connect();return this;
    },
    setBuffer: function setBuffer(a) {
      this.source.buffer = a;this.sourceType = "buffer";this.autoplay && this.play();return this;
    }, play: function play() {
      if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");else if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else {
        var a = this.context.createBufferSource();a.buffer = this.source.buffer;a.loop = this.source.loop;a.onended = this.source.onended;a.start(0, this.startTime);a.playbackRate.value = this.playbackRate;this.isPlaying = !0;this.source = a;return this.connect();
      }
    }, pause: function pause() {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(), this.startTime = this.context.currentTime, this.isPlaying = !1, this;
    }, stop: function stop() {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(), this.startTime = 0, this.isPlaying = !1, this;
    }, connect: function connect() {
      if (0 < this.filters.length) {
        this.source.connect(this.filters[0]);
        for (var a = 1, b = this.filters.length; a < b; a++) {
          this.filters[a - 1].connect(this.filters[a]);
        }this.filters[this.filters.length - 1].connect(this.getOutput());
      } else this.source.connect(this.getOutput());return this;
    }, disconnect: function disconnect() {
      if (0 < this.filters.length) {
        this.source.disconnect(this.filters[0]);for (var a = 1, b = this.filters.length; a < b; a++) {
          this.filters[a - 1].disconnect(this.filters[a]);
        }this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else this.source.disconnect(this.getOutput());return this;
    },
    getFilters: function getFilters() {
      return this.filters;
    }, setFilters: function setFilters(a) {
      a || (a = []);!0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;return this;
    }, getFilter: function getFilter() {
      return this.getFilters()[0];
    }, setFilter: function setFilter(a) {
      return this.setFilters(a ? [a] : []);
    }, setPlaybackRate: function setPlaybackRate(a) {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate = a, !0 === this.isPlaying && (this.source.playbackRate.value = this.playbackRate), this;
    }, getPlaybackRate: function getPlaybackRate() {
      return this.playbackRate;
    }, onEnded: function onEnded() {
      this.isPlaying = !1;
    }, getLoop: function getLoop() {
      return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.source.loop;
    }, setLoop: function setLoop(a) {
      !1 === this.hasPlaybackControl ? console.warn("THREE.Audio: this Audio has no playback control.") : this.source.loop = a;
    }, getVolume: function getVolume() {
      return this.gain.gain.value;
    }, setVolume: function setVolume(a) {
      this.gain.gain.value = a;return this;
    } });Qd.prototype = Object.assign(Object.create($b.prototype), { constructor: Qd, getOutput: function getOutput() {
      return this.panner;
    }, getRefDistance: function getRefDistance() {
      return this.panner.refDistance;
    }, setRefDistance: function setRefDistance(a) {
      this.panner.refDistance = a;
    }, getRolloffFactor: function getRolloffFactor() {
      return this.panner.rolloffFactor;
    }, setRolloffFactor: function setRolloffFactor(a) {
      this.panner.rolloffFactor = a;
    }, getDistanceModel: function getDistanceModel() {
      return this.panner.distanceModel;
    }, setDistanceModel: function setDistanceModel(a) {
      this.panner.distanceModel = a;
    }, getMaxDistance: function getMaxDistance() {
      return this.panner.maxDistance;
    }, setMaxDistance: function setMaxDistance(a) {
      this.panner.maxDistance = a;
    }, updateMatrixWorld: function () {
      var a = new q();return function (b) {
        z.prototype.updateMatrixWorld.call(this, b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x, a.y, a.z);
      };
    }() });Object.assign(Rd.prototype, { getFrequencyData: function getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);return this.data;
    }, getAverageFrequency: function getAverageFrequency() {
      for (var a = 0, b = this.getFrequencyData(), c = 0; c < b.length; c++) {
        a += b[c];
      }return a / b.length;
    } });wd.prototype = { constructor: wd, accumulate: function accumulate(a, b) {
      var c = this.buffer,
          d = this.valueSize,
          e = a * d + d,
          f = this.cumulativeWeight;if (0 === f) {
        for (f = 0; f !== d; ++f) {
          c[e + f] = c[f];
        }f = b;
      } else f += b, this._mixBufferRegion(c, e, 0, b / f, d);this.cumulativeWeight = f;
    }, apply: function apply(a) {
      var b = this.valueSize,
          c = this.buffer;a = a * b + b;var d = this.cumulativeWeight,
          e = this.binding;this.cumulativeWeight = 0;1 > d && this._mixBufferRegion(c, a, 3 * b, 1 - d, b);for (var d = b, f = b + b; d !== f; ++d) {
        if (c[d] !== c[d + b]) {
          e.setValue(c, a);break;
        }
      }
    }, saveOriginalState: function saveOriginalState() {
      var a = this.buffer,
          b = this.valueSize,
          c = 3 * b;this.binding.getValue(a, c);for (var d = b; d !== c; ++d) {
        a[d] = a[c + d % b];
      }this.cumulativeWeight = 0;
    }, restoreOriginalState: function restoreOriginalState() {
      this.binding.setValue(this.buffer, 3 * this.valueSize);
    }, _select: function _select(a, b, c, d, e) {
      if (.5 <= d) for (d = 0; d !== e; ++d) {
        a[b + d] = a[c + d];
      }
    }, _slerp: function _slerp(a, b, c, d, e) {
      ba.slerpFlat(a, b, a, b, a, c, d);
    }, _lerp: function _lerp(a, b, c, d, e) {
      for (var f = 1 - d, g = 0; g !== e; ++g) {
        var h = b + g;a[h] = a[h] * f + a[c + g] * d;
      }
    } };fa.prototype = { constructor: fa, getValue: function getValue(a, b) {
      this.bind();this.getValue(a, b);
    }, setValue: function setValue(a, b) {
      this.bind();this.setValue(a, b);
    }, bind: function bind() {
      var a = this.node,
          b = this.parsedPath,
          c = b.objectName,
          d = b.propertyName,
          e = b.propertyIndex;a || (this.node = a = fa.findNode(this.rootNode, b.nodeName) || this.rootNode);this.getValue = this._getValue_unavailable;this.setValue = this._setValue_unavailable;if (a) {
        if (c) {
          var f = b.objectIndex;switch (c) {case "materials":
              if (!a.material) {
                console.error("  can not bind to material as node does not have a material", this);return;
              }if (!a.material.materials) {
                console.error("  can not bind to material.materials as node.material does not have a materials array", this);return;
              }a = a.material.materials;break;case "bones":
              if (!a.skeleton) {
                console.error("  can not bind to bones as node does not have a skeleton", this);return;
              }a = a.skeleton.bones;for (c = 0; c < a.length; c++) {
                if (a[c].name === f) {
                  f = c;break;
                }
              }break;default:
              if (void 0 === a[c]) {
                console.error("  can not bind to objectName of node, undefined", this);return;
              }a = a[c];}if (void 0 !== f) {
            if (void 0 === a[f]) {
              console.error("  trying to bind to objectIndex of objectName, but is undefined:", this, a);return;
            }a = a[f];
          }
        }f = a[d];if (void 0 === f) console.error("  trying to update property for track: " + b.nodeName + "." + d + " but it wasn't found.", a);else {
          b = this.Versioning.None;void 0 !== a.needsUpdate ? (b = this.Versioning.NeedsUpdate, this.targetObject = a) : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate, this.targetObject = a);c = this.BindingType.Direct;if (void 0 !== e) {
            if ("morphTargetInfluences" === d) {
              if (!a.geometry) {
                console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry", this);return;
              }if (!a.geometry.morphTargets) {
                console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets", this);return;
              }for (c = 0; c < this.node.geometry.morphTargets.length; c++) {
                if (a.geometry.morphTargets[c].name === e) {
                  e = c;break;
                }
              }
            }c = this.BindingType.ArrayElement;this.resolvedProperty = f;this.propertyIndex = e;
          } else void 0 !== f.fromArray && void 0 !== f.toArray ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = f) : void 0 !== f.length ? (c = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = d;this.getValue = this.GetterByBindingType[c];this.setValue = this.SetterByBindingTypeAndVersioning[c][b];
        }
      } else console.error("  trying to update node for track: " + this.path + " but it wasn't found.");
    }, unbind: function unbind() {
      this.node = null;this.getValue = this._getValue_unbound;this.setValue = this._setValue_unbound;
    } };Object.assign(fa.prototype, { _getValue_unavailable: function _getValue_unavailable() {}, _setValue_unavailable: function _setValue_unavailable() {}, _getValue_unbound: fa.prototype.getValue, _setValue_unbound: fa.prototype.setValue, BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }, Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }, GetterByBindingType: [function (a, b) {
      a[b] = this.node[this.propertyName];
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        a[b++] = c[d];
      }
    }, function (a, b) {
      a[b] = this.resolvedProperty[this.propertyIndex];
    }, function (a, b) {
      this.resolvedProperty.toArray(a, b);
    }], SetterByBindingTypeAndVersioning: [[function (a, b) {
      this.node[this.propertyName] = a[b];
    }, function (a, b) {
      this.node[this.propertyName] = a[b];this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.node[this.propertyName] = a[b];this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];
    }, function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];
      this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      this.resolvedProperty.fromArray(a, b);
    }, function (a, b) {
      this.resolvedProperty.fromArray(a, b);this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.resolvedProperty.fromArray(a, b);this.targetObject.matrixWorldNeedsUpdate = !0;
    }]] });fa.Composite = function (a, b, c) {
    c = c || fa.parseTrackName(b);this._targetGroup = a;this._bindings = a.subscribe_(b, c);
  };fa.Composite.prototype = { constructor: fa.Composite, getValue: function getValue(a, b) {
      this.bind();var c = this._bindings[this._targetGroup.nCachedObjects_];
      void 0 !== c && c.getValue(a, b);
    }, setValue: function setValue(a, b) {
      for (var c = this._bindings, d = this._targetGroup.nCachedObjects_, e = c.length; d !== e; ++d) {
        c[d].setValue(a, b);
      }
    }, bind: function bind() {
      for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
        a[b].bind();
      }
    }, unbind: function unbind() {
      for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
        a[b].unbind();
      }
    } };fa.create = function (a, b, c) {
    return a && a.isAnimationObjectGroup ? new fa.Composite(a, b, c) : new fa(a, b, c);
  };fa.parseTrackName = function (a) {
    var b = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/.exec(a);if (!b) throw Error("cannot parse trackName at all: " + a);b = { nodeName: b[2], objectName: b[3], objectIndex: b[4], propertyName: b[5], propertyIndex: b[6] };if (null === b.propertyName || 0 === b.propertyName.length) throw Error("can not parse propertyName from trackName: " + a);return b;
  };fa.findNode = function (a, b) {
    if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;if (a.skeleton) {
      var c = function (a) {
        for (var c = 0; c < a.bones.length; c++) {
          var d = a.bones[c];if (d.name === b) return d;
        }return null;
      }(a.skeleton);if (c) return c;
    }if (a.children) {
      var d = function d(a) {
        for (var c = 0; c < a.length; c++) {
          var g = a[c];if (g.name === b || g.uuid === b || (g = d(g.children))) return g;
        }return null;
      };if (c = d(a.children)) return c;
    }return null;
  };Sd.prototype = { constructor: Sd, isAnimationObjectGroup: !0, add: function add(a) {
      for (var b = this._objects, c = b.length, d = this.nCachedObjects_, e = this._indicesByUUID, f = this._paths, g = this._parsedPaths, h = this._bindings, k = h.length, l = 0, q = arguments.length; l !== q; ++l) {
        var n = arguments[l],
            p = n.uuid,
            r = e[p];if (void 0 === r) {
          r = c++;e[p] = r;b.push(n);for (var p = 0, x = k; p !== x; ++p) {
            h[p].push(new fa(n, f[p], g[p]));
          }
        } else if (r < d) {
          var t = b[r],
              D = --d,
              x = b[D];e[x.uuid] = r;b[r] = x;e[p] = D;b[D] = n;p = 0;for (x = k; p !== x; ++p) {
            var u = h[p],
                v = u[r];u[r] = u[D];void 0 === v && (v = new fa(n, f[p], g[p]));u[D] = v;
          }
        } else b[r] !== t && console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...");
      }this.nCachedObjects_ = d;
    }, remove: function remove(a) {
      for (var b = this._objects, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._bindings, f = e.length, g = 0, h = arguments.length; g !== h; ++g) {
        var k = arguments[g],
            l = k.uuid,
            q = d[l];if (void 0 !== q && q >= c) {
          var n = c++,
              p = b[n];d[p.uuid] = q;b[q] = p;d[l] = n;b[n] = k;k = 0;for (l = f; k !== l; ++k) {
            var p = e[k],
                r = p[q];p[q] = p[n];p[n] = r;
          }
        }
      }this.nCachedObjects_ = c;
    }, uncache: function uncache(a) {
      for (var b = this._objects, c = b.length, d = this.nCachedObjects_, e = this._indicesByUUID, f = this._bindings, g = f.length, h = 0, k = arguments.length; h !== k; ++h) {
        var l = arguments[h].uuid,
            q = e[l];if (void 0 !== q) if (delete e[l], q < d) {
          var l = --d,
              n = b[l],
              p = --c,
              r = b[p];e[n.uuid] = q;b[q] = n;e[r.uuid] = l;b[l] = r;b.pop();n = 0;for (r = g; n !== r; ++n) {
            var x = f[n],
                t = x[p];x[q] = x[l];x[l] = t;x.pop();
          }
        } else for (p = --c, r = b[p], e[r.uuid] = q, b[q] = r, b.pop(), n = 0, r = g; n !== r; ++n) {
          x = f[n], x[q] = x[p], x.pop();
        }
      }this.nCachedObjects_ = d;
    }, subscribe_: function subscribe_(a, b) {
      var c = this._bindingsIndicesByPath,
          d = c[a],
          e = this._bindings;if (void 0 !== d) return e[d];var f = this._paths,
          g = this._parsedPaths,
          h = this._objects,
          k = this.nCachedObjects_,
          l = Array(h.length),
          d = e.length;c[a] = d;f.push(a);g.push(b);e.push(l);c = k;for (d = h.length; c !== d; ++c) {
        l[c] = new fa(h[c], a, b);
      }return l;
    }, unsubscribe_: function unsubscribe_(a) {
      var b = this._bindingsIndicesByPath,
          c = b[a];if (void 0 !== c) {
        var d = this._paths,
            e = this._parsedPaths,
            f = this._bindings,
            g = f.length - 1,
            h = f[g];b[a[g]] = c;f[c] = h;f.pop();e[c] = e[g];e.pop();d[c] = d[g];d.pop();
      }
    } };Td.prototype = { constructor: Td, play: function play() {
      this._mixer._activateAction(this);return this;
    }, stop: function stop() {
      this._mixer._deactivateAction(this);return this.reset();
    }, reset: function reset() {
      this.paused = !1;this.enabled = !0;this.time = 0;this._loopCount = -1;this._startTime = null;return this.stopFading().stopWarping();
    }, isRunning: function isRunning() {
      return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
    }, isScheduled: function isScheduled() {
      return this._mixer._isActiveAction(this);
    }, startAt: function startAt(a) {
      this._startTime = a;return this;
    }, setLoop: function setLoop(a, b) {
      this.loop = a;this.repetitions = b;return this;
    }, setEffectiveWeight: function setEffectiveWeight(a) {
      this.weight = a;this._effectiveWeight = this.enabled ? a : 0;return this.stopFading();
    }, getEffectiveWeight: function getEffectiveWeight() {
      return this._effectiveWeight;
    }, fadeIn: function fadeIn(a) {
      return this._scheduleFading(a, 0, 1);
    }, fadeOut: function fadeOut(a) {
      return this._scheduleFading(a, 1, 0);
    }, crossFadeFrom: function crossFadeFrom(a, b, c) {
      a.fadeOut(b);this.fadeIn(b);if (c) {
        c = this._clip.duration;var d = a._clip.duration,
            e = c / d;a.warp(1, d / c, b);this.warp(e, 1, b);
      }return this;
    }, crossFadeTo: function crossFadeTo(a, b, c) {
      return a.crossFadeFrom(this, b, c);
    }, stopFading: function stopFading() {
      var a = this._weightInterpolant;null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));return this;
    }, setEffectiveTimeScale: function setEffectiveTimeScale(a) {
      this.timeScale = a;this._effectiveTimeScale = this.paused ? 0 : a;return this.stopWarping();
    }, getEffectiveTimeScale: function getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    }, setDuration: function setDuration(a) {
      this.timeScale = this._clip.duration / a;return this.stopWarping();
    }, syncWith: function syncWith(a) {
      this.time = a.time;this.timeScale = a.timeScale;return this.stopWarping();
    }, halt: function halt(a) {
      return this.warp(this._effectiveTimeScale, 0, a);
    }, warp: function warp(a, b, c) {
      var d = this._mixer,
          e = d.time,
          f = this._timeScaleInterpolant,
          g = this.timeScale;null === f && (this._timeScaleInterpolant = f = d._lendControlInterpolant());d = f.parameterPositions;f = f.sampleValues;d[0] = e;d[1] = e + c;f[0] = a / g;f[1] = b / g;return this;
    }, stopWarping: function stopWarping() {
      var a = this._timeScaleInterpolant;null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));return this;
    }, getMixer: function getMixer() {
      return this._mixer;
    }, getClip: function getClip() {
      return this._clip;
    }, getRoot: function getRoot() {
      return this._localRoot || this._mixer._root;
    }, _update: function _update(a, b, c, d) {
      var e = this._startTime;if (null !== e) {
        b = (a - e) * c;if (0 > b || 0 === c) return;this._startTime = null;b *= c;
      }b *= this._updateTimeScale(a);c = this._updateTime(b);a = this._updateWeight(a);if (0 < a) {
        b = this._interpolants;for (var e = this._propertyBindings, f = 0, g = b.length; f !== g; ++f) {
          b[f].evaluate(c), e[f].accumulate(d, a);
        }
      }
    }, _updateWeight: function _updateWeight(a) {
      var b = 0;if (this.enabled) {
        var b = this.weight,
            c = this._weightInterpolant;if (null !== c) {
          var d = c.evaluate(a)[0],
              b = b * d;a > c.parameterPositions[1] && (this.stopFading(), 0 === d && (this.enabled = !1));
        }
      }return this._effectiveWeight = b;
    }, _updateTimeScale: function _updateTimeScale(a) {
      var b = 0;if (!this.paused) {
        var b = this.timeScale,
            c = this._timeScaleInterpolant;if (null !== c) {
          var d = c.evaluate(a)[0],
              b = b * d;a > c.parameterPositions[1] && (this.stopWarping(), 0 === b ? this.paused = !0 : this.timeScale = b);
        }
      }return this._effectiveTimeScale = b;
    }, _updateTime: function _updateTime(a) {
      var b = this.time + a;if (0 === a) return b;var c = this._clip.duration,
          d = this.loop,
          e = this._loopCount;if (2200 === d) a: {
        if (-1 === e && (this.loopCount = 0, this._setEndings(!0, !0, !1)), b >= c) b = c;else if (0 > b) b = 0;else break a;this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;this._mixer.dispatchEvent({ type: "finished", action: this, direction: 0 > a ? -1 : 1 });
      } else {
        d = 2202 === d;-1 === e && (0 <= a ? (e = 0, this._setEndings(!0, 0 === this.repetitions, d)) : this._setEndings(0 === this.repetitions, !0, d));if (b >= c || 0 > b) {
          var f = Math.floor(b / c),
              b = b - c * f,
              e = e + Math.abs(f),
              g = this.repetitions - e;0 > g ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, b = 0 < a ? c : 0, this._mixer.dispatchEvent({ type: "finished",
            action: this, direction: 0 < a ? 1 : -1 })) : (0 === g ? (a = 0 > a, this._setEndings(a, !a, d)) : this._setEndings(!1, !1, d), this._loopCount = e, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: f }));
        }if (d && 1 === (e & 1)) return this.time = b, c - b;
      }return this.time = b;
    }, _setEndings: function _setEndings(a, b, c) {
      var d = this._interpolantSettings;c ? (d.endingStart = 2401, d.endingEnd = 2401) : (d.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, d.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
    }, _scheduleFading: function _scheduleFading(a, b, c) {
      var d = this._mixer,
          e = d.time,
          f = this._weightInterpolant;null === f && (this._weightInterpolant = f = d._lendControlInterpolant());d = f.parameterPositions;f = f.sampleValues;d[0] = e;f[0] = b;d[1] = e + a;f[1] = c;return this;
    } };Object.assign(Ud.prototype, sa.prototype, { clipAction: function clipAction(a, b) {
      var c = b || this._root,
          d = c.uuid,
          e = "string" === typeof a ? Ha.findByName(c, a) : a,
          c = null !== e ? e.uuid : a,
          f = this._actionsByClip[c],
          g = null;if (void 0 !== f) {
        g = f.actionByRoot[d];if (void 0 !== g) return g;g = f.knownActions[0];null === e && (e = g._clip);
      }if (null === e) return null;e = new Td(this, e, b);this._bindAction(e, g);this._addInactiveAction(e, c, d);return e;
    }, existingAction: function existingAction(a, b) {
      var c = b || this._root,
          d = c.uuid,
          c = "string" === typeof a ? Ha.findByName(c, a) : a,
          c = this._actionsByClip[c ? c.uuid : a];return void 0 !== c ? c.actionByRoot[d] || null : null;
    }, stopAllAction: function stopAllAction() {
      for (var a = this._actions, b = this._nActiveActions, c = this._bindings, d = this._nActiveBindings, e = this._nActiveBindings = this._nActiveActions = 0; e !== b; ++e) {
        a[e].reset();
      }for (e = 0; e !== d; ++e) {
        c[e].useCount = 0;
      }return this;
    }, update: function update(a) {
      a *= this.timeScale;for (var b = this._actions, c = this._nActiveActions, d = this.time += a, e = Math.sign(a), f = this._accuIndex ^= 1, g = 0; g !== c; ++g) {
        var h = b[g];h.enabled && h._update(d, a, e, f);
      }a = this._bindings;b = this._nActiveBindings;for (g = 0; g !== b; ++g) {
        a[g].apply(f);
      }return this;
    }, getRoot: function getRoot() {
      return this._root;
    }, uncacheClip: function uncacheClip(a) {
      var b = this._actions;a = a.uuid;var c = this._actionsByClip,
          d = c[a];if (void 0 !== d) {
        for (var d = d.knownActions, e = 0, f = d.length; e !== f; ++e) {
          var g = d[e];this._deactivateAction(g);var h = g._cacheIndex,
              k = b[b.length - 1];g._cacheIndex = null;g._byClipCacheIndex = null;k._cacheIndex = h;b[h] = k;b.pop();this._removeInactiveBindingsForAction(g);
        }delete c[a];
      }
    }, uncacheRoot: function uncacheRoot(a) {
      a = a.uuid;var b = this._actionsByClip,
          c;for (c in b) {
        var d = b[c].actionByRoot[a];void 0 !== d && (this._deactivateAction(d), this._removeInactiveAction(d));
      }c = this._bindingsByRootAndName[a];if (void 0 !== c) for (var e in c) {
        a = c[e], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    }, uncacheAction: function uncacheAction(a, b) {
      var c = this.existingAction(a, b);
      null !== c && (this._deactivateAction(c), this._removeInactiveAction(c));
    } });Object.assign(Ud.prototype, { _bindAction: function _bindAction(a, b) {
      var c = a._localRoot || this._root,
          d = a._clip.tracks,
          e = d.length,
          f = a._propertyBindings,
          g = a._interpolants,
          h = c.uuid,
          k = this._bindingsByRootAndName,
          l = k[h];void 0 === l && (l = {}, k[h] = l);for (k = 0; k !== e; ++k) {
        var q = d[k],
            n = q.name,
            p = l[n];if (void 0 === p) {
          p = f[k];if (void 0 !== p) {
            null === p._cacheIndex && (++p.referenceCount, this._addInactiveBinding(p, h, n));continue;
          }p = new wd(fa.create(c, n, b && b._propertyBindings[k].binding.parsedPath), q.ValueTypeName, q.getValueSize());++p.referenceCount;this._addInactiveBinding(p, h, n);
        }f[k] = p;g[k].resultBuffer = p.buffer;
      }
    }, _activateAction: function _activateAction(a) {
      if (!this._isActiveAction(a)) {
        if (null === a._cacheIndex) {
          var b = (a._localRoot || this._root).uuid,
              c = a._clip.uuid,
              d = this._actionsByClip[c];this._bindAction(a, d && d.knownActions[0]);this._addInactiveAction(a, c, b);
        }b = a._propertyBindings;c = 0;for (d = b.length; c !== d; ++c) {
          var e = b[c];0 === e.useCount++ && (this._lendBinding(e), e.saveOriginalState());
        }this._lendAction(a);
      }
    },
    _deactivateAction: function _deactivateAction(a) {
      if (this._isActiveAction(a)) {
        for (var b = a._propertyBindings, c = 0, d = b.length; c !== d; ++c) {
          var e = b[c];0 === --e.useCount && (e.restoreOriginalState(), this._takeBackBinding(e));
        }this._takeBackAction(a);
      }
    }, _initMemoryManager: function _initMemoryManager() {
      this._actions = [];this._nActiveActions = 0;this._actionsByClip = {};this._bindings = [];this._nActiveBindings = 0;this._bindingsByRootAndName = {};this._controlInterpolants = [];this._nActiveControlInterpolants = 0;var a = this;this.stats = { actions: { get total() {
            return a._actions.length;
          },
          get inUse() {
            return a._nActiveActions;
          } }, bindings: { get total() {
            return a._bindings.length;
          }, get inUse() {
            return a._nActiveBindings;
          } }, controlInterpolants: { get total() {
            return a._controlInterpolants.length;
          }, get inUse() {
            return a._nActiveControlInterpolants;
          } } };
    }, _isActiveAction: function _isActiveAction(a) {
      a = a._cacheIndex;return null !== a && a < this._nActiveActions;
    }, _addInactiveAction: function _addInactiveAction(a, b, c) {
      var d = this._actions,
          e = this._actionsByClip,
          f = e[b];void 0 === f ? (f = { knownActions: [a], actionByRoot: {} }, a._byClipCacheIndex = 0, e[b] = f) : (b = f.knownActions, a._byClipCacheIndex = b.length, b.push(a));a._cacheIndex = d.length;d.push(a);f.actionByRoot[c] = a;
    }, _removeInactiveAction: function _removeInactiveAction(a) {
      var b = this._actions,
          c = b[b.length - 1],
          d = a._cacheIndex;c._cacheIndex = d;b[d] = c;b.pop();a._cacheIndex = null;var c = a._clip.uuid,
          d = this._actionsByClip,
          e = d[c],
          f = e.knownActions,
          g = f[f.length - 1],
          h = a._byClipCacheIndex;g._byClipCacheIndex = h;f[h] = g;f.pop();a._byClipCacheIndex = null;delete e.actionByRoot[(b._localRoot || this._root).uuid];0 === f.length && delete d[c];this._removeInactiveBindingsForAction(a);
    },
    _removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(a) {
      a = a._propertyBindings;for (var b = 0, c = a.length; b !== c; ++b) {
        var d = a[b];0 === --d.referenceCount && this._removeInactiveBinding(d);
      }
    }, _lendAction: function _lendAction(a) {
      var b = this._actions,
          c = a._cacheIndex,
          d = this._nActiveActions++,
          e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
    }, _takeBackAction: function _takeBackAction(a) {
      var b = this._actions,
          c = a._cacheIndex,
          d = --this._nActiveActions,
          e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
    }, _addInactiveBinding: function _addInactiveBinding(a, b, c) {
      var d = this._bindingsByRootAndName,
          e = d[b],
          f = this._bindings;void 0 === e && (e = {}, d[b] = e);e[c] = a;a._cacheIndex = f.length;f.push(a);
    }, _removeInactiveBinding: function _removeInactiveBinding(a) {
      var b = this._bindings,
          c = a.binding,
          d = c.rootNode.uuid,
          c = c.path,
          e = this._bindingsByRootAndName,
          f = e[d],
          g = b[b.length - 1];a = a._cacheIndex;g._cacheIndex = a;b[a] = g;b.pop();delete f[c];a: {
        for (var h in f) {
          break a;
        }delete e[d];
      }
    }, _lendBinding: function _lendBinding(a) {
      var b = this._bindings,
          c = a._cacheIndex,
          d = this._nActiveBindings++,
          e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
    }, _takeBackBinding: function _takeBackBinding(a) {
      var b = this._bindings,
          c = a._cacheIndex,
          d = --this._nActiveBindings,
          e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
    }, _lendControlInterpolant: function _lendControlInterpolant() {
      var a = this._controlInterpolants,
          b = this._nActiveControlInterpolants++,
          c = a[b];void 0 === c && (c = new Mc(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), c.__cacheIndex = b, a[b] = c);return c;
    }, _takeBackControlInterpolant: function _takeBackControlInterpolant(a) {
      var b = this._controlInterpolants,
          c = a.__cacheIndex,
          d = --this._nActiveControlInterpolants,
          e = b[d];a.__cacheIndex = d;b[d] = a;e.__cacheIndex = c;b[c] = e;
    }, _controlInterpolantsResultBuffer: new Float32Array(1) });Bb.prototype = Object.create(G.prototype);Bb.prototype.constructor = Bb;Bb.prototype.isInstancedBufferGeometry = !0;Bb.prototype.addGroup = function (a, b, c) {
    this.groups.push({ start: a, count: b, materialIndex: c });
  };Bb.prototype.copy = function (a) {
    var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
        c;for (c in b) {
      this.addAttribute(c, b[c].clone());
    }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
      var d = a[c];this.addGroup(d.start, d.count, d.materialIndex);
    }return this;
  };Vd.prototype = { constructor: Vd, isInterleavedBufferAttribute: !0, get count() {
      return this.data.count;
    }, get array() {
      return this.data.array;
    }, setX: function setX(a, b) {
      this.data.array[a * this.data.stride + this.offset] = b;return this;
    }, setY: function setY(a, b) {
      this.data.array[a * this.data.stride + this.offset + 1] = b;return this;
    }, setZ: function setZ(a, b) {
      this.data.array[a * this.data.stride + this.offset + 2] = b;return this;
    }, setW: function setW(a, b) {
      this.data.array[a * this.data.stride + this.offset + 3] = b;return this;
    },
    getX: function getX(a) {
      return this.data.array[a * this.data.stride + this.offset];
    }, getY: function getY(a) {
      return this.data.array[a * this.data.stride + this.offset + 1];
    }, getZ: function getZ(a) {
      return this.data.array[a * this.data.stride + this.offset + 2];
    }, getW: function getW(a) {
      return this.data.array[a * this.data.stride + this.offset + 3];
    }, setXY: function setXY(a, b, c) {
      a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;return this;
    }, setXYZ: function setXYZ(a, b, c, d) {
      a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;return this;
    }, setXYZW: function setXYZW(a, b, c, d, e) {
      a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;this.data.array[a + 3] = e;return this;
    } };ac.prototype = { constructor: ac, isInterleavedBuffer: !0, set needsUpdate(a) {
      !0 === a && this.version++;
    }, setArray: function setArray(a) {
      if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count = void 0 !== a ? a.length / this.stride : 0;this.array = a;
    }, setDynamic: function setDynamic(a) {
      this.dynamic = a;return this;
    }, copy: function copy(a) {
      this.array = new a.array.constructor(a.array);this.count = a.count;this.stride = a.stride;this.dynamic = a.dynamic;return this;
    }, copyAt: function copyAt(a, b, c) {
      a *= this.stride;c *= b.stride;for (var d = 0, e = this.stride; d < e; d++) {
        this.array[a + d] = b.array[c + d];
      }return this;
    }, set: function set(a, b) {
      void 0 === b && (b = 0);this.array.set(a, b);return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    } };bc.prototype = Object.create(ac.prototype);bc.prototype.constructor = bc;bc.prototype.isInstancedInterleavedBuffer = !0;bc.prototype.copy = function (a) {
    ac.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
  };cc.prototype = Object.create(C.prototype);cc.prototype.constructor = cc;cc.prototype.isInstancedBufferAttribute = !0;cc.prototype.copy = function (a) {
    C.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
  };Wd.prototype = { constructor: Wd, linePrecision: 1, set: function set(a, b) {
      this.ray.set(a, b);
    }, setFromCamera: function setFromCamera(a, b) {
      b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
    }, intersectObject: function intersectObject(a, b) {
      var c = [];Xd(a, this, c, b);c.sort(Be);return c;
    }, intersectObjects: function intersectObjects(a, b) {
      var c = [];if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), c;for (var d = 0, e = a.length; d < e; d++) {
        Xd(a[d], this, c, b);
      }c.sort(Be);return c;
    } };Yd.prototype = { constructor: Yd, start: function start() {
      this.oldTime = this.startTime = (performance || Date).now();this.elapsedTime = 0;this.running = !0;
    }, stop: function stop() {
      this.getElapsedTime();this.running = !1;
    }, getElapsedTime: function getElapsedTime() {
      this.getDelta();return this.elapsedTime;
    }, getDelta: function getDelta() {
      var a = 0;this.autoStart && !this.running && this.start();if (this.running) {
        var b = (performance || Date).now(),
            a = (b - this.oldTime) / 1E3;this.oldTime = b;this.elapsedTime += a;
      }return a;
    } };Zd.prototype = { constructor: Zd, set: function set(a, b, c) {
      this.radius = a;this.phi = b;this.theta = c;return this;
    }, clone: function clone() {
      return new this.constructor().copy(this);
    }, copy: function copy(a) {
      this.radius = a.radius;this.phi = a.phi;this.theta = a.theta;return this;
    }, makeSafe: function makeSafe() {
      this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));return this;
    }, setFromVector3: function setFromVector3(a) {
      this.radius = a.length();0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a.x, a.z), this.phi = Math.acos(T.clamp(a.y / this.radius, -1, 1)));return this;
    } };na.prototype = Object.create(ya.prototype);na.prototype.constructor = na;na.prototype.createAnimation = function (a, b, c, d) {
    b = { start: b, end: c, length: c - b + 1, fps: d, duration: (c - b) / d, lastFrame: 0, currentFrame: 0, active: !1, time: 0, direction: 1, weight: 1, directionBackwards: !1, mirroredLoop: !1 };this.animationsMap[a] = b;this.animationsList.push(b);
  };na.prototype.autoCreateAnimations = function (a) {
    for (var b = /([a-z]+)_?(\d+)/i, c, d = {}, e = this.geometry, f = 0, g = e.morphTargets.length; f < g; f++) {
      var h = e.morphTargets[f].name.match(b);
      if (h && 1 < h.length) {
        var k = h[1];d[k] || (d[k] = { start: Infinity, end: -Infinity });h = d[k];f < h.start && (h.start = f);f > h.end && (h.end = f);c || (c = k);
      }
    }for (k in d) {
      h = d[k], this.createAnimation(k, h.start, h.end, a);
    }this.firstAnimation = c;
  };na.prototype.setAnimationDirectionForward = function (a) {
    if (a = this.animationsMap[a]) a.direction = 1, a.directionBackwards = !1;
  };na.prototype.setAnimationDirectionBackward = function (a) {
    if (a = this.animationsMap[a]) a.direction = -1, a.directionBackwards = !0;
  };na.prototype.setAnimationFPS = function (a, b) {
    var c = this.animationsMap[a];c && (c.fps = b, c.duration = (c.end - c.start) / c.fps);
  };na.prototype.setAnimationDuration = function (a, b) {
    var c = this.animationsMap[a];c && (c.duration = b, c.fps = (c.end - c.start) / c.duration);
  };na.prototype.setAnimationWeight = function (a, b) {
    var c = this.animationsMap[a];c && (c.weight = b);
  };na.prototype.setAnimationTime = function (a, b) {
    var c = this.animationsMap[a];c && (c.time = b);
  };na.prototype.getAnimationTime = function (a) {
    var b = 0;if (a = this.animationsMap[a]) b = a.time;return b;
  };na.prototype.getAnimationDuration = function (a) {
    var b = -1;if (a = this.animationsMap[a]) b = a.duration;return b;
  };na.prototype.playAnimation = function (a) {
    var b = this.animationsMap[a];b ? (b.time = 0, b.active = !0) : console.warn("THREE.MorphBlendMesh: animation[" + a + "] undefined in .playAnimation()");
  };na.prototype.stopAnimation = function (a) {
    if (a = this.animationsMap[a]) a.active = !1;
  };na.prototype.update = function (a) {
    for (var b = 0, c = this.animationsList.length; b < c; b++) {
      var d = this.animationsList[b];if (d.active) {
        var e = d.duration / d.length;d.time += d.direction * a;if (d.mirroredLoop) {
          if (d.time > d.duration || 0 > d.time) d.direction *= -1, d.time > d.duration && (d.time = d.duration, d.directionBackwards = !0), 0 > d.time && (d.time = 0, d.directionBackwards = !1);
        } else d.time %= d.duration, 0 > d.time && (d.time += d.duration);var f = d.start + T.clamp(Math.floor(d.time / e), 0, d.length - 1),
            g = d.weight;f !== d.currentFrame && (this.morphTargetInfluences[d.lastFrame] = 0, this.morphTargetInfluences[d.currentFrame] = 1 * g, this.morphTargetInfluences[f] = 0, d.lastFrame = d.currentFrame, d.currentFrame = f);e = d.time % e / e;d.directionBackwards && (e = 1 - e);d.currentFrame !== d.lastFrame ? (this.morphTargetInfluences[d.currentFrame] = e * g, this.morphTargetInfluences[d.lastFrame] = (1 - e) * g) : this.morphTargetInfluences[d.currentFrame] = g;
      }
    }
  };Qc.prototype = Object.create(z.prototype);Qc.prototype.constructor = Qc;Qc.prototype.isImmediateRenderObject = !0;Rc.prototype = Object.create(la.prototype);Rc.prototype.constructor = Rc;Rc.prototype.update = function () {
    var a = new q(),
        b = new q(),
        c = new Ia();return function () {
      var d = ["a", "b", "c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);
      var e = this.object.matrixWorld,
          f = this.geometry.attributes.position,
          g = this.object.geometry;if (g && g.isGeometry) for (var h = g.vertices, k = g.faces, l = g = 0, q = k.length; l < q; l++) {
        for (var n = k[l], p = 0, r = n.vertexNormals.length; p < r; p++) {
          var x = n.vertexNormals[p];a.copy(h[n[d[p]]]).applyMatrix4(e);b.copy(x).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);f.setXYZ(g, a.x, a.y, a.z);g += 1;f.setXYZ(g, b.x, b.y, b.z);g += 1;
        }
      } else if (g && g.isBufferGeometry) for (d = g.attributes.position, h = g.attributes.normal, p = g = 0, r = d.count; p < r; p++) {
        a.set(d.getX(p), d.getY(p), d.getZ(p)).applyMatrix4(e), b.set(h.getX(p), h.getY(p), h.getZ(p)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), f.setXYZ(g, a.x, a.y, a.z), g += 1, f.setXYZ(g, b.x, b.y, b.z), g += 1;
      }f.needsUpdate = !0;return this;
    };
  }();dc.prototype = Object.create(z.prototype);dc.prototype.constructor = dc;dc.prototype.dispose = function () {
    this.cone.geometry.dispose();this.cone.material.dispose();
  };dc.prototype.update = function () {
    var a = new q(),
        b = new q();return function () {
      var c = this.light.distance ? this.light.distance : 1E3,
          d = c * Math.tan(this.light.angle);this.cone.scale.set(d, d, c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    };
  }();ec.prototype = Object.create(la.prototype);ec.prototype.constructor = ec;ec.prototype.getBoneList = function (a) {
    var b = [];a && a.isBone && b.push(a);for (var c = 0; c < a.children.length; c++) {
      b.push.apply(b, this.getBoneList(a.children[c]));
    }return b;
  };ec.prototype.update = function () {
    for (var a = this.geometry, b = new J().getInverse(this.root.matrixWorld), c = new J(), d = 0, e = 0; e < this.bones.length; e++) {
      var f = this.bones[e];f.parent && f.parent.isBone && (c.multiplyMatrices(b, f.matrixWorld), a.vertices[d].setFromMatrixPosition(c), c.multiplyMatrices(b, f.parent.matrixWorld), a.vertices[d + 1].setFromMatrixPosition(c), d += 2);
    }a.verticesNeedUpdate = !0;a.computeBoundingSphere();
  };fc.prototype = Object.create(ya.prototype);fc.prototype.constructor = fc;fc.prototype.dispose = function () {
    this.geometry.dispose();this.material.dispose();
  };fc.prototype.update = function () {
    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  };gc.prototype = Object.create(z.prototype);gc.prototype.constructor = gc;gc.prototype.dispose = function () {
    this.lightSphere.geometry.dispose();this.lightSphere.material.dispose();
  };gc.prototype.update = function () {
    var a = new q();return function () {
      this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);
      this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate = !0;
    };
  }();Sc.prototype = Object.create(la.prototype);Sc.prototype.constructor = Sc;Sc.prototype.setColors = function () {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };Tc.prototype = Object.create(la.prototype);Tc.prototype.constructor = Tc;Tc.prototype.update = function () {
    var a = new q(),
        b = new q(),
        c = new Ia();return function () {
      this.object.updateMatrixWorld(!0);
      c.getNormalMatrix(this.object.matrixWorld);for (var d = this.object.matrixWorld, e = this.geometry.attributes.position, f = this.object.geometry, g = f.vertices, f = f.faces, h = 0, k = 0, l = f.length; k < l; k++) {
        var q = f[k],
            n = q.normal;a.copy(g[q.a]).add(g[q.b]).add(g[q.c]).divideScalar(3).applyMatrix4(d);b.copy(n).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);e.setXYZ(h, a.x, a.y, a.z);h += 1;e.setXYZ(h, b.x, b.y, b.z);h += 1;
      }e.needsUpdate = !0;return this;
    };
  }();hc.prototype = Object.create(z.prototype);hc.prototype.constructor = hc;hc.prototype.dispose = function () {
    var a = this.children[0],
        b = this.children[1];a.geometry.dispose();a.material.dispose();b.geometry.dispose();b.material.dispose();
  };hc.prototype.update = function () {
    var a = new q(),
        b = new q(),
        c = new q();return function () {
      a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b, a);var d = this.children[0],
          e = this.children[1];d.lookAt(c);d.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);e.lookAt(c);
      e.scale.z = c.length();
    };
  }();Uc.prototype = Object.create(la.prototype);Uc.prototype.constructor = Uc;Uc.prototype.update = function () {
    function a(a, g, h, k) {
      d.set(g, h, k).unproject(e);a = c[a];if (void 0 !== a) for (g = 0, h = a.length; g < h; g++) {
        b.vertices[a[g]].copy(d);
      }
    }var b,
        c,
        d = new q(),
        e = new Z();return function () {
      b = this.geometry;c = this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c", 0, 0, -1);a("t", 0, 0, 1);a("n1", -1, -1, -1);a("n2", 1, -1, -1);a("n3", -1, 1, -1);a("n4", 1, 1, -1);a("f1", -1, -1, 1);a("f2", 1, -1, 1);a("f3", -1, 1, 1);a("f4", 1, 1, 1);a("u1", .7, 1.1, -1);a("u2", -.7, 1.1, -1);a("u3", 0, 2, -1);a("cf1", -1, 0, 1);a("cf2", 1, 0, 1);a("cf3", 0, -1, 1);a("cf4", 0, 1, 1);a("cn1", -1, 0, -1);a("cn2", 1, 0, -1);a("cn3", 0, -1, -1);a("cn4", 0, 1, -1);b.verticesNeedUpdate = !0;
    };
  }();Vc.prototype = Object.create(ya.prototype);Vc.prototype.constructor = Vc;Vc.prototype.update = function () {
    this.box.setFromObject(this.object);this.box.getSize(this.scale);this.box.getCenter(this.position);
  };Wc.prototype = Object.create(la.prototype);Wc.prototype.constructor = Wc;Wc.prototype.update = function () {
    var a = new Ba();return function (b) {
      b && b.isBox3 ? a.copy(b) : a.setFromObject(b);if (!a.isEmpty()) {
        b = a.min;var c = a.max,
            d = this.geometry.attributes.position,
            e = d.array;e[0] = c.x;e[1] = c.y;e[2] = c.z;e[3] = b.x;e[4] = c.y;e[5] = c.z;e[6] = b.x;e[7] = b.y;e[8] = c.z;e[9] = c.x;e[10] = b.y;e[11] = c.z;e[12] = c.x;e[13] = c.y;e[14] = b.z;e[15] = b.x;e[16] = c.y;e[17] = b.z;e[18] = b.x;e[19] = b.y;e[20] = b.z;e[21] = c.x;e[22] = b.y;e[23] = b.z;d.needsUpdate = !0;this.geometry.computeBoundingSphere();
      }
    };
  }();var Ce = new G();Ce.addAttribute("position", new ha([0, 0, 0, 0, 1, 0], 3));var De = new Ua(0, .5, 1, 5, 1);De.translate(0, -.5, 0);Cb.prototype = Object.create(z.prototype);Cb.prototype.constructor = Cb;Cb.prototype.setDirection = function () {
    var a = new q(),
        b;return function (c) {
      .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
    };
  }();Cb.prototype.setLength = function (a, b, c) {
    void 0 === b && (b = .2 * a);void 0 === c && (c = .2 * b);this.line.scale.set(1, Math.max(0, a - b), 1);this.line.updateMatrix();
    this.cone.scale.set(c, b, c);this.cone.position.y = a;this.cone.updateMatrix();
  };Cb.prototype.setColor = function (a) {
    this.line.material.color.copy(a);this.cone.material.color.copy(a);
  };xd.prototype = Object.create(la.prototype);xd.prototype.constructor = xd;var $d = function () {
    function a() {}var b = new q(),
        c = new a(),
        d = new a(),
        e = new a();a.prototype.init = function (a, b, c, d) {
      this.c0 = a;this.c1 = c;this.c2 = -3 * a + 3 * b - 2 * c - d;this.c3 = 2 * a - 2 * b + c + d;
    };a.prototype.initNonuniformCatmullRom = function (a, b, c, d, e, l, n) {
      this.init(b, c, ((b - a) / e - (c - a) / (e + l) + (c - b) / l) * l, ((c - b) / l - (d - b) / (l + n) + (d - c) / n) * l);
    };a.prototype.initCatmullRom = function (a, b, c, d, e) {
      this.init(b, c, e * (c - a), e * (d - b));
    };a.prototype.calc = function (a) {
      var b = a * a;return this.c0 + this.c1 * a + this.c2 * b + this.c3 * b * a;
    };return ia.create(function (a) {
      this.points = a || [];this.closed = !1;
    }, function (a) {
      var g = this.points,
          h,
          k;k = g.length;2 > k && console.log("duh, you need at least 2 points");a *= k - (this.closed ? 0 : 1);h = Math.floor(a);a -= h;this.closed ? h += 0 < h ? 0 : (Math.floor(Math.abs(h) / g.length) + 1) * g.length : 0 === a && h === k - 1 && (h = k - 2, a = 1);var l, w, n;this.closed || 0 < h ? l = g[(h - 1) % k] : (b.subVectors(g[0], g[1]).add(g[0]), l = b);w = g[h % k];n = g[(h + 1) % k];this.closed || h + 2 < k ? g = g[(h + 2) % k] : (b.subVectors(g[k - 1], g[k - 2]).add(g[k - 1]), g = b);if (void 0 === this.type || "centripetal" === this.type || "chordal" === this.type) {
        var p = "chordal" === this.type ? .5 : .25;k = Math.pow(l.distanceToSquared(w), p);h = Math.pow(w.distanceToSquared(n), p);p = Math.pow(n.distanceToSquared(g), p);1E-4 > h && (h = 1);1E-4 > k && (k = h);1E-4 > p && (p = h);c.initNonuniformCatmullRom(l.x, w.x, n.x, g.x, k, h, p);d.initNonuniformCatmullRom(l.y, w.y, n.y, g.y, k, h, p);e.initNonuniformCatmullRom(l.z, w.z, n.z, g.z, k, h, p);
      } else "catmullrom" === this.type && (k = void 0 !== this.tension ? this.tension : .5, c.initCatmullRom(l.x, w.x, n.x, g.x, k), d.initCatmullRom(l.y, w.y, n.y, g.y, k), e.initCatmullRom(l.z, w.z, n.z, g.z, k));return new q(c.calc(a), d.calc(a), e.calc(a));
    });
  }();Ee.prototype = Object.create($d.prototype);var Ef = ia.create(function (a) {
    console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3");this.points = void 0 === a ? [] : a;
  }, function (a) {
    var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 == c ? c : c - 1],
        e = b[c],
        f = b[c > b.length - 2 ? b.length - 1 : c + 1],
        b = b[c > b.length - 3 ? b.length - 1 : c + 2],
        c = Xc.interpolate;return new q(c(d.x, e.x, f.x, b.x, a), c(d.y, e.y, f.y, b.y, a), c(d.z, e.z, f.z, b.z, a));
  }),
      Ff = ia.create(function (a, b, c, d) {
    this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
  }, function (a) {
    var b = ra.b3;return new q(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y), b(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z));
  }),
      Gf = ia.create(function (a, b, c) {
    this.v0 = a;this.v1 = b;this.v2 = c;
  }, function (a) {
    var b = ra.b2;return new q(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y), b(a, this.v0.z, this.v1.z, this.v2.z));
  }),
      Hf = ia.create(function (a, b) {
    this.v1 = a;this.v2 = b;
  }, function (a) {
    if (1 === a) return this.v2.clone();var b = new q();b.subVectors(this.v2, this.v1);b.multiplyScalar(a);b.add(this.v1);return b;
  });yd.prototype = Object.create(Va.prototype);yd.prototype.constructor = yd;Object.assign(ic.prototype, { center: function center(a) {
      console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
      return this.getCenter(a);
    }, empty: function empty() {
      console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty();
    }, isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a);
    }, size: function size(a) {
      console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(a);
    } });Object.assign(Ba.prototype, { center: function center(a) {
      console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
      return this.getCenter(a);
    }, empty: function empty() {
      console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty();
    }, isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a);
    }, isIntersectionSphere: function isIntersectionSphere(a) {
      console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a);
    }, size: function size(a) {
      console.warn("THREE.Box3: .size() has been renamed to .getSize().");
      return this.getSize(a);
    } });Object.assign(gb.prototype, { center: function center(a) {
      console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(a);
    } });Object.assign(Ia.prototype, { multiplyVector3: function multiplyVector3(a) {
      console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this);
    }, multiplyVector3Array: function multiplyVector3Array(a) {
      console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
      return this.applyToVector3Array(a);
    } });Object.assign(J.prototype, { extractPosition: function extractPosition(a) {
      console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(a);
    }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
      console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(a);
    }, multiplyVector3: function multiplyVector3(a) {
      console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
      return a.applyProjection(this);
    }, multiplyVector4: function multiplyVector4(a) {
      console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
    }, multiplyVector3Array: function multiplyVector3Array(a) {
      console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a);
    }, rotateAxis: function rotateAxis(a) {
      console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
      a.transformDirection(this);
    }, crossVector: function crossVector(a) {
      console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
    }, translate: function translate(a) {
      console.error("THREE.Matrix4: .translate() has been removed.");
    }, rotateX: function rotateX(a) {
      console.error("THREE.Matrix4: .rotateX() has been removed.");
    }, rotateY: function rotateY(a) {
      console.error("THREE.Matrix4: .rotateY() has been removed.");
    }, rotateZ: function rotateZ(a) {
      console.error("THREE.Matrix4: .rotateZ() has been removed.");
    },
    rotateByAxis: function rotateByAxis(a, b) {
      console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    } });Object.assign(va.prototype, { isIntersectionLine: function isIntersectionLine(a) {
      console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(a);
    } });Object.assign(ba.prototype, { multiplyVector3: function multiplyVector3(a) {
      console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this);
    } });Object.assign(ab.prototype, { isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a);
    }, isIntersectionPlane: function isIntersectionPlane(a) {
      console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(a);
    }, isIntersectionSphere: function isIntersectionSphere(a) {
      console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a);
    } });Object.assign(Ab.prototype, { extrude: function extrude(a) {
      console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
      return new za(this, a);
    }, makeGeometry: function makeGeometry(a) {
      console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new cb(this, a);
    } });Object.assign(q.prototype, { setEulerFromRotationMatrix: function setEulerFromRotationMatrix() {
      console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    }, setEulerFromQuaternion: function setEulerFromQuaternion() {
      console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    },
    getPositionFromMatrix: function getPositionFromMatrix(a) {
      console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a);
    }, getScaleFromMatrix: function getScaleFromMatrix(a) {
      console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a);
    }, getColumnFromMatrix: function getColumnFromMatrix(a, b) {
      console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(b, a);
    } });Object.assign(z.prototype, { getChildByName: function getChildByName(a) {
      console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a);
    }, renderDepth: function renderDepth(a) {
      console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
    }, translate: function translate(a, b) {
      console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b, a);
    } });Object.defineProperties(z.prototype, { eulerOrder: { get: function get() {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order;
      }, set: function set(a) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order = a;
      } }, useQuaternion: { get: function get() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }, set: function set(a) {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      } } });
  Object.defineProperties(nc.prototype, { objects: { get: function get() {
        console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels;
      } } });Ea.prototype.setLens = function (a, b) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0 !== b && (this.filmGauge = b);this.setFocalLength(a);
  };Object.defineProperties(pa.prototype, { onlyShadow: { set: function set(a) {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      } }, shadowCameraFov: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
        this.shadow.camera.fov = a;
      } }, shadowCameraLeft: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left = a;
      } }, shadowCameraRight: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right = a;
      } }, shadowCameraTop: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top = a;
      } }, shadowCameraBottom: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
        this.shadow.camera.bottom = a;
      } }, shadowCameraNear: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near = a;
      } }, shadowCameraFar: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far = a;
      } }, shadowCameraVisible: { set: function set(a) {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      } }, shadowBias: { set: function set(a) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
        this.shadow.bias = a;
      } }, shadowDarkness: { set: function set(a) {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      } }, shadowMapWidth: { set: function set(a) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width = a;
      } }, shadowMapHeight: { set: function set(a) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height = a;
      } } });Object.defineProperties(C.prototype, { length: { get: function get() {
        console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");
        return this.array.length;
      } } });Object.assign(G.prototype, { addIndex: function addIndex(a) {
      console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a);
    }, addDrawCall: function addDrawCall(a, b, c) {
      void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a, b);
    }, clearDrawCalls: function clearDrawCalls() {
      console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
      this.clearGroups();
    }, computeTangents: function computeTangents() {
      console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
    }, computeOffsets: function computeOffsets() {
      console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
    } });Object.defineProperties(G.prototype, { drawcalls: { get: function get() {
        console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups;
      } }, offsets: { get: function get() {
        console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups;
      } } });
  Object.defineProperties(U.prototype, { wrapAround: { get: function get() {
        console.warn("THREE." + this.type + ": .wrapAround has been removed.");
      }, set: function set(a) {
        console.warn("THREE." + this.type + ": .wrapAround has been removed.");
      } }, wrapRGB: { get: function get() {
        console.warn("THREE." + this.type + ": .wrapRGB has been removed.");return new O();
      } } });Object.defineProperties(db.prototype, { metal: { get: function get() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");return !1;
      }, set: function set(a) {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
      } } });
  Object.defineProperties(Fa.prototype, { derivatives: { get: function get() {
        console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives;
      }, set: function set(a) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives = a;
      } } });sa.prototype = Object.assign(Object.create({ constructor: sa, apply: function apply(a) {
      console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in.");
      Object.assign(a, this);
    } }), sa.prototype);Object.defineProperties(Ae.prototype, { dynamic: { set: function set(a) {
        console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
      } }, onUpdate: { value: function value() {
        console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this;
      } } });Object.assign(Dd.prototype, { supportsFloatTextures: function supportsFloatTextures() {
      console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
      return this.extensions.get("OES_texture_float");
    }, supportsHalfFloatTextures: function supportsHalfFloatTextures() {
      console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float");
    }, supportsStandardDerivatives: function supportsStandardDerivatives() {
      console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives");
    }, supportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
      return this.extensions.get("WEBGL_compressed_texture_s3tc");
    }, supportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc");
    }, supportsBlendMinMax: function supportsBlendMinMax() {
      console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax");
    }, supportsVertexTextures: function supportsVertexTextures() {
      return this.capabilities.vertexTextures;
    },
    supportsInstancedArrays: function supportsInstancedArrays() {
      console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays");
    }, enableScissorTest: function enableScissorTest(a) {
      console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(a);
    }, initMaterial: function initMaterial() {
      console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    }, addPrePlugin: function addPrePlugin() {
      console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    },
    addPostPlugin: function addPostPlugin() {
      console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    }, updateShadowMap: function updateShadowMap() {
      console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    } });Object.defineProperties(Dd.prototype, { shadowMapEnabled: { get: function get() {
        return this.shadowMap.enabled;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled = a;
      } }, shadowMapType: { get: function get() {
        return this.shadowMap.type;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
        this.shadowMap.type = a;
      } }, shadowMapCullFace: { get: function get() {
        return this.shadowMap.cullFace;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");this.shadowMap.cullFace = a;
      } } });Object.defineProperties(pe.prototype, { cullFace: { get: function get() {
        return this.renderReverseSided ? 2 : 1;
      }, set: function set(a) {
        a = 1 !== a;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + a + ".");this.renderReverseSided = a;
      } } });Object.defineProperties(Db.prototype, { wrapS: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS = a;
      } }, wrapT: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT = a;
      } }, magFilter: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        return this.texture.magFilter;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter = a;
      } }, minFilter: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter = a;
      } }, anisotropy: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        return this.texture.anisotropy;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy = a;
      } }, offset: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset = a;
      } }, repeat: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat = a;
      } }, format: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format = a;
      } }, type: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        this.texture.type = a;
      } }, generateMipmaps: { get: function get() {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps;
      }, set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps = a;
      } } });Object.assign($b.prototype, { load: function load(a) {
      console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var b = this;new Od().load(a, function (a) {
        b.setBuffer(a);
      });
      return this;
    } });Object.assign(Rd.prototype, { getData: function getData(a) {
      console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData();
    } });l.WebGLRenderTargetCube = Eb;l.WebGLRenderTarget = Db;l.WebGLRenderer = Dd;l.ShaderLib = Gb;l.UniformsLib = W;l.UniformsUtils = La;l.ShaderChunk = X;l.FogExp2 = Ib;l.Fog = Jb;l.Scene = jb;l.LensFlare = Ed;l.Sprite = mc;l.LOD = nc;l.SkinnedMesh = dd;l.Skeleton = bd;l.Bone = cd;l.Mesh = ya;l.LineSegments = la;l.Line = Ta;l.Points = Kb;l.Group = oc;l.VideoTexture = ed;l.DataTexture = lb;l.CompressedTexture = Lb;l.CubeTexture = Xa;l.CanvasTexture = fd;l.DepthTexture = pc;l.TextureIdCount = function () {
    return ee++;
  };l.Texture = da;l.MaterialIdCount = function () {
    return oe++;
  };l.CompressedTextureLoader = we;l.BinaryTextureLoader = Gd;l.DataTextureLoader = Gd;l.CubeTextureLoader = Hd;l.TextureLoader = gd;l.ObjectLoader = xe;l.MaterialLoader = ud;l.BufferGeometryLoader = Id;l.DefaultLoadingManager = Ga;l.LoadingManager = Fd;l.JSONLoader = Jd;l.ImageLoader = Lc;l.FontLoader = ye;l.XHRLoader = Ja;l.Loader = wb;l.Cache = ce;l.AudioLoader = Od;l.SpotLightShadow = id;l.SpotLight = jd;l.PointLight = kd;l.HemisphereLight = hd;l.DirectionalLightShadow = ld;l.DirectionalLight = md;l.AmbientLight = nd;l.LightShadow = tb;l.Light = pa;l.StereoCamera = ze;l.PerspectiveCamera = Ea;l.OrthographicCamera = Hb;l.CubeCamera = vd;l.Camera = Z;l.AudioListener = Pd;l.PositionalAudio = Qd;l.getAudioContext = Md;l.AudioAnalyser = Rd;l.Audio = $b;l.VectorKeyframeTrack = Yb;l.StringKeyframeTrack = rd;l.QuaternionKeyframeTrack = Nc;l.NumberKeyframeTrack = Zb;l.ColorKeyframeTrack = td;l.BooleanKeyframeTrack = sd;l.PropertyMixer = wd;l.PropertyBinding = fa;l.KeyframeTrack = vb;l.AnimationUtils = ma;l.AnimationObjectGroup = Sd;l.AnimationMixer = Ud;l.AnimationClip = Ha;l.Uniform = Ae;l.InstancedBufferGeometry = Bb;l.BufferGeometry = G;l.GeometryIdCount = function () {
    return ad++;
  };l.Geometry = Q;l.InterleavedBufferAttribute = Vd;l.InstancedInterleavedBuffer = bc;l.InterleavedBuffer = ac;l.InstancedBufferAttribute = cc;l.DynamicBufferAttribute = function (a, b) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
    return new C(a, b).setDynamic(!0);
  };l.Float64Attribute = function (a, b) {
    return new C(new Float64Array(a), b);
  };l.Float32Attribute = ha;l.Uint32Attribute = $c;l.Int32Attribute = function (a, b) {
    return new C(new Int32Array(a), b);
  };l.Uint16Attribute = Zc;l.Int16Attribute = function (a, b) {
    return new C(new Int16Array(a), b);
  };l.Uint8ClampedAttribute = function (a, b) {
    return new C(new Uint8ClampedArray(a), b);
  };l.Uint8Attribute = function (a, b) {
    return new C(new Uint8Array(a), b);
  };l.Int8Attribute = function (a, b) {
    return new C(new Int8Array(a), b);
  };l.BufferAttribute = C;l.Face3 = ea;l.Object3DIdCount = function () {
    return qe++;
  };l.Object3D = z;l.Raycaster = Wd;l.Layers = Yc;l.EventDispatcher = sa;l.Clock = Yd;l.QuaternionLinearInterpolant = qd;l.LinearInterpolant = Mc;l.DiscreteInterpolant = pd;l.CubicInterpolant = od;l.Interpolant = qa;l.Triangle = wa;l.Spline = function (a) {
    function b(a, b, c, d, e, f, g) {
      a = .5 * (c - a);d = .5 * (d - b);return (2 * (b - c) + a + d) * g + (-3 * (b - c) - 2 * a - d) * f + a * e + b;
    }this.points = a;var c = [],
        d = { x: 0, y: 0, z: 0 },
        e,
        f,
        g,
        h,
        k,
        l,
        w,
        n,
        p;this.initFromArray = function (a) {
      this.points = [];
      for (var b = 0; b < a.length; b++) {
        this.points[b] = { x: a[b][0], y: a[b][1], z: a[b][2] };
      }
    };this.getPoint = function (a) {
      e = (this.points.length - 1) * a;f = Math.floor(e);g = e - f;c[0] = 0 === f ? f : f - 1;c[1] = f;c[2] = f > this.points.length - 2 ? this.points.length - 1 : f + 1;c[3] = f > this.points.length - 3 ? this.points.length - 1 : f + 2;l = this.points[c[0]];w = this.points[c[1]];n = this.points[c[2]];p = this.points[c[3]];h = g * g;k = g * h;d.x = b(l.x, w.x, n.x, p.x, g, h, k);d.y = b(l.y, w.y, n.y, p.y, g, h, k);d.z = b(l.z, w.z, n.z, p.z, g, h, k);return d;
    };this.getControlPointsArray = function () {
      var a,
          b,
          c = this.points.length,
          d = [];for (a = 0; a < c; a++) {
        b = this.points[a], d[a] = [b.x, b.y, b.z];
      }return d;
    };this.getLength = function (a) {
      var b,
          c,
          d,
          e = 0,
          f = new q(),
          g = new q(),
          h = [],
          k = 0;h[0] = 0;a || (a = 100);c = this.points.length * a;f.copy(this.points[0]);for (a = 1; a < c; a++) {
        b = a / c, d = this.getPoint(b), g.copy(d), k += g.distanceTo(f), f.copy(d), b *= this.points.length - 1, b = Math.floor(b), b !== e && (h[b] = k, e = b);
      }h[h.length] = k;return { chunks: h, total: k };
    };this.reparametrizeByArcLength = function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = [],
          k = new q(),
          l = this.getLength();h.push(k.copy(this.points[0]).clone());
      for (b = 1; b < this.points.length; b++) {
        c = l.chunks[b] - l.chunks[b - 1];g = Math.ceil(a * c / l.total);e = (b - 1) / (this.points.length - 1);f = b / (this.points.length - 1);for (c = 1; c < g - 1; c++) {
          d = e + 1 / g * c * (f - e), d = this.getPoint(d), h.push(k.copy(d).clone());
        }h.push(k.copy(this.points[b]).clone());
      }this.points = h;
    };
  };l.Math = T;l.Spherical = Zd;l.Plane = va;l.Frustum = jc;l.Sphere = Ca;l.Ray = ab;l.Matrix4 = J;l.Matrix3 = Ia;l.Box3 = Ba;l.Box2 = ic;l.Line3 = gb;l.Euler = bb;l.Vector4 = ga;l.Vector3 = q;l.Vector2 = B;l.Quaternion = ba;l.ColorKeywords = He;l.Color = O;l.MorphBlendMesh = na;l.ImmediateRenderObject = Qc;l.VertexNormalsHelper = Rc;l.SpotLightHelper = dc;l.SkeletonHelper = ec;l.PointLightHelper = fc;l.HemisphereLightHelper = gc;l.GridHelper = Sc;l.FaceNormalsHelper = Tc;l.DirectionalLightHelper = hc;l.CameraHelper = Uc;l.BoundingBoxHelper = Vc;l.BoxHelper = Wc;l.ArrowHelper = Cb;l.AxisHelper = xd;l.ClosedSplineCurve3 = Ee;l.CatmullRomCurve3 = $d;l.SplineCurve3 = Ef;l.CubicBezierCurve3 = Ff;l.QuadraticBezierCurve3 = Gf;l.LineCurve3 = Hf;l.ArcCurve = yd;l.EllipseCurve = Va;l.SplineCurve = xb;l.CubicBezierCurve = yb;
  l.QuadraticBezierCurve = zb;l.LineCurve = Sa;l.Shape = Ab;l.ShapePath = Kd;l.Path = Pc;l.Font = Ld;l.CurvePath = Oc;l.Curve = ia;l.ShapeUtils = ra;l.SceneUtils = { createMultiMaterialObject: function createMultiMaterialObject(a, b) {
      for (var c = new oc(), d = 0, e = b.length; d < e; d++) {
        c.add(new ya(a, b[d]));
      }return c;
    }, detach: function detach(a, b, c) {
      a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a);
    }, attach: function attach(a, b, c) {
      var d = new J();d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a);
    } };l.CurveUtils = Xc;l.WireframeGeometry = Mb;l.ParametricGeometry = qc;l.ParametricBufferGeometry = Nb;l.TetrahedronGeometry = sc;l.TetrahedronBufferGeometry = rc;l.OctahedronGeometry = uc;l.OctahedronBufferGeometry = tc;l.IcosahedronGeometry = wc;l.IcosahedronBufferGeometry = vc;l.DodecahedronGeometry = yc;l.DodecahedronBufferGeometry = xc;l.PolyhedronGeometry = zc;l.PolyhedronBufferGeometry = ua;l.TubeGeometry = Ac;l.TubeBufferGeometry = Ob;l.TorusKnotGeometry = Bc;l.TorusKnotBufferGeometry = Pb;l.TorusGeometry = Cc;l.TorusBufferGeometry = Qb;l.TextGeometry = Dc;l.SphereBufferGeometry = mb;l.SphereGeometry = Rb;l.RingGeometry = Ec;
  l.RingBufferGeometry = Sb;l.PlaneBufferGeometry = ib;l.PlaneGeometry = Fc;l.LatheGeometry = Gc;l.LatheBufferGeometry = Tb;l.ShapeGeometry = cb;l.ExtrudeGeometry = za;l.EdgesGeometry = Ub;l.ConeGeometry = Hc;l.ConeBufferGeometry = Ic;l.CylinderGeometry = nb;l.CylinderBufferGeometry = Ua;l.CircleBufferGeometry = Vb;l.CircleGeometry = Jc;l.BoxBufferGeometry = hb;l.BoxGeometry = ob;l.ShadowMaterial = Wb;l.SpriteMaterial = kb;l.RawShaderMaterial = Xb;l.ShaderMaterial = Fa;l.PointsMaterial = xa;l.MultiMaterial = Kc;l.MeshPhysicalMaterial = pb;l.MeshStandardMaterial = Oa;l.MeshPhongMaterial = db;l.MeshNormalMaterial = qb;l.MeshLambertMaterial = rb;l.MeshDepthMaterial = Za;l.MeshBasicMaterial = Ma;l.LineDashedMaterial = sb;l.LineBasicMaterial = oa;l.Material = U;l.REVISION = "82";l.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };l.CullFaceNone = 0;l.CullFaceBack = 1;l.CullFaceFront = 2;l.CullFaceFrontBack = 3;l.FrontFaceDirectionCW = 0;l.FrontFaceDirectionCCW = 1;l.BasicShadowMap = 0;l.PCFShadowMap = 1;l.PCFSoftShadowMap = 2;l.FrontSide = 0;l.BackSide = 1;l.DoubleSide = 2;l.FlatShading = 1;l.SmoothShading = 2;l.NoColors = 0;
  l.FaceColors = 1;l.VertexColors = 2;l.NoBlending = 0;l.NormalBlending = 1;l.AdditiveBlending = 2;l.SubtractiveBlending = 3;l.MultiplyBlending = 4;l.CustomBlending = 5;l.BlendingMode = Fe;l.AddEquation = 100;l.SubtractEquation = 101;l.ReverseSubtractEquation = 102;l.MinEquation = 103;l.MaxEquation = 104;l.ZeroFactor = 200;l.OneFactor = 201;l.SrcColorFactor = 202;l.OneMinusSrcColorFactor = 203;l.SrcAlphaFactor = 204;l.OneMinusSrcAlphaFactor = 205;l.DstAlphaFactor = 206;l.OneMinusDstAlphaFactor = 207;l.DstColorFactor = 208;l.OneMinusDstColorFactor = 209;l.SrcAlphaSaturateFactor = 210;l.NeverDepth = 0;l.AlwaysDepth = 1;l.LessDepth = 2;l.LessEqualDepth = 3;l.EqualDepth = 4;l.GreaterEqualDepth = 5;l.GreaterDepth = 6;l.NotEqualDepth = 7;l.MultiplyOperation = 0;l.MixOperation = 1;l.AddOperation = 2;l.NoToneMapping = 0;l.LinearToneMapping = 1;l.ReinhardToneMapping = 2;l.Uncharted2ToneMapping = 3;l.CineonToneMapping = 4;l.UVMapping = 300;l.CubeReflectionMapping = 301;l.CubeRefractionMapping = 302;l.EquirectangularReflectionMapping = 303;l.EquirectangularRefractionMapping = 304;l.SphericalReflectionMapping = 305;l.CubeUVReflectionMapping = 306;l.CubeUVRefractionMapping = 307;l.TextureMapping = Ge;l.RepeatWrapping = 1E3;l.ClampToEdgeWrapping = 1001;l.MirroredRepeatWrapping = 1002;l.TextureWrapping = ae;l.NearestFilter = 1003;l.NearestMipMapNearestFilter = 1004;l.NearestMipMapLinearFilter = 1005;l.LinearFilter = 1006;l.LinearMipMapNearestFilter = 1007;l.LinearMipMapLinearFilter = 1008;l.TextureFilter = be;l.UnsignedByteType = 1009;l.ByteType = 1010;l.ShortType = 1011;l.UnsignedShortType = 1012;l.IntType = 1013;l.UnsignedIntType = 1014;l.FloatType = 1015;l.HalfFloatType = 1016;l.UnsignedShort4444Type = 1017;l.UnsignedShort5551Type = 1018;l.UnsignedShort565Type = 1019;l.UnsignedInt248Type = 1020;l.AlphaFormat = 1021;l.RGBFormat = 1022;l.RGBAFormat = 1023;l.LuminanceFormat = 1024;l.LuminanceAlphaFormat = 1025;l.RGBEFormat = 1023;l.DepthFormat = 1026;l.DepthStencilFormat = 1027;l.RGB_S3TC_DXT1_Format = 2001;l.RGBA_S3TC_DXT1_Format = 2002;l.RGBA_S3TC_DXT3_Format = 2003;l.RGBA_S3TC_DXT5_Format = 2004;l.RGB_PVRTC_4BPPV1_Format = 2100;l.RGB_PVRTC_2BPPV1_Format = 2101;l.RGBA_PVRTC_4BPPV1_Format = 2102;l.RGBA_PVRTC_2BPPV1_Format = 2103;l.RGB_ETC1_Format = 2151;l.LoopOnce = 2200;l.LoopRepeat = 2201;l.LoopPingPong = 2202;l.InterpolateDiscrete = 2300;l.InterpolateLinear = 2301;l.InterpolateSmooth = 2302;l.ZeroCurvatureEnding = 2400;l.ZeroSlopeEnding = 2401;l.WrapAroundEnding = 2402;l.TrianglesDrawMode = 0;l.TriangleStripDrawMode = 1;l.TriangleFanDrawMode = 2;l.LinearEncoding = 3E3;l.sRGBEncoding = 3001;l.GammaEncoding = 3007;l.RGBEEncoding = 3002;l.LogLuvEncoding = 3003;l.RGBM7Encoding = 3004;l.RGBM16Encoding = 3005;l.RGBDEncoding = 3006;
  l.BasicDepthPacking = 3200;l.RGBADepthPacking = 3201;l.CubeGeometry = ob;l.Face4 = function (a, b, c, d, e, f, g) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new ea(a, b, c, e, f, g);
  };l.LineStrip = 0;l.LinePieces = 1;l.MeshFaceMaterial = Kc;l.PointCloud = function (a, b) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Kb(a, b);
  };l.Particle = mc;l.ParticleSystem = function (a, b) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Kb(a, b);
  };l.PointCloudMaterial = function (a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new xa(a);
  };l.ParticleBasicMaterial = function (a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new xa(a);
  };l.ParticleSystemMaterial = function (a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new xa(a);
  };l.Vertex = function (a, b, c) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new q(a, b, c);
  };l.EdgesHelper = function (a, b) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new la(new Ub(a.geometry), new oa({ color: void 0 !== b ? b : 16777215 }));
  };l.WireframeHelper = function (a, b) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new la(new Mb(a.geometry), new oa({ color: void 0 !== b ? b : 16777215 }));
  };l.GeometryUtils = { merge: function merge(a, b, c) {
      console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
      var d;b.isMesh && (b.matrixAutoUpdate && b.updateMatrix(), d = b.matrix, b = b.geometry);a.merge(b, d, c);
    }, center: function center(a) {
      console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center();
    } };l.ImageUtils = { crossOrigin: void 0, loadTexture: function loadTexture(a, b, c, d) {
      console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var e = new gd();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
    },
    loadTextureCube: function loadTextureCube(a, b, c, d) {
      console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var e = new Hd();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
    }, loadCompressedTexture: function loadCompressedTexture() {
      console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
    }, loadCompressedTextureCube: function loadCompressedTextureCube() {
      console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
    } };
  l.Projector = function () {
    console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector = function (a, b) {
      console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b);
    };this.unprojectVector = function (a, b) {
      console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b);
    };this.pickingRay = function (a, b) {
      console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
    };
  };l.CanvasRenderer = function () {
    console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
    this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");this.clear = function () {};this.render = function () {};this.setClearColor = function () {};this.setSize = function () {};
  };Object.defineProperty(l, "__esModule", { value: !0 });Object.defineProperty(l, "AudioContext", { get: function get() {
      return l.getAudioContext();
    } });
});

},{}]},{},[4]);
